('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_anim')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'common_scripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'pel2_util')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_vehicle_utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: create_see2_threat_group')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Creates a threat bias group that can be used to calculate threat bias for vehicles')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'create_see2_threat_group')
('LPAREN', '(')
('IDENTIFIER', 'group')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'array_check_for_dupes')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('COMMA', ',')
('IDENTIFIER', 'group')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('COMMA', ',')
('IDENTIFIER', 'group')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'empty_array')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat')
('COMMA', ',')
('IDENTIFIER', 'empty_array')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat')
('LBRACKET', '[')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat')
('DOT', '.')
('IDENTIFIER', 'size')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: set_see2_threat_bias')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Sets the threat of one group against another')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'set_see2_threat_bias')
('LPAREN', '(')
('IDENTIFIER', 'againstGroup')
('COMMA', ',')
('IDENTIFIER', 'group')
('COMMA', ',')
('IDENTIFIER', 'threatval')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'group1index')
('ASSIGNMENT', '=')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'group2index')
('ASSIGNMENT', '=')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', 'againstGroup')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'group1index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', 'group')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'group2index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'group1index')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'create_see2_threat_group')
('LPAREN', '(')
('IDENTIFIER', 'againstGroup')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'group1index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('DOT', '.')
('IDENTIFIER', 'size')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'group2index')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'create_see2_threat_group')
('LPAREN', '(')
('IDENTIFIER', 'group')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'group2index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('DOT', '.')
('IDENTIFIER', 'size')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat')
('LBRACKET', '[')
('IDENTIFIER', 'group1index')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'group2index')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'threatval')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: set_ent_see2_bias_group')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an entity')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Adds an entity to a threat bias group')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'set_ent_see2_bias_group')
('LPAREN', '(')
('IDENTIFIER', 'group')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'array_check_for_dupes')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('COMMA', ',')
('IDENTIFIER', 'group')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'create_see2_threat_group')
('LPAREN', '(')
('IDENTIFIER', 'group')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'my_group')
('ASSIGNMENT', '=')
('IDENTIFIER', 'group')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: get_threat')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Gets the threat for one entity against another')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'get_threat')
('LPAREN', '(')
('IDENTIFIER', 'againstEnt')
('COMMA', ',')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('DOT', '.')
('IDENTIFIER', 'my_group')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'Cannot get threat, entity ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'ent')
('DOT', '.')
('IDENTIFIER', 'classname')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' has no threat group')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'againstEnt')
('DOT', '.')
('IDENTIFIER', 'my_group')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'Cannot get threat, entity ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'againstEnt')
('DOT', '.')
('IDENTIFIER', 'classname')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' has no threat group')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'threat')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_group_threat')
('LPAREN', '(')
('IDENTIFIER', 'againstEnt')
('DOT', '.')
('IDENTIFIER', 'my_group')
('COMMA', ',')
('IDENTIFIER', 'ent')
('DOT', '.')
('IDENTIFIER', 'my_group')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'threat')
('PLUS_EQUALS', '+=')
('IDENTIFIER', 'get_distance_threat')
('LPAREN', '(')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'againstEnt')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'threat')
('PLUS_EQUALS', '+=')
('IDENTIFIER', 'get_curr_target_threat')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('COMMA', ',')
('IDENTIFIER', 'againstEnt')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: get_group_threat')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: gets the threat value of one group against another')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'get_group_threat')
('LPAREN', '(')
('IDENTIFIER', 'againstGroup')
('COMMA', ',')
('IDENTIFIER', 'group')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'group1index')
('ASSIGNMENT', '=')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'group2index')
('ASSIGNMENT', '=')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', 'againstGroup')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'group1index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat_groups')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', 'group')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'group2index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'group1index')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '0')
('LOGICAL_OR', '||')
('IDENTIFIER', 'group2index')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('QUOTE', '"')
('STRING', 'ignore')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_threat')
('LBRACKET', '[')
('IDENTIFIER', 'group1index')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'group2index')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: get_distance_threat')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: gets the threat added by the distance to target')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'get_distance_threat')
('LPAREN', '(')
('IDENTIFIER', 'distanceSq')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_dist')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '2500')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_dist_threat')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_dist_threat')
('ASSIGNMENT', '=')
('IDENTIFIER', '5000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'max_dist')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_dist')
('MULTIPLY', '*')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_dist')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distanceSq')
('GREATER_THAN', '>')
('IDENTIFIER', 'max_dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('LPAREN', '(')
('IDENTIFIER', 'distanceSq')
('DIVIDE', '/')
('IDENTIFIER', 'max_dist')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: get_curr_target_threat')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Returns the threat value for being the current target of an entity')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Make sure curr_target is used by the vehicle targeting script')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'get_curr_target_threat')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('COMMA', ',')
('IDENTIFIER', 'againstEnt')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('DOT', '.')
('IDENTIFIER', 'curr_target')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'ent')
('DOT', '.')
('IDENTIFIER', 'curr_target')
('EQUALS_TO', '==')
('IDENTIFIER', 'againstEnt')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', '300')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('EOF', None)