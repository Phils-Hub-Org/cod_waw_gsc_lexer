('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', ' file: ber3.gsc')
('NEWLINE', '\n')
('COMMENT', ' description: main level script for berlin3')
('NEWLINE', '\n')
('COMMENT', ' scripter: Joyal')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'common_scripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_anim')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'ber3_util')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'ber3_fx')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' set up level fx')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_t34')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_rus_tracked_t34')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 't34')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_flak88')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'artillery_ger_flak88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_katyusha')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_rus_wheeled_bm13')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'katyusha')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'maps\\_tiger::main( "vehicle_ger_tracked_king_tiger", "tiger" );')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_artillery')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'artillery_ger_pak43')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'pak43')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_stuka')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_stuka_flying')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_aircraft')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_rus_airplane_il2')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'il2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Tread stuff')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_vehicle')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'build_treadfx')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'build_starts')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' set up level starts\t')
('NEWLINE', '\n')
('IDENTIFIER', 'init_flags')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' set up level flags')
('NEWLINE', '\n')
('IDENTIFIER', 'precache_models')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_friendlies')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_drones')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_load')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' COD magic\t\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'ber3_anim')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' set up level anims')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'ber3_amb')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' kick off the audio scripts')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'ber3_anim')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' set up level anims')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_strings')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' set up localized string references for the level')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'build_threatbias_groups')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'collectible_corpse_spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'collectible_struct')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_ger_honorguard_mp44')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'NumRemoteClients')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'NumRemoteClients')
('LPAREN', '(')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_drones')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'allies')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', '6')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'all_players_connected')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'clientNotify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'dl')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' tell the client vms to go ahead and decorate the level with script models.')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'precache_models')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheshellshock')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ber3_intro')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheshellshock')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ber3_outro')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'precachevehicle')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stuka')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachevehicle')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 't34')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'PrecacheModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'viewmodel_rus_guard_player')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'PrecacheModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'static_berlin_books_diary')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_rus_airplane_il2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'PrecacheModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'anim_berlin_rus_flag_rolled')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'PrecacheModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'anim_berlin_rus_flag_rolled_sm')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon_ger_panzershreck_rocket')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'PrecacheModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'katyusha_rocket')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon_usa_explosive_russian')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon_rus_molotov_grenade')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon_rus_ppsh_smg')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'anim_alley_brick_chunks')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'anim_berlin_nazi_burnt_flag')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'anim_berlin_stag_column')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'mounted_ger_fg42_bipod_lmg')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'char_ger_traitorsign')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'char_rus_guard_grachev_burn')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'precachemodel( "char_ger_wrmcht_fullbody1" );')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'static_peleliu_flak88_shell')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'precachestring')
('LPAREN', '(')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'BER3_HINT_PLANT_CHARGE')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'PrecacheItem("mosin_rifle");')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'CHRIS_P - add rumbles')
('NEWLINE', '\n')
('IDENTIFIER', 'precacherumble')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tank_rumble')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_drones')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_rus_r_ppsh')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'precache')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_ger_honorguard_mp44')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'precache')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Spawn Functions for Drones')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_spawnFunction')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'allies')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_rus_r_ppsh')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_spawnFunction')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_ger_honorguard_mp44')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Init drones functionality or something like that\t')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_drones')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'init')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'build_starts')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' intro event starts')
('NEWLINE', '\n')
('IDENTIFIER', 'add_start')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'intro')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'ber3_event_intro')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'event_intro_start')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'BER3_WARP_INTRO')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' plaza event starts')
('NEWLINE', '\n')
('IDENTIFIER', 'add_start')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'plaza')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'ber3_event_plaza')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'event_plaza_start')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'BER3_WARP_PLAZA')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' plaza event starts')
('NEWLINE', '\n')
('IDENTIFIER', 'add_start')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reich')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'ber3_event_steps')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'event_reich_start')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'BER3_WARP_REICH')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' default start')
('NEWLINE', '\n')
('IDENTIFIER', 'add_start')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'default')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'start_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'intro')
('QUOTE', '"')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'default_start')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'start_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'intro')
('QUOTE', '"')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' turn off the introscreen if necessary')
('NEWLINE', '\n')
('IDENTIFIER', 'start')
('ASSIGNMENT', '=')
('IDENTIFIER', 'tolower')
('LPAREN', '(')
('IDENTIFIER', 'GetDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'start')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '\tif( IsDefined( start ) && start != "" && start != "default" && start != "intro" )')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'start_point')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'start_point')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'default')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'SetDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'introscreen')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '0')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' disable the introscreen')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'build_threatbias_groups')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' Create new threat bias groups. ')
('NEWLINE', '\n')
('IDENTIFIER', 'createthreatbiasgroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panzer_group')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'createthreatbiasgroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'mg42_group')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'createthreatbiasgroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_group')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Make first group ignored by second group')
('NEWLINE', '\n')
('IDENTIFIER', 'setignoremegroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_group')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'panzer_group')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'setthreatbias')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_group')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'mg42_group')
('QUOTE', '"')
('COMMA', ',')
('SUBTRACT', '-')
('IDENTIFIER', '1000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawners')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getentarray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'mg42_ai')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'spawners')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'mg42_set_threatgroup')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'mg42_set_threatgroup')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setthreatbiasgroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'mg42_group')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'init_flags')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friends_setup')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_strings')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'set_objective')
('LPAREN', '(')
('IDENTIFIER', 'num')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' skips past objectives that should have already happened (for skiptos)')
('NEWLINE', '\n')
('IDENTIFIER', 'objectives_skip')
('LPAREN', '(')
('IDENTIFIER', 'numToSkipPast')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', 'numToSkipPast')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'set_objective')
('LPAREN', '(')
('IDENTIFIER', 'i')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' keeps the objective star on a moving entity')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_follow_ent')
('LPAREN', '(')
('IDENTIFIER', 'objectiveNum')
('COMMA', ',')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ent')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'objective_stop_following_ent')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_position')
('LPAREN', '(')
('IDENTIFIER', 'objectiveNum')
('COMMA', ',')
('IDENTIFIER', 'ent')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' warp players to a given set of points')
('NEWLINE', '\n')
('IDENTIFIER', 'warp_players')
('LPAREN', '(')
('IDENTIFIER', 'startValue')
('COMMA', ',')
('IDENTIFIER', 'startKey')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' get start points')
('NEWLINE', '\n')
('IDENTIFIER', 'starts')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetStructArray')
('LPAREN', '(')
('IDENTIFIER', 'startValue')
('COMMA', ',')
('IDENTIFIER', 'startKey')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERT')
('LPAREN', '(')
('IDENTIFIER', 'starts')
('DOT', '.')
('IDENTIFIER', 'size')
('EQUALS_TO', '==')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', " Set the players' origin to each start point")
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'setOrigin')
('LPAREN', '(')
('IDENTIFIER', 'starts')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " Set the players' angles to face the right way.")
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'setPlayerAngles')
('LPAREN', '(')
('IDENTIFIER', 'starts')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " while i'm at it, set the player's threat group")
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'setthreatbiasgroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_group')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'set_breadcrumbs')
('LPAREN', '(')
('IDENTIFIER', 'starts')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'warp_players_underworld')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' get the spot under the world for temp placement')
('NEWLINE', '\n')
('IDENTIFIER', 'underworld')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetStruct')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'struct_player_teleport_underworld')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'underworld')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTMSG')
('LPAREN', '(')
('QUOTE', '"')
('STRING', "warp_players_underworld(): can't find the underworld warp spot! aborting.")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'SetOrigin')
('LPAREN', '(')
('IDENTIFIER', 'underworld')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'warp_player')
('LPAREN', '(')
('IDENTIFIER', 'pos')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'disconnect')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'warpblack')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'warpblack')
('ASSIGNMENT', '=')
('IDENTIFIER', 'NewClientHudElem')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'warpblack')
('DOT', '.')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'warpblack')
('DOT', '.')
('IDENTIFIER', 'y')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'warpblack')
('DOT', '.')
('IDENTIFIER', 'horzAlign')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'fullscreen')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'warpblack')
('DOT', '.')
('IDENTIFIER', 'vertAlign')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'fullscreen')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'warpblack')
('DOT', '.')
('IDENTIFIER', 'foreground')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'sort')
('ASSIGNMENT', '=')
('IDENTIFIER', '50')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'warpblack')
('DOT', '.')
('IDENTIFIER', 'alpha')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'warpblack')
('IDENTIFIER', 'SetShader')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'black')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '640')
('COMMA', ',')
('IDENTIFIER', '480')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'warpblack')
('IDENTIFIER', 'FadeOverTime')
('LPAREN', '(')
('DOT', '.')
('IDENTIFIER', '75')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'warpblack')
('DOT', '.')
('IDENTIFIER', 'alpha')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('DOT', '.')
('IDENTIFIER', '75')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setorigin')
('LPAREN', '(')
('IDENTIFIER', 'pos')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'warpblack')
('IDENTIFIER', 'FadeOverTime')
('LPAREN', '(')
('DOT', '.')
('IDENTIFIER', '75')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'warpblack')
('DOT', '.')
('IDENTIFIER', 'alpha')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_friendlies')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'friends')
('ASSIGNMENT', '=')
('IDENTIFIER', 'grab_starting_friends')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' set up the sarge')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'sarge')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getent')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sarge')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'sarge')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'magic_bullet_shield')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'sarge')
('DOT', '.')
('IDENTIFIER', 'animname')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'reznov')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'chernov')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getent')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'chernov')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'chernov')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'magic_bullet_shield')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'chernov')
('DOT', '.')
('IDENTIFIER', 'animname')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'reznov')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' warp friendlies to a given set of points')
('NEWLINE', '\n')
('IDENTIFIER', 'warp_friendlies')
('LPAREN', '(')
('IDENTIFIER', 'startValue')
('COMMA', ',')
('IDENTIFIER', 'startKey')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'setup_friendlies();')
('NEWLINE', '\n')
('COMMENT', '/////////////////////////////////////TEMP///////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', 'ASSERTEX( flag( "friends_setup" ), "warp_friendlies(): level.friends needs to be set up before this runs." );')
('NEWLINE', '\n')
('COMMENT', '/////////////////////////////////////TEMP///////////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' get start points')
('NEWLINE', '\n')
('IDENTIFIER', 'friendlyStarts')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetStructArray')
('LPAREN', '(')
('IDENTIFIER', 'startValue')
('COMMA', ',')
('IDENTIFIER', 'startKey')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'friendlyStarts')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('COMMA', ',')
('QUOTE', '"')
('STRING', "warp_friendlies(): didn't find enough friendly start points!")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'friends')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'friends')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'Teleport')
('LPAREN', '(')
('IDENTIFIER', 'groundpos')
('LPAREN', '(')
('IDENTIFIER', 'friendlyStarts')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'friendlyStarts')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\tcher_start = getstruct("temp_chernov_start", "targetname");')
('NEWLINE', '\n')
('COMMENT', '\tlevel.chernov Teleport( groundpos( cher_start.origin ), cher_start.angles );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tsarge_start = getstruct("temp_reznov_start", "targetname");')
('NEWLINE', '\n')
('COMMENT', '\tlevel.sarge Teleport( groundpos( sarge_start.origin ), sarge_start.angles );')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Taken from living battlefield')
('NEWLINE', '\n')
('IDENTIFIER', 'hangguy')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'forcex')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '1000')
('COMMA', ',')
('IDENTIFIER', '3000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'forcey')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomFloatRange')
('LPAREN', '(')
('SUBTRACT', '-')
('IDENTIFIER', '1000')
('COMMA', ',')
('IDENTIFIER', '3000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'forcez')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '1000')
('COMMA', ',')
('IDENTIFIER', '3000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'dir')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'forcex')
('COMMA', ',')
('IDENTIFIER', 'forcey')
('COMMA', ',')
('IDENTIFIER', 'forcez')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'contactPoint')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'randomfloatrange')
('LPAREN', '(')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomfloatrange')
('LPAREN', '(')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomfloatrange')
('LPAREN', '(')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'physicsLaunch')
('LPAREN', '(')
('IDENTIFIER', 'contactPoint')
('COMMA', ',')
('IDENTIFIER', 'dir')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'self startragdoll();')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Taken from living battlefield')
('NEWLINE', '\n')
('IDENTIFIER', 'hangguy_with_ragdoll')
('LPAREN', '(')
('IDENTIFIER', 'bonename')
('COMMA', ',')
('IDENTIFIER', 'length')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'sign')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_model')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('IDENTIFIER', 'getTagOrigin')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'J_SpineUpper')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'sign')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'getTagAngles')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'J_SpineUpper')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'sign')
('IDENTIFIER', 'setmodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'char_ger_traitorsign')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'sign')
('IDENTIFIER', 'linkto')
('LPAREN', '(')
('IDENTIFIER', 'self')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'J_SpineUpper')
('QUOTE', '"')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', '3')
('COMMA', ',')
('IDENTIFIER', '7')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMA', ',')
('LPAREN', '(')
('SUBTRACT', '-')
('IDENTIFIER', '90')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '180')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'start')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'length')
('PLUS', '+')
('IDENTIFIER', '22')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' offset to make up for the length of the head')
('NEWLINE', '\n')
('IDENTIFIER', 'end')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ropeId')
('ASSIGNMENT', '=')
('IDENTIFIER', 'createrope')
('LPAREN', '(')
('IDENTIFIER', 'start')
('COMMA', ',')
('IDENTIFIER', 'end')
('COMMA', ',')
('IDENTIFIER', 'length')
('COMMA', ',')
('IDENTIFIER', 'self')
('COMMA', ',')
('IDENTIFIER', 'bonename')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'startragdoll')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'move_tank_on_trigger')
('LPAREN', '(')
('IDENTIFIER', 'pathname')
('COMMA', ',')
('IDENTIFIER', 'trigname')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tank_startnode')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getvehiclenode')
('LPAREN', '(')
('IDENTIFIER', 'pathname')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'getent')
('LPAREN', '(')
('IDENTIFIER', 'trigname')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'attachPath')
('LPAREN', '(')
('IDENTIFIER', 'tank_startnode')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('DOT', '.')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'startPath')
('LPAREN', '(')
('IDENTIFIER', 'tank_startnode')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_tank')
('LPAREN', '(')
('IDENTIFIER', 'tank_type')
('COMMA', ',')
('IDENTIFIER', 'start_node')
('COMMA', ',')
('IDENTIFIER', 'kill_tank')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'OkToSpawn')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawnvehicle')
('LPAREN', '(')
('IDENTIFIER', 'tank_type')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'tank')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 't34')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'start_node')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'start_node')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('DOT', '.')
('IDENTIFIER', 'vehicletype')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 't34')
('QUOTE', '"')
('SEMICOLON', ';')
('COMMENT', ' safety check, just to make sure the vehicletype is set (needed in maps\\_vehicle::vehicle_paths())')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_vehicle')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'vehicle_init')
('LPAREN', '(')
('IDENTIFIER', 'tank')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('DOT', '.')
('IDENTIFIER', 'script_turretmg')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('IDENTIFIER', 'attachPath')
('LPAREN', '(')
('IDENTIFIER', 'start_node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('IDENTIFIER', 'startPath')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'kill_tank')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'kill_tank')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '20')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'tank')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_plane')
('LPAREN', '(')
('IDENTIFIER', 'plane_type')
('COMMA', ',')
('IDENTIFIER', 'start_node')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'OkToSpawn')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'plane')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawnvehicle')
('LPAREN', '(')
('IDENTIFIER', 'plane_type')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'plane')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'stuka')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'start_node')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'start_node')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'plane')
('IDENTIFIER', 'attachPath')
('LPAREN', '(')
('IDENTIFIER', 'start_node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'plane')
('IDENTIFIER', 'startpath')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'plane')
('IDENTIFIER', 'playsound')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fly_by')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '3')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'plane')
('IDENTIFIER', 'playsound')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fly_by_shoot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'plane')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_end_node')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'plane')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Used to stop vehicles at certain nodes, modified from pel2_util.gsc')
('NEWLINE', '\n')
('IDENTIFIER', 'veh_stop_at_node')
('LPAREN', '(')
('IDENTIFIER', 'node_name')
('COMMA', ',')
('IDENTIFIER', 'accel')
('COMMA', ',')
('IDENTIFIER', 'decel')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'accel')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'accel')
('ASSIGNMENT', '=')
('IDENTIFIER', '15')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'decel')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'decel')
('ASSIGNMENT', '=')
('IDENTIFIER', '15')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'iprintln("waiting for node " + node_name + " to be triggered");')
('NEWLINE', '\n')
('IDENTIFIER', 'vnode')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getvehiclenode')
('LPAREN', '(')
('IDENTIFIER', 'node_name')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'vnode')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'iprintln("node " + node_name + " triggered");')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setspeed')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'accel')
('COMMA', ',')
('IDENTIFIER', 'decel')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Used for satchel charges on flaks.  Taken from pel1b')
('NEWLINE', '\n')
('IDENTIFIER', 'satchel_setup')
('LPAREN', '(')
('IDENTIFIER', 'charge_trig')
('COMMA', ',')
('IDENTIFIER', 'target_ent')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'remove_satchel_on_death')
('LPAREN', '(')
('IDENTIFIER', 'charge_trig')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'charge')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getent')
('LPAREN', '(')
('IDENTIFIER', 'charge_trig')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' snap it to a tag_bomb later on (TEMP - allow it to sit where it is in radiant)')
('NEWLINE', '\n')
('COMMENT', 'charge.origin = self LocalToWorldCoords( ( -34, -15, 20 ) );')
('NEWLINE', '\n')
('COMMENT', 'charge.angles = self.angles;')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'charge')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'Charge trigger should be pointing to a sachel charge')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'charge')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'Charge should have a swap model specified as script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' wait till its getting used')
('NEWLINE', '\n')
('IDENTIFIER', 'charge_trig')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'user')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' set the active model - make sure the model is precahced first.')
('NEWLINE', '\n')
('IDENTIFIER', 'charge')
('IDENTIFIER', 'setmodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon_usa_explosive_russian')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'Kevin adding the plant and ticking sounds')
('NEWLINE', '\n')
('IDENTIFIER', 'charge')
('IDENTIFIER', 'playsound')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'satchel_plant')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'charge')
('IDENTIFIER', 'playloopsound')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'satchel_timer')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' get rid of the prompt to place the charge')
('NEWLINE', '\n')
('IDENTIFIER', 'charge_trig')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' damage the target ent')
('NEWLINE', '\n')
('COMMENT', 'Kevin stopping the ticking')
('NEWLINE', '\n')
('IDENTIFIER', 'charge')
('IDENTIFIER', 'stoploopsound')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'charge')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'arcademode_assignpoints')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'arcademode_score_generic250')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'user')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flak destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' used to remove the satchel stuff in the event that the target is destroyed by other means')
('NEWLINE', '\n')
('IDENTIFIER', 'remove_satchel_on_death')
('LPAREN', '(')
('IDENTIFIER', 'charge_trig')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'charge_trig')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'charge')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getent')
('LPAREN', '(')
('IDENTIFIER', 'charge_trig')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'charge_trig')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'charge')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'charge')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Borrowed from See1 - used for molotov toss')
('NEWLINE', '\n')
('IDENTIFIER', 'hold_fire')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'pacifist')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'open_fire')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'pacifist')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'resume_fire')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'pacifist')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////////////////////////////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', '\tSPAWNER FUNCTIONS')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////////////////////////////////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Function to control spawning due to network issues (to fix "too many ents in snapshot" bug).  Modified from pel2_util.gsc')
('NEWLINE', '\n')
('IDENTIFIER', 'simple_floodspawn')
('LPAREN', '(')
('IDENTIFIER', 'spawn_func')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawners')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'assertex( spawners.size, "spawner with target " + self.target + " found!" );\t')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'spawners')
('DOT', '.')
('IDENTIFIER', 'size')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' add spawn function to each spawner if specified')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'spawn_func')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'spawners')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spawners')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'add_spawn_function')
('LPAREN', '(')
('IDENTIFIER', 'spawn_func')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'spawners')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'wait for a snapshot after spawning every 2 guys')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'OkToSpawn')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' extra security')
('NEWLINE', '\n')
('COMMENT', 'if(i % 2)')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\twait_network_frame();')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'spawners')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spawners')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_spawner')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'flood_spawner_think')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' wait a network frame per spawner')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Function to control spawning due to network issues (to fix "too many ents in snapshot" bug).  Modified from pel2_util.gsc')
('NEWLINE', '\n')
('IDENTIFIER', 'simple_spawn')
('LPAREN', '(')
('IDENTIFIER', 'spawn_func')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawners')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'assertex( spawners.size, "spawner with target " + self.target + " found!" );\t')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'spawners')
('DOT', '.')
('IDENTIFIER', 'size')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' add spawn function to each spawner if specified')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'spawn_func')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'spawners')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spawners')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'add_spawn_function')
('LPAREN', '(')
('IDENTIFIER', 'spawn_func')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'ai_array')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'spawners')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'wait for a snapshot after spawning every 2 guys')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'OkToSpawn')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' extra security')
('NEWLINE', '\n')
('COMMENT', '\t\tif(i % 2)')
('NEWLINE', '\n')
('COMMENT', '\t\t{')
('NEWLINE', '\n')
('COMMENT', '\t\t\twait_network_frame();')
('NEWLINE', '\n')
('COMMENT', '\t\t}\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' check if we want to forcespawn him')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'spawners')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'script_forcespawn')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ai')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawners')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'StalingradSpawn')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ai')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawners')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'DoSpawn')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_failed')
('LPAREN', '(')
('IDENTIFIER', 'ai')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'ai_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'add_to_array')
('LPAREN', '(')
('IDENTIFIER', 'ai_array')
('COMMA', ',')
('IDENTIFIER', 'ai')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' wait a network frame between spawning')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'ai_array')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Thread the simple_spawner functions on all the normal triggers in the level')
('NEWLINE', '\n')
('IDENTIFIER', 'simple_spawners_level_init')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flood_spawner_trigs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getentarray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ber3_flood_spawner')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spawner_trigs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getentarray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ber3_spawner')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'flood_spawner_trigs')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flood_spawner_trigs')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'simple_floodspawn')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'spawner_trigs')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spawner_trigs')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'simple_spawn')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////////////////////////////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', '\tEventually move all this to client scripts')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////////////////////////////////////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'ambient_fakefire')
('LPAREN', '(')
('IDENTIFIER', 'endonString')
('COMMA', ',')
('IDENTIFIER', 'delayStart')
('COMMA', ',')
('IDENTIFIER', 'endonTrig')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'delayStart')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('COMMA', ',')
('IDENTIFIER', '3')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'endonString')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('IDENTIFIER', 'endonString')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'endonTrig')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'endonTrig')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'team')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'fireSound')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'weapType')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'rifle')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'team')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'axis_mg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'team')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'team')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'axis_mg')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'fireSound')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'weap_type92_fire')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'weapType')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'mg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'default')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTMSG')
('LPAREN', '(')
('QUOTE', '"')
('STRING', "ambient_fakefire: team name '")
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'team')
('PLUS', '+')
('QUOTE', '"')
('STRING', "' is not recognized.")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' TODO make the sound chance dependent on player proximity?')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'muzzleFlash')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'distant_muzzleflash')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'fake_tracer')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'reich_tracer')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'soundChance')
('ASSIGNMENT', '=')
('IDENTIFIER', '45')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'burstMin')
('ASSIGNMENT', '=')
('IDENTIFIER', '10')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'burstMax')
('ASSIGNMENT', '=')
('IDENTIFIER', '20')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'betweenShotsMin')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '048')
('SEMICOLON', ';')
('COMMENT', ' mg42 fire time from turretsettings.gdt')
('NEWLINE', '\n')
('IDENTIFIER', 'betweenShotsMax')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '049')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'reloadTimeMin')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'reloadTimeMax')
('ASSIGNMENT', '=')
('IDENTIFIER', '3')
('DOT', '.')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'burst_area')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', '1250')
('COMMA', ',')
('IDENTIFIER', '8250')
('COMMA', ',')
('IDENTIFIER', '1000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'traceDist')
('ASSIGNMENT', '=')
('IDENTIFIER', '10000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'orig_target')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('IDENTIFIER', 'vector_multiply')
('LPAREN', '(')
('IDENTIFIER', 'AnglesToForward')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'traceDist')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'target_org')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_origin')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'orig_target')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'target_org thread drawlineon_org();')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'println')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'org')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'target_org')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'println')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'BA')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'burst_area')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' burst fire')
('NEWLINE', '\n')
('IDENTIFIER', 'burst')
('ASSIGNMENT', '=')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', 'burstMin')
('COMMA', ',')
('IDENTIFIER', 'burstMax')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'targ_point')
('ASSIGNMENT', '=')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'orig_target')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('RPAREN', ')')
('SUBTRACT', '-')
('LPAREN', '(')
('IDENTIFIER', 'burst_area')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DIVIDE', '/')
('IDENTIFIER', '2')
('RPAREN', ')')
('PLUS', '+')
('IDENTIFIER', 'randomfloat')
('LPAREN', '(')
('IDENTIFIER', 'burst_area')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('RPAREN', ')')
('COMMA', ',')
('NEWLINE', '\n')
('LPAREN', '(')
('IDENTIFIER', 'orig_target')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('RPAREN', ')')
('SUBTRACT', '-')
('LPAREN', '(')
('IDENTIFIER', 'burst_area')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('DIVIDE', '/')
('IDENTIFIER', '2')
('RPAREN', ')')
('PLUS', '+')
('IDENTIFIER', 'randomfloat')
('LPAREN', '(')
('IDENTIFIER', 'burst_area')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('RPAREN', ')')
('COMMA', ',')
('NEWLINE', '\n')
('LPAREN', '(')
('IDENTIFIER', 'orig_target')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('SUBTRACT', '-')
('LPAREN', '(')
('IDENTIFIER', 'burst_area')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('DIVIDE', '/')
('IDENTIFIER', '2')
('RPAREN', ')')
('PLUS', '+')
('IDENTIFIER', 'randomfloat')
('LPAREN', '(')
('IDENTIFIER', 'burst_area')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " TODO randomize the target a bit so we're not always firing in the same direction")
('NEWLINE', '\n')
('COMMENT', ' get a point in front of where the struct is pointing')
('NEWLINE', '\n')
('IDENTIFIER', 'target_org')
('IDENTIFIER', 'moveto')
('LPAREN', '(')
('IDENTIFIER', 'targ_point')
('COMMA', ',')
('IDENTIFIER', 'randomfloatrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '6')
('DOT', '.')
('IDENTIFIER', '0')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'burst')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'target')
('ASSIGNMENT', '=')
('IDENTIFIER', 'target_org')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'BulletTracer( self.origin, target, false );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' play fx with tracers')
('NEWLINE', '\n')
('IDENTIFIER', 'fx_angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'VectorNormalize')
('LPAREN', '(')
('IDENTIFIER', 'target')
('SUBTRACT', '-')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFX')
('LPAREN', '(')
('IDENTIFIER', 'muzzleFlash')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'fx_angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'i')
('MODULUS', '%')
('IDENTIFIER', '4')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFX')
('LPAREN', '(')
('IDENTIFIER', 'fake_tracer')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'fx_angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'if (self.origin[0] > 1850 && self.origin[0] < 2300)')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\tthread whiz_by_sound(self.origin, target);')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', ' muzzle pop sound from gary')
('NEWLINE', '\n')
('COMMENT', 'playsound (0, "pacific_fake_fire", self.origin);')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' snyder steez - reduce popcorn effect')
('NEWLINE', '\n')
('COMMENT', 'if( RandomInt( 100 ) <= soundChance )')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', 'playsound( 0, fireSound, self.origin );')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', 'betweenShotsMin')
('COMMA', ',')
('IDENTIFIER', 'betweenShotsMax')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', 'reloadTimeMin')
('COMMA', ',')
('IDENTIFIER', 'reloadTimeMax')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'rumble_all_players')
('LPAREN', '(')
('IDENTIFIER', 'high_rumble_string')
('COMMA', ',')
('IDENTIFIER', 'low_rumble_string')
('COMMA', ',')
('IDENTIFIER', 'rumble_org')
('COMMA', ',')
('IDENTIFIER', 'high_rumble_range')
('COMMA', ',')
('IDENTIFIER', 'low_rumble_range')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'high_rumble_range')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'low_rumble_range')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'rumble_org')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'rumble_org')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'high_rumble_range')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'playrumbleonentity')
('LPAREN', '(')
('IDENTIFIER', 'high_rumble_string')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'rumble_org')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'low_rumble_range')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'playrumbleonentity')
('LPAREN', '(')
('IDENTIFIER', 'low_rumble_string')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'playrumbleonentity')
('LPAREN', '(')
('IDENTIFIER', 'high_rumble_string')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('EOF', None)