('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_anim')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'common_scripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'pel2_util')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_vehicle_utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: main')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: sets up all relevant drone data structures and variables')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_rus_r_rifle')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'precache')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_ger_wrmcht_k98')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'precache')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_rus_h_reznov_coat')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'precache')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_rus_p_chernova')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'precache')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_rus_tracked_t34')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_spawnFunction')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'allies')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_rus_r_rifle')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_spawnFunction')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_ger_wrmcht_k98')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'droneCustomDeath')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'see2_drone_death')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_drones')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'init')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'water_exploder')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'loadfx')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon/tank/fx_tank_water')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dirt_exploder')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'loadfx')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon/tank/fx_tank_dirt')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dummy_tank_fire')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'loadfx')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon/muzzleflashes/fx_tank_t34_fire_flash')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dummy_tank_explode')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'loadfx')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'explosions/large_vehicle_explosion')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'num_drone_areas')
('ASSIGNMENT', '=')
('IDENTIFIER', '3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'custom_level_run_cycles')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'see2_droneanim_init')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'init_drone_manager')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'start_drone_waves')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: custom_level_run_cycles')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: sets up custom run cycles for drones')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#using_animtree')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fakeshooters')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'custom_level_run_cycles')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' for demonstrating custom run cycles')
('NEWLINE', '\n')
('COMMENT', ' these need to exist in fakeshooters, as well as have ')
('NEWLINE', '\n')
('COMMENT', ' #using_animtree ("fakeshooters") be called above this function')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_run_cycle')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'run_deep_a')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_run_deep_water_a')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_run_cycle')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'run_deep_b')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_run_deep_water_b')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_trigger_spawn_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_kill_trigger')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Waits until a trigger is hit and then stops a particular areas drones')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_kill_trigger')
('LPAREN', '(')
('IDENTIFIER', 'areaNum')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isPlayer')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'valid')
('LBRACKET', '[')
('IDENTIFIER', 'areaNum')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_master_trigger')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Waits until a trigger is hit then starts the drones for a specific area')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_master_trigger')
('LPAREN', '(')
('IDENTIFIER', 'areaNum')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isPlayer')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'valid')
('LBRACKET', '[')
('IDENTIFIER', 'areaNum')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: start_drone_waves')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Handles the spawning of drones and the playing of fx in all valid areas in the map')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'start_drone_waves')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'trigger_arrays')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'valid')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'num_drone_areas')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_random_explosions')
('LPAREN', '(')
('IDENTIFIER', 'i')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_random_smoke')
('LPAREN', '(')
('IDENTIFIER', 'i')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'master_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'area ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' master drone trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'master_trigger')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_master_trigger')
('LPAREN', '(')
('IDENTIFIER', 'i')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'trigger_arrays')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'area ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' drone trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'valid')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'kill_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'area ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' drone kill trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'kill_trigger')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_kill_trigger')
('LPAREN', '(')
('IDENTIFIER', 'i')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'controls_active')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'NETWORK: possibility of just removing drones from co-op')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'min_time_between_waves')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'max_time_between_waves')
('ASSIGNMENT', '=')
('IDENTIFIER', '4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'num_drone_areas')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'j')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'trigger_arrays')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'trigger_arrays')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'j')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'cooldown_timer')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'trigger_arrays')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'j')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_cooldown')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'k')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('IDENTIFIER', 'k')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'num_drone_areas')
('SEMICOLON', ';')
('IDENTIFIER', 'k')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'valid')
('LBRACKET', '[')
('IDENTIFIER', 'k')
('RBRACKET', ']')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'loop_size')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'trigger_arrays')
('LBRACKET', '[')
('IDENTIFIER', 'k')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'NETWORK: FULL REMOVAL OF DRONES DURING C0-OP')
('NEWLINE', '\n')
('COMMENT', 'if(get_players().size > 1 && level.trigger_arrays[k].size > 2)')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'loop_size')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'trigger_arrays')
('LBRACKET', '[')
('IDENTIFIER', 'k')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'size')
('SUBTRACT', '-')
('IDENTIFIER', '2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'for( m = 0; m < level.trigger_arrays[k].size; m++ )')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'm')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'm')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'loop_size')
('SEMICOLON', ';')
('IDENTIFIER', 'm')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'trigger_arrays')
('LBRACKET', '[')
('IDENTIFIER', 'k')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'm')
('RBRACKET', ']')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'randomfloatrange')
('LPAREN', '(')
('IDENTIFIER', 'min_time_between_waves')
('COMMA', ',')
('IDENTIFIER', 'max_time_between_waves')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_cooldown')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a drone trigger')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Counts down a timer used to invalidate a trigger for x seconds after spawn')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_cooldown')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'kill drones')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'cooldown_timer')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'cooldown_timer')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'cooldown_timer')
('SUBTRACT_EQUALS', '-=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: find_best_drone_triggers')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an entity')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Finds the closest num valid triggers to an entity (in case multiple areas of drones are ')
('NEWLINE', '\n')
('COMMENT', '          active or triggers are on cooldown)')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED:')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'find_best_drone_triggers')
('LPAREN', '(')
('IDENTIFIER', 'num')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'best_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '10000000000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'best_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'worst_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'worst_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return_array')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_triggers')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'cooldown_timer')
('RPAREN', ')')
('LOGICAL_OR', '||')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'cooldown_timer')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'centroid')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'dist')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'best_dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'best_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'dist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'best_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'return_array')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num')
('LOGICAL_OR', '||')
('IDENTIFIER', 'dist')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'worst_dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'return_array')
('DOT', '.')
('IDENTIFIER', 'size')
('EQUALS_TO', '==')
('IDENTIFIER', 'num')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'return_array')
('COMMA', ',')
('IDENTIFIER', 'worst_trigger')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'return_array')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'worst_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_worst_drone_trigger')
('LPAREN', '(')
('IDENTIFIER', 'return_array')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'worst_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'worst_trigger')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'centroid')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'return_array')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'dist')
('GREATER_THAN', '>')
('IDENTIFIER', 'worst_dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'worst_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'dist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'worst_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'return_array')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: get_worst_drone_trigger')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Gets the worst trigger for comparison')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'get_worst_drone_trigger')
('LPAREN', '(')
('IDENTIFIER', 'array')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'worst_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'worst_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'centroid')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', 'worst_dist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'worst_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'dist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'worst_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'worst_trigger')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: Remove drone triggers')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Deletes drone triggers with a specific ID')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'remove_drone_triggers')
('LPAREN', '(')
('IDENTIFIER', 'remove_id')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'remove_list')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_triggers')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'script_string')
('EQUALS_TO', '==')
('IDENTIFIER', 'remove_id')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'remove_list')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'remove_list')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'j')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'remove_list')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_triggers')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_triggers')
('COMMA', ',')
('IDENTIFIER', 'remove_list')
('LBRACKET', '[')
('IDENTIFIER', 'j')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'remove_list')
('LBRACKET', '[')
('IDENTIFIER', 'j')
('RBRACKET', ']')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'kill drones')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'remove_list')
('LBRACKET', '[')
('IDENTIFIER', 'j')
('RBRACKET', ']')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_random_explosions')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Plays dirt explosions and does radius damage to simulate artillery fire on a ')
('NEWLINE', '\n')
('COMMENT', "          area's drones")
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_random_explosions')
('LPAREN', '(')
('IDENTIFIER', 'wave')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop wave ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'wave')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'exploder_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'exploder wave')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'wave')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'exploder_array')
('RPAREN', ')')
('LOGICAL_OR', '||')
('IDENTIFIER', 'exploder_array')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'rand')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'valid')
('LBRACKET', '[')
('IDENTIFIER', 'wave')
('RBRACKET', ']')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', 'exploder_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'exploder_array')
('LBRACKET', '[')
('IDENTIFIER', 'rand')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'targetname')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'dirt_exploder')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dirt_exploder')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'exploder_array')
('LBRACKET', '[')
('IDENTIFIER', 'rand')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'water_exploder')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'exploder_array')
('LBRACKET', '[')
('IDENTIFIER', 'rand')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'radiusDamage')
('LPAREN', '(')
('IDENTIFIER', 'exploder_array')
('LBRACKET', '[')
('IDENTIFIER', 'rand')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', '500')
('COMMA', ',')
('IDENTIFIER', '500')
('COMMA', ',')
('IDENTIFIER', '500')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_random_smoke')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Spawns non-vision blocking smoke to cover drone advance for an area')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_random_smoke')
('LPAREN', '(')
('IDENTIFIER', 'wave')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'smoke_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'smoke wave')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'wave')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'smoke_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'smoke_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_smoke_at_intervals')
('LPAREN', '(')
('IDENTIFIER', 'wave')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_smoke_at_intervals')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a smoke node')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Plays the smoke grenade fx on a random distribution on a smoke node')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_smoke_at_intervals')
('LPAREN', '(')
('IDENTIFIER', 'wave')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop wave ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'wave')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '22')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'valid')
('LBRACKET', '[')
('IDENTIFIER', 'wave')
('RBRACKET', ']')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'drone_smoke')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '25')
('COMMA', ',')
('IDENTIFIER', '30')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'rand')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_dummy_vehicles')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Spawns dummy vehicles and moves them along a path, animates them and does fake firing')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_dummy_vehicles')
('LPAREN', '(')
('IDENTIFIER', 'wave')
('COMMA', ',')
('IDENTIFIER', 'model')
('COMMA', ',')
('IDENTIFIER', 'maxTimeBeforeDestroy')
('COMMA', ',')
('IDENTIFIER', 'minSpeed')
('COMMA', ',')
('IDENTIFIER', 'maxSpeed')
('COMMA', ',')
('IDENTIFIER', 'staggerAmt')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'vehicle_starts')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'wave')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'wave')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' tank start')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'valid_path')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'vehicle_starts')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'valid_path')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'valid_path')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_single_dummy_vehicle')
('LPAREN', '(')
('IDENTIFIER', 'i')
('COMMA', ',')
('IDENTIFIER', 'model')
('COMMA', ',')
('IDENTIFIER', 'maxTimeBeforeDestroy')
('COMMA', ',')
('IDENTIFIER', 'minSpeed')
('COMMA', ',')
('IDENTIFIER', 'maxSpeed')
('COMMA', ',')
('IDENTIFIER', 'staggerAmt')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'static_vehicles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'wave')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'wave')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' dummy tank')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'static_vehicles')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'static_vehicles')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_single_static_dummy_vehicle')
('LPAREN', '(')
('IDENTIFIER', 'model')
('COMMA', ',')
('IDENTIFIER', 'maxTimeBeforeDestroy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_single_static_dummy_vehicle')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a dummy vehicle node')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Creates a static dummy vehicle that will switch to a destroyed state after a ')
('NEWLINE', '\n')
('COMMENT', '          random amount of time')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_single_static_dummy_vehicle')
('LPAREN', '(')
('IDENTIFIER', 'model')
('COMMA', ',')
('IDENTIFIER', 'maxTimeBeforeDestroy')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destroy dummy vehicle')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_model')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'groundpos')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'setModel')
('LPAREN', '(')
('IDENTIFIER', 'model')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_destroy')
('LPAREN', '(')
('IDENTIFIER', 'maxTimeBeforeDestroy')
('COMMA', ',')
('IDENTIFIER', 'myModel')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '6')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playfxontag')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dummy_tank_fire')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'myModel')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'tag_flash')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_destroy')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a static dummy vehicle')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Waits a random amount of time then tells the dummy vehicle to destroy itself.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_destroy')
('LPAREN', '(')
('IDENTIFIER', 'maxTimeBeforeDestroy')
('COMMA', ',')
('IDENTIFIER', 'model')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'maxTimeBeforeDestroy')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '60')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'maxTimeBeforeDestroy')
('ASSIGNMENT', '=')
('IDENTIFIER', '60')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'randomfloat')
('LPAREN', '(')
('IDENTIFIER', '59')
('COMMA', ',')
('IDENTIFIER', 'maxTimeBeforeDestroy')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dummy_tank_explode')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'model')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'model')
('IDENTIFIER', 'setModel')
('LPAREN', '(')
('IDENTIFIER', 'model')
('DOT', '.')
('IDENTIFIER', 'model')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_dmg')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destroy dummy vehicle')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_single_dummy_vehicle')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a start node')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Spawns a vehicle, move it along the path, animates it and does fake firing')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#using_animtree(')
('QUOTE', '"')
('STRING', 'see2_models')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'do_single_dummy_vehicle')
('LPAREN', '(')
('IDENTIFIER', 'pathnum')
('COMMA', ',')
('IDENTIFIER', 'model')
('COMMA', ',')
('IDENTIFIER', 'maxTimeBeforeDestroy')
('COMMA', ',')
('IDENTIFIER', 'minSpeed')
('COMMA', ',')
('IDENTIFIER', 'maxSpeed')
('COMMA', ',')
('IDENTIFIER', 'staggerAmt')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' TODO: create endon for handling multiple paths working simultaneously')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'randomfloat')
('LPAREN', '(')
('IDENTIFIER', 'staggerAmt')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'speed')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomfloatrange')
('LPAREN', '(')
('IDENTIFIER', 'minSpeed')
('COMMA', ',')
('IDENTIFIER', 'maxSpeed')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'toNode')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'vehicle_starts')
('LBRACKET', '[')
('IDENTIFIER', 'pathnum')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'fromNode')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'vehicle_starts')
('LBRACKET', '[')
('IDENTIFIER', 'pathnum')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'toVec')
('ASSIGNMENT', '=')
('IDENTIFIER', 'toNode')
('DOT', '.')
('IDENTIFIER', 'origin')
('SUBTRACT', '-')
('IDENTIFIER', 'fromNode')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_model')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'fromNode')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '15')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'vectortoangles')
('LPAREN', '(')
('IDENTIFIER', 'toVec')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'setModel')
('LPAREN', '(')
('IDENTIFIER', 'model')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('DOT', '.')
('IDENTIFIER', 'animname')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'dummy')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'setAnimTree')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop anim')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'play_vehicle_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tank_scan_straight')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_fake_firing')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'run_timer')
('LPAREN', '(')
('IDENTIFIER', 'time')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'valid_path')
('LBRACKET', '[')
('IDENTIFIER', 'pathnum')
('RBRACKET', ']')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'fromNode')
('DOT', '.')
('IDENTIFIER', 'target')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'toNode')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('IDENTIFIER', 'fromNode')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'fromNode')
('DOT', '.')
('IDENTIFIER', 'script_string')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop anim')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'play_vehicle_anim')
('LPAREN', '(')
('IDENTIFIER', 'fromNode')
('DOT', '.')
('IDENTIFIER', 'script_string')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'toNode')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'vehicle_starts')
('LBRACKET', '[')
('IDENTIFIER', 'pathnum')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'maxTime')
('ASSIGNMENT', '=')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'fromNode')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'toNode')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('DIVIDE', '/')
('IDENTIFIER', 'speed')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'goalAngles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'vectortoangles')
('LPAREN', '(')
('IDENTIFIER', 'toNode')
('DOT', '.')
('IDENTIFIER', 'origin')
('SUBTRACT', '-')
('IDENTIFIER', 'fromNode')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'toNode')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'vehicle_starts')
('LBRACKET', '[')
('IDENTIFIER', 'pathnum')
('RBRACKET', ']')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'origin notify( "stop lerping" );')
('NEWLINE', '\n')
('COMMENT', 'origin thread lerpToOrient( goalAngles );')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('DOT', '.')
('IDENTIFIER', 'goalAngles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'myModel')
('DOT', '.')
('IDENTIFIER', 'angles')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'smoothOrient')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'lerpToPos')
('LPAREN', '(')
('IDENTIFIER', 'toNode')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'speed')
('COMMA', ',')
('IDENTIFIER', 'maxTime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'origin thread hug_ground( model );')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'continue')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop lerping')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_model')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'toNode')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'setModel')
('LPAREN', '(')
('IDENTIFIER', 'model')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'VectorToAngles')
('LPAREN', '(')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('IDENTIFIER', 'toNode')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('DOT', '.')
('IDENTIFIER', 'origin')
('SUBTRACT', '-')
('IDENTIFIER', 'toNode')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('DOT', '.')
('IDENTIFIER', 'animname')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'dummy')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'setAnimTree')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop anim')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'play_vehicle_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tank_scan_straight')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myModel')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_fake_firing')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'time')
('GREATER_THAN', '>')
('IDENTIFIER', 'maxTimeBeforeDestroy')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'destroyDummyVehicle')
('LPAREN', '(')
('IDENTIFIER', 'pathnum')
('COMMA', ',')
('IDENTIFIER', 'model')
('COMMA', ',')
('IDENTIFIER', 'myModel')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'percentToDestroy')
('ASSIGNMENT', '=')
('IDENTIFIER', 'time')
('DIVIDE', '/')
('IDENTIFIER', 'maxTimeBeforeDestroy')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomfloat')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'percentToDestroy')
('GREATER_THAN', '>')
('IDENTIFIER', 'rand')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'destroyDummyVehicle')
('LPAREN', '(')
('IDENTIFIER', 'pathnum')
('COMMA', ',')
('IDENTIFIER', 'model')
('COMMA', ',')
('IDENTIFIER', 'myModel')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'fromNode')
('ASSIGNMENT', '=')
('IDENTIFIER', 'toNode')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: play_vehicle_anim')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a dummy vehicle model')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Animates the turret, the animation can be overridden by script_string values on ')
('NEWLINE', '\n')
('COMMENT', '          path nodes')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'play_vehicle_anim')
('LPAREN', '(')
('IDENTIFIER', 'anime')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop anim')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetFlaggedAnimKnobRestart')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'blend_anim')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'anime')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'anime')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittillmatch')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'blend_anim')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'anime')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'end')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_fake_firing')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a dummy vehicle model')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Plays the firing fx on a random basis')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_fake_firing')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'playfxontag')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dummy_tank_fire')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'tag_flash')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '6')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: destroyDummyVehcile')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a dummy vehicle')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Nothing, apparently')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'destroyDummyVehicle')
('LPAREN', '(')
('IDENTIFIER', 'pathnum')
('COMMA', ',')
('IDENTIFIER', 'model')
('COMMA', ',')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: smoothOrient')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a dummy vehicle model')
('NEWLINE', '\n')
('COMMENT', " PURPOSE: Tries to smooth the vehicle's orientation to hug the ground and make any shift in")
('NEWLINE', '\n')
('COMMENT', '          orientation more gradual to avoid jerkiness')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Maybe allow for different amounts of deviation for pitch, yaw and roll')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'smoothOrient')
('LPAREN', '(')
('IDENTIFIER', 'max_dev_per_frame')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop lerping')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('EQUALS_TO', '==')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalAngles')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'normGoalAngles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'angle_normalize180')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalAngles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'normAngles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'angle_normalize180')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'diff1')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalAngles')
('SUBTRACT', '-')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'normGoalAngles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'normGoalAngles')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'normGoalAngles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'normGoalAngles')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'normAngles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'normAngles')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'normAngles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'normAngles')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'diff2')
('ASSIGNMENT', '=')
('IDENTIFIER', 'normGoalAngles')
('SUBTRACT', '-')
('IDENTIFIER', 'normAngles')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'finalDiff')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', ' first check if it is the -180/180 border')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '3')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'abs')
('LPAREN', '(')
('IDENTIFIER', 'diff1')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'abs')
('LPAREN', '(')
('IDENTIFIER', 'diff2')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'finalDiff')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'finalDiff')
('COMMA', ',')
('IDENTIFIER', 'diff1')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'finalDiff')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'finalDiff')
('COMMA', ',')
('IDENTIFIER', 'diff2')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'abs')
('LPAREN', '(')
('IDENTIFIER', 'finalDiff')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', 'max_dev_per_frame')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'finalDiff')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('PLUS', '+')
('IDENTIFIER', 'max_dev_per_frame')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SUBTRACT', '-')
('IDENTIFIER', 'max_dev_per_frame')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalAngles')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'abs')
('LPAREN', '(')
('IDENTIFIER', 'finalDiff')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', 'max_dev_per_frame')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'finalDiff')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('PLUS', '+')
('IDENTIFIER', 'max_dev_per_frame')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('SUBTRACT', '-')
('IDENTIFIER', 'max_dev_per_frame')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalAngles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'abs')
('LPAREN', '(')
('IDENTIFIER', 'finalDiff')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', 'max_dev_per_frame')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'finalDiff')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('PLUS', '+')
('IDENTIFIER', 'max_dev_per_frame')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('SUBTRACT', '-')
('IDENTIFIER', 'max_dev_per_frame')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalAngles')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: lerpToPos')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a dummy vehicle model')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Moves an entity to a point over time')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'lerpToPos')
('LPAREN', '(')
('IDENTIFIER', 'goalPos')
('COMMA', ',')
('IDENTIFIER', 'speed')
('COMMA', ',')
('IDENTIFIER', 'maxTime')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop lerping')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'startPos')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'toVec')
('ASSIGNMENT', '=')
('IDENTIFIER', 'goalPos')
('SUBTRACT', '-')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'toVec')
('ASSIGNMENT', '=')
('IDENTIFIER', 'vectorNormalize')
('LPAREN', '(')
('IDENTIFIER', 'toVec')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'scaled_move')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'toVec')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('MULTIPLY', '*')
('IDENTIFIER', 'speed')
('MULTIPLY', '*')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('COMMA', ',')
('IDENTIFIER', 'toVec')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('MULTIPLY', '*')
('IDENTIFIER', 'speed')
('MULTIPLY', '*')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('COMMA', ',')
('IDENTIFIER', 'toVec')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('MULTIPLY', '*')
('IDENTIFIER', 'speed')
('MULTIPLY', '*')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS_EQUALS', '+=')
('IDENTIFIER', 'scaled_move')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'groundpos')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '100')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'proj_loc')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('IDENTIFIER', 'scaled_move')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '100')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalAngles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'vectorToAngles')
('LPAREN', '(')
('IDENTIFIER', 'groundpos')
('LPAREN', '(')
('IDENTIFIER', 'proj_loc')
('RPAREN', ')')
('SUBTRACT', '-')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'time')
('PLUS_EQUALS', '+=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'vec_approx_equals')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'startPos')
('COMMA', ',')
('IDENTIFIER', 'goalPos')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('LOGICAL_OR', '||')
('IDENTIFIER', 'time')
('GREATER_THAN', '>')
('IDENTIFIER', 'maxTime')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'continue')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: vec_approx_equals')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Checks to see if the difference between two vectors is within a percent difference')
('NEWLINE', '\n')
('COMMENT', '          of the difference between the second and another vector.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: I am not sure exactly why I wrote this, but it seems to work')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'vec_approx_equals')
('LPAREN', '(')
('IDENTIFIER', 'vec')
('COMMA', ',')
('IDENTIFIER', 'vec1')
('COMMA', ',')
('IDENTIFIER', 'vec2')
('COMMA', ',')
('IDENTIFIER', 'diff')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' Need to fix this function')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'abs')
('LPAREN', '(')
('IDENTIFIER', 'vec')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SUBTRACT', '-')
('IDENTIFIER', 'vec2')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', 'abs')
('LPAREN', '(')
('IDENTIFIER', 'vec1')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SUBTRACT', '-')
('IDENTIFIER', 'vec2')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('RPAREN', ')')
('MULTIPLY', '*')
('IDENTIFIER', 'diff')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'abs')
('LPAREN', '(')
('IDENTIFIER', 'vec')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('SUBTRACT', '-')
('IDENTIFIER', 'vec2')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', 'abs')
('LPAREN', '(')
('IDENTIFIER', 'vec1')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('SUBTRACT', '-')
('IDENTIFIER', 'vec2')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('RPAREN', ')')
('MULTIPLY', '*')
('IDENTIFIER', 'diff')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'abs')
('LPAREN', '(')
('IDENTIFIER', 'vec')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('SUBTRACT', '-')
('IDENTIFIER', 'vec2')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', 'abs')
('LPAREN', '(')
('IDENTIFIER', 'vec1')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('SUBTRACT', '-')
('IDENTIFIER', 'vec2')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('MULTIPLY', '*')
('IDENTIFIER', 'diff')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: run_timer')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: increments a time value')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'run_timer')
('LPAREN', '(')
('IDENTIFIER', 'time')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'time')
('PLUS_EQUALS', '+=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: angle_normalize180')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Normalizes a vec3 of angles to the [-180, 180] range')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'angle_normalize180')
('LPAREN', '(')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'retAngles')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '3')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'scaledAngle')
('ASSIGNMENT', '=')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('MULTIPLY', '*')
('LPAREN', '(')
('IDENTIFIER', '1')
('DOT', '.')
('IDENTIFIER', '0')
('DIVIDE', '/')
('IDENTIFIER', '360')
('DOT', '.')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'scaledAngle')
('PLUS', '+')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'floor')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'floor')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'retAngles')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'scaledAngle')
('SUBTRACT', '-')
('IDENTIFIER', 'floor')
('RPAREN', ')')
('MULTIPLY', '*')
('IDENTIFIER', '360')
('DOT', '.')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'retAngles')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: see2_droneanim_init')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Initializes drone animations to use in this level')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#using_animtree')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'generic_human')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'see2_droneanim_init')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'println("scriptprint - extra drone anims created");')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'idle')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'drone_stand_idle')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'run')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'drone_stand_run')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'reload')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'exposed_crouch_reload')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'drone_stand_death')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'death_explosion_up10')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'death_explosion_back13')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '3')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'death_explosion_forward13')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '4')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'death_explosion_left11')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '5')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'death_explosion_right13')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '-- explosions particular to pby ships')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '6')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ch_pby_explosion_back')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '7')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ch_pby_explosion_front')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '8')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ch_pby_explosion_right')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '9')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ch_pby_explosion_left')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: see2_drone_death')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a drone')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Checks for different damage types and plays appropriate death anims.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: More support for burning deaths')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'see2_drone_death')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'no_drone_death_thread')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'println("scriptprint - custom death thread running");')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_death_queue')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERT')
('LPAREN', '(')
('IDENTIFIER', 'false')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'The drone death manager has not been inited')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'drone')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'damage_type')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'damage_ori')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'death_index')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Wait until the drone reaches 0 health')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'drone')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'drone')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'amount')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('COMMA', ',')
('IDENTIFIER', 'damage_dir')
('COMMA', ',')
('IDENTIFIER', 'damage_ori')
('COMMA', ',')
('IDENTIFIER', 'damage_type')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'drone')
('DOT', '.')
('IDENTIFIER', 'health')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'damage_type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_BURNED')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'println')
('LPAREN', '(')
('IDENTIFIER', 'damage_type')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'damage_type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_PROJECTILE')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'damage_type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_PROJECTILE_SPLASH')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'drone')
('DOT', '.')
('IDENTIFIER', 'special_death_fx')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'drone_burst')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'drone')
('IDENTIFIER', 'unlink')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'damage_type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_EXPLOSIVE')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'damage_type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_PROJECTILE_SPLASH')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', '\n\t\tref_point = [];\n\t\tref_point[0] = drone.origin + ( AnglesToForward(drone.angles) * 5 ); \t//front\n\t\tref_point[1] = drone.origin + ( AnglesToForward(drone.angles) * -5 ); //rear\n\t\tref_point[2] = drone.origin + ( AnglesToRight(drone.angles) * -5 ); \t//left\n\t\tref_point[3] = drone.origin + ( AnglesToRight(drone.angles) * 5 );  \t//right\n\t\t\n\t\tclosest_point = ref_point[0];\n\t\tindex = 0;\n\t\t\n\t\tfor(i = 1 ; i < ref_point.size; i++)\n\t\t{\n\t\t\tif(Distance(ref_point[i], damage_ori) < Distance(closest_point, damage_ori))\n\t\t\t{\n\t\t\t\tclosest_point = ref_point[i];\n\t\t\t\tindex = i;\n\t\t\t}\n\t\t}\n\t\t\n\t\t//Figure out if the drone is falling off of a ship or not\n\t\tnew_point = 0;\n\t\ttrace = 0;\n\t\t\n\t\tswitch(index) //index 0/forward, 1/back, 2/left, 3,right\n\t\t{\n\t\t\tcase 0:\n\t\t\t\tnew_point = drone.origin + (AnglesToForward(drone.angles) * 264);\n\t\t\t\tdrone.angles = VectorToAngles(damage_ori - drone.origin);\t\t\n\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tnew_point = drone.origin + (AnglesToForward(drone.angles) * -264);\n\t\t\t\tdrone.angles = VectorToAngles(drone.origin - damage_ori);\t\t\n\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tnew_point = drone.origin + (AnglesToRight(drone.angles) * -264);\n\t\t\t\tdrone.angles = VectorToAngles(damage_ori - drone.origin) - (0, 90, 0);\t\t\n\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tnew_point = drone.origin + (AnglesToRight(drone.angles) * 264);\n\t\t\t\tdrone.angles = VectorToAngles(damage_ori - drone.origin) + (0, 90, 0);\t\t\n\t\t\tbreak;\n\t\t}\n\t\ttrace = BulletTrace(new_point, new_point - (0,0,2000), true, undefined);\n\t\t\n\t\t//-- stopped here to go to lunch, you want to check the traces vertical position and then decide which animation to play\n\t\tif(trace["position"][2] < (new_point[2] - 32))\n\t\t{\n\t\t\tswitch(index)\n\t\t\t{\n\t\t\t\tcase 0:\n\t\t\t\t\tindex = 4;\n\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tindex = 5;\n\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tindex = 6;\n\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tindex = 7;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t')
('NEWLINE', '\n')
('IDENTIFIER', 'index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '-- decide which death anim to play')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'index')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('IDENTIFIER', '0')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'death_index')
('ASSIGNMENT', '=')
('IDENTIFIER', '2')
('SEMICOLON', ';')
('COMMENT', ' [3]\t= %death_explosion_forward13;')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('IDENTIFIER', '1')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'death_index')
('ASSIGNMENT', '=')
('IDENTIFIER', '3')
('SEMICOLON', ';')
('COMMENT', ' [2]\t= %death_explosion_back13;')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('IDENTIFIER', '2')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'death_index')
('ASSIGNMENT', '=')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('COMMENT', ' [4]\t= %death_explosion_left11;')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('IDENTIFIER', '3')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'death_index')
('ASSIGNMENT', '=')
('IDENTIFIER', '4')
('SEMICOLON', ';')
('COMMENT', ' [5]\t= %death_explosion_right13;')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('IDENTIFIER', '4')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'death_index')
('ASSIGNMENT', '=')
('IDENTIFIER', '6')
('SEMICOLON', ';')
('COMMENT', 'front')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('IDENTIFIER', '5')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'death_index')
('ASSIGNMENT', '=')
('IDENTIFIER', '7')
('SEMICOLON', ';')
('COMMENT', 'back')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('IDENTIFIER', '6')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'death_index')
('ASSIGNMENT', '=')
('IDENTIFIER', '8')
('SEMICOLON', ';')
('COMMENT', 'left')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('IDENTIFIER', '7')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'death_index')
('ASSIGNMENT', '=')
('IDENTIFIER', '9')
('SEMICOLON', ';')
('COMMENT', 'right')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'drone')
('DOT', '.')
('IDENTIFIER', 'combust')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'drone')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'torch_ai')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'damage_type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_BURNED')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'drone')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'torch_ai')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'death_index')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'death_index')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Make drone die')
('NEWLINE', '\n')
('IDENTIFIER', 'drone')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'drone')
('IDENTIFIER', 'stopAnimScripted')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'drone')
('DOT', '.')
('IDENTIFIER', 'special_death_fx')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'drone')
('DOT', '.')
('IDENTIFIER', 'special_death_fx')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'drone_burst')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFXOnTag')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('IDENTIFIER', 'drone')
('DOT', '.')
('IDENTIFIER', 'special_death_fx')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'drone')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'J_SpineLower')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'drone')
('DOT', '.')
('IDENTIFIER', 'need_notetrack')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'drone')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_drone')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'drone_play_anim')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_anims')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'death_index')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'drone')
('IDENTIFIER', 'add_me_to_the_death_queue')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '\n\twait 10;\n\t\n\tif ( isdefined( drone ) )\n\t\tdrone delete();\n\t')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: add_me_to_death_queue')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a drone')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Tells the drone manager that the drone needs to be killed')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'add_me_to_the_death_queue')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_death_queue')
('LBRACKET', '[')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_death_queue')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'drone_manager_process')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: init_drone_manager')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: inits the drone manager that handles drone deaths, etc')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'init_drone_manager')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'MAX_DEAD_DRONES')
('ASSIGNMENT', '=')
('IDENTIFIER', '10')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_death_queue')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'drone_manager_process')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_death_queue')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', 'MAX_DEAD_DRONES')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_death_queue')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', 'MAX_DEAD_DRONES')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'removed_guy')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_death_queue')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'new_drone_queue')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_death_queue')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'new_drone_queue')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_death_queue')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'removed_guy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'removed_guy')
('IDENTIFIER', 'Delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drone_death_queue')
('ASSIGNMENT', '=')
('IDENTIFIER', 'new_drone_queue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', 'else')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '-- we are ok on the number of dead drones')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: torch_ai')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a drone')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: lights an AI on Fire')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'torch_ai')
('LPAREN', '(')
('IDENTIFIER', 'delay')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tagArray')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tagArray')
('LBRACKET', '[')
('IDENTIFIER', 'tagArray')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Wrist_RI')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tagArray')
('LBRACKET', '[')
('IDENTIFIER', 'tagArray')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Wrist_LE')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tagArray')
('LBRACKET', '[')
('IDENTIFIER', 'tagArray')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Elbow_LE')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tagArray')
('LBRACKET', '[')
('IDENTIFIER', 'tagArray')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Elbow_RI')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tagArray')
('LBRACKET', '[')
('IDENTIFIER', 'tagArray')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Knee_RI')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tagArray')
('LBRACKET', '[')
('IDENTIFIER', 'tagArray')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Knee_LE')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tagArray')
('LBRACKET', '[')
('IDENTIFIER', 'tagArray')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Ankle_RI')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tagArray')
('LBRACKET', '[')
('IDENTIFIER', 'tagArray')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Ankle_LE')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tagArray')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'array_randomize')
('LPAREN', '(')
('IDENTIFIER', 'tagArray')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '3')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFxOnTag')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'character_fire_death_sm')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('COMMA', ',')
('IDENTIFIER', 'tagArray')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'delay')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'delay')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFxOnTag')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'character_fire_death_torso')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'J_SpineLower')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('EOF', None)