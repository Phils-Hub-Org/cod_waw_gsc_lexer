('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', ' file: rhi2_event_sweep.gsc')
('NEWLINE', '\n')
('COMMENT', ' description: "clean sweep" event script for rhineland2')
('NEWLINE', '\n')
('COMMENT', ' scripter: slayback')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'common_scripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'rhi2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'rhi2_util')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' --- STARTS ---')
('NEWLINE', '\n')
('COMMENT', ' normal map start')
('NEWLINE', '\n')
('IDENTIFIER', 'event_sweep_start')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'warp_players')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'struct_sweep_start')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'warp_friendlies')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'struct_sweep_start_friends')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' play the intro cinematic')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'finished final intro screen fadein')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'play_intro_igc')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'event_sweep_setup')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'event_sweep_start_barricade1')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'SetDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'introscreen')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '0')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'warp_players')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'struct_barricade1_start')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'warp_friendlies')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'struct_barricade1_start_friends')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'event_sweep_setup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'barricade1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'event_sweep_start_sweep2')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'SetDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'introscreen')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '0')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'warp_players')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'struct_sweep2_start')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'warp_friendlies')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'struct_sweep2_start_friends')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'event_sweep_setup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sweep2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' --- END STARTS ---')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'play_intro_igc')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'controls_active')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'FreezeControls')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'iprintlnbold')
('LPAREN', '(')
('QUOTE', '"')
('STRING', '**a tank gets owned, chaos ensues**')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '7')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'iprintlnbold')
('LPAREN', '(')
('QUOTE', '"')
('STRING', "ok, we can't move up any further til it's clear!")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'iprintlnbold')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'infantry, clear the area...')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'iprintlnbold')
('LPAREN', '(')
('QUOTE', '"')
('STRING', "then radio back and we'll move up.")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'FreezeControls')
('LPAREN', '(')
('IDENTIFIER', 'false')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'event_sweep_setup')
('LPAREN', '(')
('IDENTIFIER', 'startSpot')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_status')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'show_task')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sweep')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_barricade1_flametank_go')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_barricade1_flametank_done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'barricade1_cavedoor_fc_hit')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_past_barricade2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_setup')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ei_setup')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'radioman_setup')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' raise the flood_spawner trigger at barricade1 til we want it active')
('NEWLINE', '\n')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trig_spawner_barricade1guys')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'trigger_off')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'startSpot')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'event_sweep_action1')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'startSpot')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'barricade1')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'objectives_skip')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_movement_barricade1')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'event_sweep_action2')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'startSpot')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'sweep2')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'objectives_skip')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'set_friendlychain')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'node_sweep_fc25')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_movement_sweep2')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'event_sweep_action3')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' manages level action for the first house clearing area')
('NEWLINE', '\n')
('IDENTIFIER', 'event_sweep_action1')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', '\n\tif( GetDvarInt( "introscreen" ) != 0 )\n\t{\n\t\tlevel waittill( "finished final intro screen fadein" );\n\t}\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'set_objective')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'set_friendlychain')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'node_sweep_fc1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_movement_sweep1')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'rocketmen_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trig_spawner_sweep_rocketgroup1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'rocketman_sweep1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'convoy_move2')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'sbmodel_rocketgroup1_nosight')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'runners_group_cleanup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trig_sweep_runnersgroup1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'aigroup_sweep_runnersgroup1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' move 1')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' stop 1')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_stopped')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'radioman_think')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'objective_follow_ent')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radioman')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', ' TODO need VO')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold( "clear out those houses" );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' wait for radioman use')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radioman_used')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_radioman_think')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'objective_stop_following_ent')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' move 2')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'iprintlnbold')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'roger, convoy moving up')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'event_sweep_action2')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' manages level action for the first barricade area')
('NEWLINE', '\n')
('IDENTIFIER', 'event_sweep_action2')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' clear old chain triggers and set friendlychain next to barricade')
('NEWLINE', '\n')
('IDENTIFIER', 'trigs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigs_sweep_area1_house_fctrigs')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'trigs')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'trigs')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'Triggers with script_noteworthy of trigs_sweep_area1_house_fctrigs could not be found')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'trigs')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trigs')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'trigger_off')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' set barricade1 flood_spawner trigger back on')
('NEWLINE', '\n')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trig_spawner_barricade1guys')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'trigger_on')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'set_friendlychain')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'node_sweep_fc5')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' update objective state')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_state')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trig_sweep_atBarricade1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' DEPRECATED')
('NEWLINE', '\n')
('COMMENT', 'set_friendlychain( "node_sweep_fc21" );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' DEPRECATED')
('NEWLINE', '\n')
('COMMENT', ' wait for any player to pass barricade')
('NEWLINE', '\n')
('COMMENT', '\n\tplayerCrossed = false;\n\twhile( !playerCrossed )\n\t{\n\t\tplayers = get_players();\n\t\t\n\t\tfor( i = 0; i < players.size; i++ )\n\t\t{\n\t\t\tplayer = players[i];\n\t\t\tif( player.origin[1] > -1400 )\n\t\t\t{\n\t\t\t\tplayerCrossed = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t\n\t\tif( playerCrossed )\n\t\t{\n\t\t\tbreak;\n\t\t}\n\t\telse\n\t\t{\n\t\t\twait( 0.1 );\n\t\t}\n\t}\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' then wait a few beats to destroy the barricade and call in the flame tank')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '15')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' TODO radioman VO')
('NEWLINE', '\n')
('IDENTIFIER', 'iprintlnbold')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'get em boys!')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_barricade1_flametank_go')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sweep_barricade1_cleared')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' DEPRECATED')
('NEWLINE', '\n')
('COMMENT', ' friendlies move past barricade')
('NEWLINE', '\n')
('COMMENT', 'set_friendlychain( "node_sweep_fc21" );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' DEPRECATED')
('NEWLINE', '\n')
('COMMENT', 'thread event_sweep_barricade1_fc_failsafe();')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' wait for the flame tank to get to the flame node')
('NEWLINE', '\n')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_convoy_tank2')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stopped_at_node')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'set_friendlychain')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'node_sweep_fc25')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' DEPRECATED')
('NEWLINE', '\n')
('COMMENT', '\n\t// friendlies move to cave entrance (if necessary)\n\tif( !flag( "barricade1_cavedoor_fc_hit" ) )\n\t{\n\t\tset_friendlychain( "node_sweep_fc23" );\n\t}\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' wait for the flame tank to be done')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_barricade1_flametank_done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' DEPRECATED')
('NEWLINE', '\n')
('COMMENT', ' update objective')
('NEWLINE', '\n')
('COMMENT', 'set_objective( 2 );')
('NEWLINE', '\n')
('COMMENT', ' wait for player to get through the cave/bunker')
('NEWLINE', '\n')
('COMMENT', 'trigger_wait( "trig_sweep_barricade1_caveclear", "targetname" );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'set_objective')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trig_barricade1_roadRegroupSpot')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'event_sweep_action3')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' manages level action for the second house clearing area')
('NEWLINE', '\n')
('IDENTIFIER', 'event_sweep_action3')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'rocketmen_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trig_spawner_sweep2_rocketgroup1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'rocketman_sweep2')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'convoy_move3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'iprintlnbold')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'you guys clear the road up ahead...')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'iprintlnbold')
('LPAREN', '(')
('QUOTE', '"')
('STRING', "you know the drill, radio back when it's clear.")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'set_objective')
('LPAREN', '(')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'set_friendlychain')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'node_sweep_fc27')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' radioman ready for use again')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'radioman_think')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'objective_follow_ent')
('LPAREN', '(')
('IDENTIFIER', '4')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radioman')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' wait for radioman use')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radioman_used')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_state')
('LPAREN', '(')
('IDENTIFIER', '4')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'iprintlnbold')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'roger, convoy moving up')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_radioman_think')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'objective_stop_following_ent')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' new friendlychain & clean up trigger-based ones')
('NEWLINE', '\n')
('IDENTIFIER', 'trigs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigs_sweep_area2_house_fctrigs')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'trigs')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trigs')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'trigger_off')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'set_friendlychain')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'node_sweep_fc38')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' wait for convoy to get past the second barricade and stop')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_past_barricade2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' TODO start walk with convoy')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'rhi2_event_convoywalk')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'event_convoywalk_setup')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' DEPRECATED')
('NEWLINE', '\n')
('COMMENT', '\nevent_sweep_barricade1_fc_failsafe()\n{\n\tGetEnt( "trig_sweep_fc25", "targetname" ) waittill( "trigger" );\n\tflag_set( "barricade1_cavedoor_fc_hit" );\n}\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' --- CONVOY ---')
('NEWLINE', '\n')
('COMMENT', ' sets up level.convoy_array')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_setup')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoyWasSetup')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoyWasSetup')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoyWasSetup')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' TODO figure out a more automated way of getting convoy vehicles')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'tank1')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_convoy_tank1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'tank2')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_convoy_tank2')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'tank1')
('DOT', '.')
('IDENTIFIER', 'health')
('ASSIGNMENT', '=')
('IDENTIFIER', '2000')
('SEMICOLON', ';')
('COMMENT', ' TEMP hack until script_startinghealth works, or we change rocket damage, or we change sherman health value')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'tank2')
('DOT', '.')
('IDENTIFIER', 'health')
('ASSIGNMENT', '=')
('IDENTIFIER', '2000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'tank1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'tank2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'convoy setup failed because the convoy array is empty.')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'one of the vehicles in the convoy array is undefined!')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_monitor_health')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_monitor_health')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_monitoring_convoy_health')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_healthAtStart')
('ASSIGNMENT', '=')
('IDENTIFIER', 'convoy_get_total_health')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'string')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'convoy health: ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'convoy_get_total_health')
('LPAREN', '(')
('RPAREN', ')')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' / ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_healthAtStart')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Print3D')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '70')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'string')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '75')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'convoy_get_total_health')
('LPAREN', '(')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_healthAtStart')
('DIVIDE', '/')
('IDENTIFIER', '2')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_mission_failed')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_mission_failed')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'mission failed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'setDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ui_deadquote')
('QUOTE', '"')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'RHI2_MISSION_FAILED_CONVOYDEATH')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'missionFailedWrapper')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' gets the combined health of all vehicles in level.convoy_array')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_get_total_health')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'totalhealth')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'vehicle')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'vehicle')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'totalhealth')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'totalhealth')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'totalhealth')
('PLUS_EQUALS', '+=')
('IDENTIFIER', 'vehicle')
('DOT', '.')
('IDENTIFIER', 'health')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'totalhealth')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'totalhealth')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' handles the convoy movement throughout the event')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_movement_sweep1')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trig_convoy_move1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'GetVehicleNode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vnode_convoy_tank1_stop1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move2')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold( "stopping convoy" );')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_setspeed')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '30')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_stopped')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_resumespeed')
('LPAREN', '(')
('IDENTIFIER', '10')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_movement_barricade1')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_movement_barricade1')
('LPAREN', '(')
('IDENTIFIER', 'skippedTo')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', " skip the convoy forward if we're using a start")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'skippedTo')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'skippedTo')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trig_convoy_move1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_setspeed')
('LPAREN', '(')
('IDENTIFIER', '100')
('COMMA', ',')
('IDENTIFIER', '1000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' stop at the barricade')
('NEWLINE', '\n')
('IDENTIFIER', 'GetVehicleNode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vnode_convoy_tank1_barricade1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " stop them faster if they're skipping forward")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'skippedTo')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'skippedTo')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_setspeed')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '1000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_setspeed')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '30')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_stopped')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_barricade1_flametank_go')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' open the barricade and send up the flame tank')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_open_barricade1')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_barricade1_flamecave')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_barricade1_flametank_done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_movement_sweep2')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_movement_sweep2')
('LPAREN', '(')
('IDENTIFIER', 'skippedTo')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', " skip the convoy forward if we're using a start")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'skippedTo')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'skippedTo')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trig_convoy_move1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_barricade1_flametank_go')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_barricade1_flametank_done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_setspeed')
('LPAREN', '(')
('IDENTIFIER', '100')
('COMMA', ',')
('IDENTIFIER', '1000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_move3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' move convoy')
('NEWLINE', '\n')
('IDENTIFIER', 'tank1')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_convoy_tank1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tank2')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_convoy_tank2')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'node1')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetVehicleNode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vnode_convoy_tank1_sweep2_pathStart')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'node2')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetVehicleNode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vnode_convoy_tank2_sweep2_pathStart')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tank1')
('IDENTIFIER', 'AttachPath')
('LPAREN', '(')
('IDENTIFIER', 'node1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tank1')
('IDENTIFIER', 'SetSpeed')
('LPAREN', '(')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tank1')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_vehicle')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'vehicle_paths')
('LPAREN', '(')
('IDENTIFIER', 'node1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tank2')
('IDENTIFIER', 'AttachPath')
('LPAREN', '(')
('IDENTIFIER', 'node2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tank2')
('IDENTIFIER', 'SetSpeed')
('LPAREN', '(')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tank2')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_vehicle')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'vehicle_paths')
('LPAREN', '(')
('IDENTIFIER', 'node2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' barbed wire rollover')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_sweep2_barbedwire_rollover')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' push sdk out of the way')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_push_sdk')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'waittill_multiple_ents')
('LPAREN', '(')
('IDENTIFIER', 'tank1')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'reached_end_node')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'tank2')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'reached_end_node')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_past_barricade2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_sweep2_barbedwire_rollover')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'GetVehicleNode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vnode_convoy_tank1_sweep2_midBarricade')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spool')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sbmodel_barricade2_barbedwire1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spool')
('IDENTIFIER', 'ConnectPaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spool')
('IDENTIFIER', 'MoveTo')
('LPAREN', '(')
('IDENTIFIER', 'spool')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('SUBTRACT', '-')
('IDENTIFIER', '44')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '75')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_push_sdk')
('LPAREN', '(')
('IDENTIFIER', 'skippedTo')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'skippedTo')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'skippedTo')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'GetVehicleNode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vnode_convoy_tank1_barricade2')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', '\n\telse\n\t{\n\t\t// trigger the sdk to roll up\n\t\tGetEnt( "trig_barricade2_sdk", "targetname" ) notify( "trigger" );\n\t\twait( 0.1 );\n\t\tsdk = GetEnt( "vehicle_barricade2_sdk", "targetname" );\n\t\tsdk SetSpeed( 100, 1000 );\n\t\tsdk waittill( "reached_path_end" );\n\t}\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'sdk')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_barricade2_sdk')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'pushPathStart')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetStruct')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'struct_sdk_push_pathStart')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' swap the vehicle for a script_model')
('NEWLINE', '\n')
('IDENTIFIER', 'sdk')
('IDENTIFIER', 'DoDamage')
('LPAREN', '(')
('IDENTIFIER', 'sdk')
('DOT', '.')
('IDENTIFIER', 'health')
('PLUS', '+')
('IDENTIFIER', '200')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'fake_sdk')
('ASSIGNMENT', '=')
('IDENTIFIER', 'Spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_model')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'sdk')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'fake_sdk')
('IDENTIFIER', 'Hide')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'fake_sdk')
('IDENTIFIER', 'SetModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_german_armored_car')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'fake_sdk')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'sdk')
('DOT', '.')
('IDENTIFIER', 'angles')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'sdk')
('IDENTIFIER', 'Hide')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'fake_sdk')
('IDENTIFIER', 'Show')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'org')
('ASSIGNMENT', '=')
('IDENTIFIER', 'Spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_origin')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'sdk')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'org')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'sdk')
('DOT', '.')
('IDENTIFIER', 'angles')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' TODO we probably want to animate the SDK getting pushed out of the way')
('NEWLINE', '\n')
('IDENTIFIER', 'fake_sdk')
('IDENTIFIER', 'LinkTo')
('LPAREN', '(')
('IDENTIFIER', 'org')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'pathpoint')
('ASSIGNMENT', '=')
('IDENTIFIER', 'pushPathStart')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'defaultMoveTime')
('ASSIGNMENT', '=')
('IDENTIFIER', '2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'pathpoint')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'pathpoint')
('DOT', '.')
('IDENTIFIER', 'script_float')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'movetime')
('ASSIGNMENT', '=')
('IDENTIFIER', 'pathpoint')
('DOT', '.')
('IDENTIFIER', 'script_float')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'movetime')
('ASSIGNMENT', '=')
('IDENTIFIER', 'defaultMoveTime')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'org')
('IDENTIFIER', 'MoveTo')
('LPAREN', '(')
('IDENTIFIER', 'pathpoint')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'movetime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'org')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'movedone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' get next pathpoint')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'pathpoint')
('DOT', '.')
('IDENTIFIER', 'target')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'pathpoint')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetStruct')
('LPAREN', '(')
('IDENTIFIER', 'pathpoint')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'pathpoint')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'fake_sdk')
('IDENTIFIER', 'Unlink')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'org')
('IDENTIFIER', 'Delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' DEPRECATED')
('NEWLINE', '\n')
('COMMENT', '\n\twall_left = GetEnt( "sbmodel_sweep_barricade2_left", "targetname" );\n\twall_right = GetEnt( "sbmodel_sweep_barricade2_right", "targetname" );\n\t\n\twall_left ConnectPaths();\n\twall_right ConnectPaths();\n\t\n\t//flag_set( "barricade2_doors_connected" );\n\t\n\twall_left RotateTo( ( 0, 120, 0 ), 2 );\n\twall_right RotateTo( ( 0, -120, 0 ), 2 );\n\t\n\twall_right waittill( "rotatedone" );\n\t\n\twall_left DisconnectPaths();\n\twall_right DisconnectPaths();\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sweep_barricade2_cleared')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_barricade1_flamecave')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' kill the spawners')
('NEWLINE', '\n')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trig_script_killspawner_1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' get the AIs and send them into the cave')
('NEWLINE', '\n')
('IDENTIFIER', 'ais')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_ai_group_ai')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sweep_cavespawners')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'ais')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'is_active_ai')
('LPAREN', '(')
('IDENTIFIER', 'ais')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ais')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ais')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '512')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ais')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', '180')
('COMMA', ',')
('IDENTIFIER', '428')
('COMMA', ',')
('SUBTRACT', '-')
('IDENTIFIER', '685')
('DOT', '.')
('IDENTIFIER', '9')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' move lead tank')
('NEWLINE', '\n')
('IDENTIFIER', 'leadtank')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_convoy_tank1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'leadtank')
('IDENTIFIER', 'SetSpeed')
('LPAREN', '(')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'leadtank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'vehicle_stop_at_node')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vnode_convoy_tank1_barricade1a')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' wait for the lead tank to move out the way')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' move flametank')
('NEWLINE', '\n')
('IDENTIFIER', 'flametank')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_convoy_tank2')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flametank')
('IDENTIFIER', 'SetSpeed')
('LPAREN', '(')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flametank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_barricade1_flamecave_crush_barbedwire')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flametank')
('IDENTIFIER', 'vehicle_stop_at_node')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vnode_convoy_tank2_barricade1_flamespot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' flame the door')
('NEWLINE', '\n')
('IDENTIFIER', 'cavedoor_org')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'org_barricade1_cavedoor')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flametank')
('IDENTIFIER', 'SetTurretTargetEnt')
('LPAREN', '(')
('IDENTIFIER', 'cavedoor_org')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flametank')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'turret_on_target')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('DOT', '.')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flametank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'convoy_barricade1_flamecave_faketankflame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' kill off the cave AIs')
('NEWLINE', '\n')
('IDENTIFIER', 'ais')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_ai_group_ai')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sweep_cavespawners')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'ais')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'is_active_ai')
('LPAREN', '(')
('IDENTIFIER', 'ais')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ais')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'bloody_death')
('LPAREN', '(')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'cavedoor_org')
('IDENTIFIER', 'Delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'convoy_barricade1_flametank_done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' DEPRECATED')
('NEWLINE', '\n')
('COMMENT', ' wait til the player clears the cave then move forward again')
('NEWLINE', '\n')
('COMMENT', 'GetEnt( "trig_sweep_barricade1_caveclear", "targetname" ) waittill( "trigger" );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' wait for players to move beyond cave area')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trig_barricade1_roadRegroupSpot')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flametank')
('IDENTIFIER', 'SetSpeed')
('LPAREN', '(')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' self = the flametank')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_barricade1_flamecave_crush_barbedwire')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'GetVehicleNode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vnode_convoy_flametank_barbedwire')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spool')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sbmodel_barricade1_barbedwire1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spool')
('IDENTIFIER', 'ConnectPaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spool')
('IDENTIFIER', 'MoveTo')
('LPAREN', '(')
('IDENTIFIER', 'spool')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('SUBTRACT', '-')
('IDENTIFIER', '44')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '75')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' self = the flametank')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_barricade1_flamecave_faketankflame')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flametime')
('ASSIGNMENT', '=')
('IDENTIFIER', '4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'timer')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetTime')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'barrelOrigin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetTagOrigin')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tag_flash')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'barrelAngles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetTagAngles')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tag_flash')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'flametime')
('MULTIPLY', '*')
('IDENTIFIER', '1000')
('GREATER_THAN', '>')
('IDENTIFIER', 'GetTime')
('LPAREN', '(')
('RPAREN', ')')
('SUBTRACT', '-')
('IDENTIFIER', 'timer')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFX')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'flamethrower_fire')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'barrelOrigin')
('COMMA', ',')
('IDENTIFIER', 'barrelAngles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '3')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '7')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' opens the first barricade')
('NEWLINE', '\n')
('COMMENT', ' TODO make it fancy')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_open_barricade1')
('LPAREN', '(')
('IDENTIFIER', 'string')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wall_left')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sbmodel_sweep_barricade1_left')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wall_right')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sbmodel_sweep_barricade1_right')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wall_left')
('IDENTIFIER', 'ConnectPaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wall_right')
('IDENTIFIER', 'ConnectPaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'flag_set( "barricade1_doors_connected" );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wall_left')
('IDENTIFIER', 'RotateTo')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '120')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wall_right')
('IDENTIFIER', 'RotateTo')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('SUBTRACT', '-')
('IDENTIFIER', '120')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wall_right')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rotatedone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wall_left')
('IDENTIFIER', 'DisconnectPaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wall_right')
('IDENTIFIER', 'DisconnectPaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sweep_barricade1_cleared')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' does SetSpeed on all the vehicles in level.convoy_array')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_setspeed')
('LPAREN', '(')
('IDENTIFIER', 'speed')
('COMMA', ',')
('IDENTIFIER', 'accel')
('COMMA', ',')
('IDENTIFIER', 'decel')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', "can't set convoy speed because level.convoy_array is undefined.")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'decel')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'SetSpeed')
('LPAREN', '(')
('IDENTIFIER', 'speed')
('COMMA', ',')
('IDENTIFIER', 'accel')
('COMMA', ',')
('IDENTIFIER', 'decel')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'SetSpeed')
('LPAREN', '(')
('IDENTIFIER', 'speed')
('COMMA', ',')
('IDENTIFIER', 'accel')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' does ResumeSpeed on all the vehicles in level.convoy_array')
('NEWLINE', '\n')
('IDENTIFIER', 'convoy_resumespeed')
('LPAREN', '(')
('IDENTIFIER', 'accel')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', "can't resume convoy speed because level.convoy_array is undefined.")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'ResumeSpeed')
('LPAREN', '(')
('IDENTIFIER', 'accel')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' self = the vehicle')
('NEWLINE', '\n')
('COMMENT', ' - stopNodeTN = the targetname of the vehiclenode where the vehicle should stop')
('NEWLINE', '\n')
('IDENTIFIER', 'vehicle_stop_at_node')
('LPAREN', '(')
('IDENTIFIER', 'stopNodeTN')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'GetVehicleNode')
('LPAREN', '(')
('IDENTIFIER', 'stopNodeTN')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetSpeed')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '30')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stopped_at_node')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' --- END CONVOY ---')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' --- RADIOMAN ---')
('NEWLINE', '\n')
('IDENTIFIER', 'radioman_setup')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radiomanWasSetup')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radiomanWasSetup')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radiomanWasSetup')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radioman')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radioman')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERT')
('LPAREN', '(')
('IDENTIFIER', 'is_active_ai')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radioman')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', "Can't find the radioman!")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radioman')
('IDENTIFIER', 'magic_bullet_shield')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' makes the radioman a usable guy who calls up the convoy')
('NEWLINE', '\n')
('COMMENT', '  can be stopped and started as convoy moves and stops')
('NEWLINE', '\n')
('IDENTIFIER', 'radioman_think')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_radioman_think')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trig')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trig_radioman')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'timer')
('ASSIGNMENT', '=')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'buttonHoldTime')
('ASSIGNMENT', '=')
('IDENTIFIER', '3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'buttonBeingHeld')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'triggered')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'triggered')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' move trigger origin to radioman if necessary')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'origin')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radioman')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radioman')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'printed')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' check all players')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' if inside the trigger...')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'player')
('IDENTIFIER', 'IsTouching')
('LPAREN', '(')
('IDENTIFIER', 'trig')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', " make sure we're not already printing from another player being in the trigger")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'printed')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' if not holding button...')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'buttonBeingHeld')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'string')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'hold X to call tanks forward')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' if holding button, give a message for the player')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'string')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'keep holding to verify')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'Print3D')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radioman')
('IDENTIFIER', 'GetEye')
('LPAREN', '(')
('RPAREN', ')')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '7')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'string')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'printed')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' if this player is pressing the use button...')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'player')
('IDENTIFIER', 'useButtonPressed')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' toggle if necessary')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'buttonBeingHeld')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'buttonBeingHeld')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' start timer if necessary')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'timer')
('EQUALS_TO', '==')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'timer')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetTime')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' otherwise see if timer has reached the desired value')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'GetTime')
('LPAREN', '(')
('RPAREN', ')')
('SUBTRACT', '-')
('IDENTIFIER', 'timer')
('RPAREN', ')')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('LPAREN', '(')
('IDENTIFIER', 'buttonHoldTime')
('MULTIPLY', '*')
('IDENTIFIER', '1000')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'triggered')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' if not pressing use button...')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' toggle if necessary')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'buttonBeingHeld')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'buttonBeingHeld')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'timer')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'timer')
('ASSIGNMENT', '=')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " wait if we didn't trigger yet")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'triggered')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radioman_used')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' --- END RADIOMAN ---')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' --- PATHRUNNERS ---')
('NEWLINE', '\n')
('COMMENT', ' grabs a specified aigroup after their trigger (also specified) is hit, waits for')
('NEWLINE', '\n')
('COMMENT', '  them to hit their last chained goalnode, and kills them off')
('NEWLINE', '\n')
('IDENTIFIER', 'runners_group_cleanup')
('LPAREN', '(')
('IDENTIFIER', 'triggerTN')
('COMMA', ',')
('IDENTIFIER', 'aiGroupName')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trig')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('IDENTIFIER', 'triggerTN')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'trig')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTMSG')
('LPAREN', '(')
('QUOTE', '"')
('STRING', "Can't find trigger with targetname ")
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'triggerTN')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trig')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'ais')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_ai_group_ai')
('LPAREN', '(')
('IDENTIFIER', 'aiGroupName')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'ais')
('RPAREN', ')')
('LOGICAL_OR', '||')
('IDENTIFIER', 'ais')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTMSG')
('LPAREN', '(')
('QUOTE', '"')
('STRING', "Couldn't find any runners with aiGroupName of ")
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'aiGroupName')
('PLUS', '+')
('QUOTE', '"')
('STRING', ', aborting')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'ais')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ais')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'runner_kill_at_path_end')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' self = the ai')
('NEWLINE', '\n')
('IDENTIFIER', 'runner_kill_at_path_end')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_path_end')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'bloody_death')
('LPAREN', '(')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' --- END PATHRUNNERS ---')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' --- ROCKETMEN ---')
('NEWLINE', '\n')
('COMMENT', ' sets up a group of rocketmen, specified with rocketmenSN')
('NEWLINE', '\n')
('COMMENT', '  rocketmen_spawnTrig = the trigger that will spawn the rocketmen')
('NEWLINE', '\n')
('COMMENT', '  convoy_moveFlag = the flag the rocketmen will wait for before showing themselves')
('NEWLINE', '\n')
('COMMENT', '  sightblockerTN = the targetname of the sbmodels that block the vision of')
('NEWLINE', '\n')
('COMMENT', '   the rocketmen before they show themselves')
('NEWLINE', '\n')
('IDENTIFIER', 'rocketmen_init')
('LPAREN', '(')
('IDENTIFIER', 'rocketmen_spawnTrig')
('COMMA', ',')
('IDENTIFIER', 'rocketmenSN')
('COMMA', ',')
('IDENTIFIER', 'convoy_moveFlag')
('COMMA', ',')
('IDENTIFIER', 'sightBlockerTN')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' debug steez')
('NEWLINE', '\n')
('DIVIDE', '/')
('PREPROCESSOR_DIRECTIVE', '#')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'GetDvarInt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rocketmen_skip')
('QUOTE', '"')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'iprintlnbold')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'skipping rocketmen setup since dvar rocketmen_skip is > 0')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#/')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger_wait')
('LPAREN', '(')
('IDENTIFIER', 'rocketmen_spawnTrig')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' wait for these guys to spawn')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_ais')
('LPAREN', '(')
('IDENTIFIER', 'rocketmenSN')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'guys')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'guys')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'guys')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('ASSIGNMENT', '=')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'is_active_ai')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'rocketman_target_tank')
('LPAREN', '(')
('IDENTIFIER', 'convoy_moveFlag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'rocketman_death_save')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' TEMP for testing')
('NEWLINE', '\n')
('COMMENT', 'level thread drawline_from_player( guy );')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'sightBlockerTN')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'rocketman_remove_sightblockers')
('LPAREN', '(')
('IDENTIFIER', 'convoy_moveFlag')
('COMMA', ',')
('IDENTIFIER', 'sightBlockerTN')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' TEMP for testing')
('NEWLINE', '\n')
('IDENTIFIER', 'drawline_from_player')
('LPAREN', '(')
('IDENTIFIER', 'ent1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'kill_lines')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ent1')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'color')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '255')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'ent1')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'line')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'ent1')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'color')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " removes sightblocker(s) in front of a rocketman when it's time for him to shoot")
('NEWLINE', '\n')
('IDENTIFIER', 'rocketman_remove_sightblockers')
('LPAREN', '(')
('IDENTIFIER', 'convoy_moveFlag')
('COMMA', ',')
('IDENTIFIER', 'sightBlockerTN')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'blockers')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('IDENTIFIER', 'sightBlockerTN')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'blockers')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'blockers')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('IDENTIFIER', 'convoy_moveFlag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'blockers')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'trigger_off')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' TODO maybe just delete?')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' sets some pre-ambush AI params, then waits for the flag that moves the convoy up,')
('NEWLINE', '\n')
('COMMENT', '  then sets new AI params and does an ambush (open shutters, target tank, etc.)')
('NEWLINE', '\n')
('COMMENT', ' self = the rocketman')
('NEWLINE', '\n')
('IDENTIFIER', 'rocketman_target_tank')
('LPAREN', '(')
('IDENTIFIER', 'convoy_moveFlag')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' TODO special behavior before ambush?')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'pacifist')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreme')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('IDENTIFIER', 'convoy_moveFlag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' post-ambush behavior')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' open shutters')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'rocketman_open_shutters')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'pacifist')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'suppressionwait')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'print_when_firing')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' while the rocket is equipped...')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'animscripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'utility')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'usingRocketLauncher')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' try to target each vehicle in the convoy in turn')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'health')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetEntityTarget')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'convoy_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'convoy_get_total_health')
('LPAREN', '(')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'ClearEnemy')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' self = the rocketman')
('NEWLINE', '\n')
('IDENTIFIER', 'rocketman_death_save')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_rocketman_deathsave')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'autosave_by_name')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rocketman_killed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' self = the rocketman')
('NEWLINE', '\n')
('COMMENT', ' TEMP til we get some sound fx')
('NEWLINE', '\n')
('IDENTIFIER', 'print_when_firing')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'timelimit')
('ASSIGNMENT', '=')
('IDENTIFIER', '20')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'startTime')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetTime')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'timelimit')
('MULTIPLY', '*')
('IDENTIFIER', '1000')
('RPAREN', ')')
('GREATER_THAN', '>')
('LPAREN', '(')
('IDENTIFIER', 'GetTime')
('LPAREN', '(')
('RPAREN', ')')
('SUBTRACT', '-')
('IDENTIFIER', 'startTime')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fire')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Print3D')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '64')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'FIRE!')
('QUOTE', '"')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '75')
('COMMA', ',')
('IDENTIFIER', '300')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' opens the shutters (or other visible sight blockers) that are')
('NEWLINE', '\n')
('COMMENT', '  targeted from the rocketman himself')
('NEWLINE', '\n')
('COMMENT', ' self = the rocketman')
('NEWLINE', '\n')
('IDENTIFIER', 'rocketman_open_shutters')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'shutter_left')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'shutter_right')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'shutters')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'shutters')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'shutters')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'shutters')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'shutter')
('ASSIGNMENT', '=')
('IDENTIFIER', 'shutters')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'shutter')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'shutter')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'shutter_left')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'shutter_left')
('ASSIGNMENT', '=')
('IDENTIFIER', 'shutter')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'shutter')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'shutter_right')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'shutter_right')
('ASSIGNMENT', '=')
('IDENTIFIER', 'shutter')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'shutter_left')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'shutter_right')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTMSG')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'shutters with targetname ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('PLUS', '+')
('QUOTE', '"')
('STRING', " couldn't be found.")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'openAngle')
('ASSIGNMENT', '=')
('IDENTIFIER', '120')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'openAngle_opp')
('ASSIGNMENT', '=')
('SUBTRACT', '-')
('IDENTIFIER', '120')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'shutter_left')
('IDENTIFIER', 'RotateTo')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'openAngle')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '4')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '8')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Print3D')
('LPAREN', '(')
('IDENTIFIER', 'shutter_left')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'BANG!')
('QUOTE', '"')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '75')
('COMMA', ',')
('IDENTIFIER', '150')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'RandomFloat')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'shutter_right')
('IDENTIFIER', 'RotateTo')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'openAngle_opp')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '4')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '8')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Print3D')
('LPAREN', '(')
('IDENTIFIER', 'shutter_right')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'BANG!')
('QUOTE', '"')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '75')
('COMMA', ',')
('IDENTIFIER', '150')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'shutter_right')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rotatedone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' note: notify is on the rocketman')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'shutters_opened')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' --- END ROCKETMEN ---')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' --- ENVIRONMENT INTERACTIONS ---')
('NEWLINE', '\n')
('COMMENT', ' sets up the environment interactions: kickable doors, bashable windows, etc.')
('NEWLINE', '\n')
('IDENTIFIER', 'ei_setup')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' set up doors')
('NEWLINE', '\n')
('IDENTIFIER', 'doorTrigTN')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'usetrig_sweep_kickable_door')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'doorTrigs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('IDENTIFIER', 'doorTrigTN')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'doorTrigs')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'doorTrigs')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'doorTrigs')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trig')
('ASSIGNMENT', '=')
('IDENTIFIER', 'doorTrigs')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' error check')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'classname')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'trigger_use')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'ei_door_think')
('LPAREN', '(')
('IDENTIFIER', 'trig')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTMSG')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Oops, when setting up EI triggers, we found an entity of class ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'classname')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' (origin ')
('QUOTE', '"')
('PLUS', '+')
('NEWLINE', '\n')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('QUOTE', '"')
('STRING', " ), but we're expecting it to be of class trigger_use.")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', " if we didn't find any, there's something wrong")
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTMSG')
('LPAREN', '(')
('QUOTE', '"')
('STRING', "Couldn't find any door kick triggers with targetname ")
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'doorTrigTN')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' TODO do the same for windows, etc.')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' trig = the use trigger that will kick off the environmental interaction')
('NEWLINE', '\n')
('IDENTIFIER', 'ei_door_think')
('LPAREN', '(')
('IDENTIFIER', 'trig')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' try to get the doors early, so debugging broken ones will be much easier')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'target')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'The door kick trigger at origin ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' has no target specified.')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'doors')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'doors')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'doors')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('COMMA', ',')
('QUOTE', '"')
('STRING', "Can't find any door entities with targetname ")
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'target')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' for the door kick trigger at origin ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('QUOTE', '"')
('STRING', '.')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' now wait for the player to use the trigger')
('NEWLINE', '\n')
('COMMENT', ' TODO localize, possibly move to the map file')
('NEWLINE', '\n')
('IDENTIFIER', 'trig')
('IDENTIFIER', 'SetHintString')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Press [USE] to breach the door.')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'trig')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' see if we want to spawn anyone inside the house')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spawnTrig')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'spawnTrig')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'spawnTrig')
('DOT', '.')
('IDENTIFIER', 'wasTriggered')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'spawnTrig')
('DOT', '.')
('IDENTIFIER', 'wasTriggered')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spawnTrig')
('DOT', '.')
('IDENTIFIER', 'wasTriggered')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spawnTrig')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' TODO play a door kicking anim or something')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'doorLeft')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'doorRight')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' open the door(s)')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'doors')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'door')
('ASSIGNMENT', '=')
('IDENTIFIER', 'doors')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERT')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'door')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'Oops, one of the doors with targetname ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'target')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' is not defined.')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERT')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'door')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'One of the doors with targetname ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'target')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' does not have a script_noteworthy telling us what kind of door it is!')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'door')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'door_left')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' open to the left')
('NEWLINE', '\n')
('IDENTIFIER', 'door')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'ei_door_open')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'left')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'doorLeft')
('ASSIGNMENT', '=')
('IDENTIFIER', 'door')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'door')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'door_right')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' open to the right')
('NEWLINE', '\n')
('IDENTIFIER', 'door')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'ei_door_open')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'right')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'doorRight')
('ASSIGNMENT', '=')
('IDENTIFIER', 'door')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTMSG')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Oops, one of the doors with targetname ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'trig')
('DOT', '.')
('IDENTIFIER', 'target')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' has a script_noteworthy of ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'door')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('PLUS', '+')
('QUOTE', '"')
('STRING', ", which doesn't match any of the types we're looking for. Is there a typo?")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'doorLeft')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'doorRight')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill_multiple')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ei_door_opened_left')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'ei_door_opened_right')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'doorLeft')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ei_door_opened_left')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'doorRight')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ei_door_opened_right')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ei_door_open_finished')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'trig')
('IDENTIFIER', 'Delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " self = the door that's opening")
('NEWLINE', '\n')
('COMMENT', ' TODO add sounds and particles')
('NEWLINE', '\n')
('IDENTIFIER', 'ei_door_open')
('LPAREN', '(')
('IDENTIFIER', 'direction')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'direction')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'left')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'direction')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'right')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', "The direction you specified, '")
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'direction')
('PLUS', '+')
('QUOTE', '"')
('STRING', "', is not valid. Typo?")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'openTimeMin')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'openTimeMax')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '45')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'openAngle')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'direction')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'left')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_int')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'openAngle')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_int')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'openAngle')
('ASSIGNMENT', '=')
('IDENTIFIER', '120')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'direction')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'right')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_int')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', " make sure this'll work with negative numbers for those times when I'm actually thinking")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_int')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'openAngle')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_int')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'openAngle')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_int')
('MULTIPLY', '*')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'openAngle')
('ASSIGNMENT', '=')
('SUBTRACT', '-')
('IDENTIFIER', '120')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' should never happen so make it look weird')
('NEWLINE', '\n')
('IDENTIFIER', 'openAngle')
('ASSIGNMENT', '=')
('IDENTIFIER', '45')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'ConnectPaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'RotateTo')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'openAngle')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', 'openTimeMin')
('COMMA', ',')
('IDENTIFIER', 'openTimeMax')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rotatedone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DisconnectPaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'notifyString')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'ei_door_opened_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'direction')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('IDENTIFIER', 'notifyString')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' --- END ENVIRONMENT INTERACTIONS ---')
('EOF', None)