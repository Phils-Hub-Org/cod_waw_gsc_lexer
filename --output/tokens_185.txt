('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '\t*******')
('NEWLINE', '\n')
('COMMENT', '\tPayload')
('NEWLINE', '\n')
('COMMENT', '\t*******')
('NEWLINE', '\n')
('COMMENT', '\tGavin Niebel')
('NEWLINE', '\n')
('COMMENT', "\tTony 'AmishThunder' Kramer")
('NEWLINE', '\n')
('COMMENT', "\tAlejandro 'Sparks' Romo")
('NEWLINE', '\n')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_anim')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'common_scripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'animscripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#using_animtree(')
('QUOTE', '"')
('STRING', 'generic_human')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', " Don't load script when compiling Reflections")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'getdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'r_reflectionProbeGenerate')
('QUOTE', '"')
('RPAREN', ')')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '1')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Co-op Callbacks')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'onFirstPlayerConnect')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'onPlayerConnect')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Vehicles')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_stuka')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_stuka_flying')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' All Precaching done in here')
('NEWLINE', '\n')
('COMMENT', ' thread animscripts\\dog_init::initDogAnimations(); ')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_loadout')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'set_player_interactive_hands')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'viewmodel_usa_marine_arms')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'PrecacheStuff')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'payload_fx')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' _load')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_load')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' ZOMBIE MODE ')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'payload_zombiemode')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'dvar_init')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'waittillframeend')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Get the bad guys( we should make them into a prefab so easier to implement in different maps )')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'referenceSpawners')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'assertex')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'The required Axis NPCs are not in the map.')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Zombie_Spawns')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombies')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Get our custom spawning system trigs')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Triggers')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'classSpawner')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'assertex')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Triggers')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'There are no spawn triggers in the map.')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Triggers')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'spawnTrigThink')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Get payload stuff')
('NEWLINE', '\n')
('COMMENT', 'thread maps\\_vehicle::scripted_spawn( 0 ); // Not using a vehicle anymore')
('NEWLINE', '\n')
('COMMENT', 'waittillframeend; ')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payloadTrig')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_trig')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'assertex')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'Payload does not exist.')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'assertex')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payloadTrig')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'Payload trigger_radius does not exist.')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Airborne dogs')
('NEWLINE', '\n')
('COMMENT', ' dogsTrig(); ')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Cow mortars')
('NEWLINE', '\n')
('IDENTIFIER', 'cowTrigs')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Misc stuff')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'npcCount')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'dogCount')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload_fx')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'off')
('QUOTE', '"')
('SEMICOLON', ';')
('COMMENT', ' FX switch on payload')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'ZombieMode')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('COMMENT', ' Turns off AI classes')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Zombie_Counter')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zTimer')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('COMMENT', ' Zombie Timer round')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'ZombiesKilled')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('COMMENT', ' Zombie death counter')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endGame')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('COMMENT', ' Check for end game')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'player_spawns')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'payload_think')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_all_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_objective')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'autoSaves')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Start the match')
('NEWLINE', '\n')
('COMMENT', 'round_start(); ')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' Level Functions')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Precache everything in here.')
('NEWLINE', '\n')
('IDENTIFIER', 'PrecacheStuff')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Strings')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheString')
('LPAREN', '(')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'PAYLOAD_OBJECTIVE')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheString')
('LPAREN', '(')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'PAYLOAD_TIMER')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheString')
('LPAREN', '(')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'PAYLOAD_FAILED')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheString')
('LPAREN', '(')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'PAYLOAD_MASTER')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Shaders')
('NEWLINE', '\n')
('IDENTIFIER', 'PrecacheShader')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'hit_direction')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheShader')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'compass_waypoint_capture')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheShader')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'compass_waypoint_defend')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Models')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'static_seelow_deadcow')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'static_seelow_deadcowb')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'clutter_okinawa_prchute_drpbox')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'static_seelow_tractor')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'skybox_mak1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'char_ger_honorgd_zomb_behead')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'char_ger_zombieeye')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Weapons            ')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'molotov')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'm2_flamethrower')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'm1carbine')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'm1garand')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ptrs41')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'kar98k_scoped')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'shotgun')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'doublebarrel_sawed_grip')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'doublebarrel')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'gewehr43')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'thompson')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stg44')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'mp40')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'mg42_bipod')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fg42_bipod')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'bar')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'kar98k')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'springfield')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'colt')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panzerschrek')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panzershark')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'walther')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sw_357')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheItem')
('LPAREN', '(')
('QUOTE', '"')
('STRING', '30cal_bipod')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Dvar stuff. Create, set, check, whatever you want in here.')
('NEWLINE', '\n')
('IDENTIFIER', 'dvar_init')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' CoDWW Farm Mod Dvar')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_farmMod')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '0')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Max AI/ Dogs')
('NEWLINE', '\n')
('COMMENT', ' Always make sure the two dvars add up to 32')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_maxAi')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '28')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_maxDogs')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '4')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Seconds per match -- Perhaps make it dependent on AI skill?')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_timerSecs')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '600')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Pushing Points')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_pushPoints')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '10')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_pushPointsSecs')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '10')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Kill Points')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_killPoints')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '15')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' AI Attributes')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_attackerHealth')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '125')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_defenderHealth')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '100')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_kamikazeHealth')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '80')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_stealerHealth')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '175')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Secures a check point every so often via script.')
('NEWLINE', '\n')
('IDENTIFIER', 'autoSaves')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_end')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'counter')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'min')
('ASSIGNMENT', '=')
('IDENTIFIER', '10')
('SEMICOLON', ';')
('COMMENT', ' Seconds')
('NEWLINE', '\n')
('IDENTIFIER', 'max')
('ASSIGNMENT', '=')
('IDENTIFIER', '16')
('SEMICOLON', ';')
('COMMENT', ' Seconds')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', 'min')
('COMMA', ',')
('IDENTIFIER', 'max')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'doSave')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_autosave')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'autosave_check_simple')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'doSave')
('EQUALS_TO', '==')
('IDENTIFIER', 'true')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'autosave_by_name')
('LPAREN', '(')
('IDENTIFIER', 'counter')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'counter')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Anything pertaining to setting up/handling the payload should be managed from here.')
('NEWLINE', '\n')
('IDENTIFIER', 'payload_think')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' Link collision to payload')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload_col')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getent')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_collision')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload_col')
('IDENTIFIER', 'linkto')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('ASSIGNMENT', '=')
('IDENTIFIER', 'newHudElem')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('DOT', '.')
('IDENTIFIER', 'hideWhenInMenu')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('IDENTIFIER', 'SetTargetEnt')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('IDENTIFIER', 'setWayPoint')
('LPAREN', '(')
('IDENTIFIER', 'true')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'compass_waypoint_capture')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'payload_trig_update')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'level.payload thread payload_speed(); // Not using a vehicle anymore')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'payload_movement')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'level.payload thread payload_clamp(); // Buggy, perhaps we can use a vehicle')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " Can't do linkTo with a trigger, so lets just move it with the payload : )")
('NEWLINE', '\n')
('IDENTIFIER', 'payload_trig_update')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' Do we want the payload to be destroyable?')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'org1')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'getorigin')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payloadTrig')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'org1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Handles the payload moving goal to goal')
('NEWLINE', '\n')
('IDENTIFIER', 'payload_movement')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' Do we want the payload to be destroyable?')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " Speed + Acceleration can't be 0 before assigning a Goal")
('NEWLINE', '\n')
('COMMENT', 'self setspeed( 1, 1, 1 ); // Not using a vehicle anymore')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'wayPoints')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'wayPoints')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getGoals')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' Stores all the waypoint origins')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_waypoint')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'getMoving')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' This handles checking if players are near payload.')
('NEWLINE', '\n')
('COMMENT', ' By ChrisP. Modified by Sparks.')
('NEWLINE', '\n')
('IDENTIFIER', 'getMoving')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_end')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'any_player_isTouching')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payloadTrig')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'movedone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'move_tractor')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_not_moving')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' Turns off payload FX')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'any_player_IsTouching')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payloadTrig')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' Lets call up the FX first so player( s ) knows they at least came in contact')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload_fx')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'off')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'payloadFxThink')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Somebody is near Payload, get how many are near it')
('NEWLINE', '\n')
('IDENTIFIER', 'speed')
('ASSIGNMENT', '=')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'how_many_IsTouching')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payloadTrig')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'move_tractor')
('LPAREN', '(')
('IDENTIFIER', 'speed')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'getMoving')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' This just handles the actual moveto of the tractor, and will stop when notified.')
('NEWLINE', '\n')
('COMMENT', ' By ChrisP. Modified by Sparks.')
('NEWLINE', '\n')
('IDENTIFIER', 'move_tractor')
('LPAREN', '(')
('IDENTIFIER', 'speed')
('COMMA', ',')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_end')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'speed')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'speed')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'wayPoints')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_waypoint')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ismoving')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ismoving')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'deadZone')
('ASSIGNMENT', '=')
('IDENTIFIER', '16')
('SEMICOLON', ';')
('COMMENT', ' CoD Units\t\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " Since we're not using a vehicle, getting the script_model to move faster with more")
('NEWLINE', '\n')
('COMMENT', ' people became a bit more complex to implement. So I placed the script_struct waypoints')
('NEWLINE', '\n')
('COMMENT', ' about 434 units apart from each other on the path that way there would always be')
('NEWLINE', '\n')
('COMMENT', ' just about the same distance between points and we can play with the < time > for moveTo')
('NEWLINE', '\n')
('COMMENT', ' and not worry about having the payload go way too fast between two waypoints with a small gap.')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'baseSpeed')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'baseSpeed_tweak')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'actualSpeed')
('ASSIGNMENT', '=')
('IDENTIFIER', 'baseSpeed')
('PLUS', '+')
('IDENTIFIER', 'speed')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'moveto')
('LPAREN', '(')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'actualSpeed')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " Lets check to see if it's within deadZone so it can start moving to next wayPoint")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'DistanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'wayPoints')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_waypoint')
('RBRACKET', ']')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'deadZone')
('MULTIPLY', '*')
('IDENTIFIER', 'deadZone')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_waypoint')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'wayPoints')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_waypoint')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'VectorToAngles')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'wayPoints')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_waypoint')
('RBRACKET', ']')
('SUBTRACT', '-')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'RotateTo')
('LPAREN', '(')
('IDENTIFIER', 'angles')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('SUBTRACT', '-')
('IDENTIFIER', '90')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'wayPoints')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_waypoint')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'autosave_by_name')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Zombies')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('DOT', '.')
('IDENTIFIER', '8')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'ZombInit')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Payload made it to the end!!!')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'we_win')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_end')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ismoving')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' This just tweaks the moveTo speed based on distance from payload to next point.')
('NEWLINE', '\n')
('IDENTIFIER', 'baseSpeed_tweak')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'distance')
('ASSIGNMENT', '=')
('IDENTIFIER', 'Distance')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'wayPoints')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_waypoint')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('GREATER_THAN', '>')
('IDENTIFIER', '375')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', '2')
('DOT', '.')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('GREATER_THAN', '>')
('IDENTIFIER', '300')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', '2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('GREATER_THAN', '>')
('IDENTIFIER', '200')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', '1')
('DOT', '.')
('IDENTIFIER', '75')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('GREATER_THAN', '>')
('IDENTIFIER', '50')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('GREATER_THAN', '>')
('IDENTIFIER', '25')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('DOT', '.')
('IDENTIFIER', '6')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('DOT', '.')
('IDENTIFIER', '7')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " Created after we switched to using a script_model. Doesn't well though. :( ")
('NEWLINE', '\n')
('COMMENT', ' Will probably be commented out.')
('NEWLINE', '\n')
('IDENTIFIER', 'payload_clamp')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trace')
('ASSIGNMENT', '=')
('IDENTIFIER', 'bulletTrace')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('SUBTRACT', '-')
('IDENTIFIER', '100')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'false')
('COMMA', ',')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'trace')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'position')
('QUOTE', '"')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'currentsurface')
('ASSIGNMENT', '=')
('IDENTIFIER', 'trace')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'surfacetype')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'currentsurface')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'none')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'currentsurface')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'default')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Gets all the script_structs for the payload and builds a path.')
('NEWLINE', '\n')
('IDENTIFIER', 'getGoals')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wayPoints')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Get the first point')
('NEWLINE', '\n')
('IDENTIFIER', 'Point')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getStruct')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'firstPoint')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'assert')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'Point')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'There is no first point for Payload path.')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Set up path for Payload')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'Point')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wayPoints')
('LBRACKET', '[')
('IDENTIFIER', 'wayPoints')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'Point')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'Point')
('DOT', '.')
('IDENTIFIER', 'target')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'Point')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getStruct')
('LPAREN', '(')
('IDENTIFIER', 'Point')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('COMMENT', ' No next point')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'wayPoints')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'get')
('LPAREN', '(')
('IDENTIFIER', 'value')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('IDENTIFIER', 'value')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Dependent upon how many players( non-NPC ) are near the Payload')
('NEWLINE', '\n')
('COMMENT', ' Or do we want NPCs to push back?')
('NEWLINE', '\n')
('IDENTIFIER', 'payload_speed')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' Do we want payload to be destroyable?')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_end')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' Finished path, stop moving')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'can_move')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'any_player_IsTouching')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payloadTrig')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'can_move')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'can_move')
('EQUALS_TO', '==')
('IDENTIFIER', 'true')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' Lets call up the FX first so player( s ) knows they at least came in contact')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload_fx')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'off')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'payloadFxThink')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Somebody is near Payload, get how many are near it')
('NEWLINE', '\n')
('IDENTIFIER', 'count')
('ASSIGNMENT', '=')
('IDENTIFIER', 'how_many_IsTouching')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payloadTrig')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'count')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMENT', ' Fail safe incase someone has ninja moving skills between can_move check and how_many_isTouching check')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setspeed')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '3')
('COMMA', ',')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_not_moving')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' Turns off payload FX')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'count')
('EQUALS_TO', '==')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setspeed')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', '3')
('COMMA', ',')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'count')
('EQUALS_TO', '==')
('IDENTIFIER', '2')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setspeed')
('LPAREN', '(')
('IDENTIFIER', '3')
('COMMA', ',')
('IDENTIFIER', '4')
('COMMA', ',')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'count')
('EQUALS_TO', '==')
('IDENTIFIER', '3')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setspeed')
('LPAREN', '(')
('IDENTIFIER', '4')
('COMMA', ',')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('COMMENT', ' count == 4')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setspeed')
('LPAREN', '(')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('COMMENT', ' can_move == false')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' No one is near Payload')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setspeed')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '3')
('COMMA', ',')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_not_moving')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' Turns off payload FX')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " Spawns an FX on the Payload so players know they're moving it")
('NEWLINE', '\n')
('COMMENT', ' Do we want to have different visual FXs for how many people are moving it?')
('NEWLINE', '\n')
('IDENTIFIER', 'payloadFxThink')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload_fx')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'on')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('IDENTIFIER', 'destroy')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('ASSIGNMENT', '=')
('IDENTIFIER', 'newHudElem')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('DOT', '.')
('IDENTIFIER', 'hideWhenInMenu')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('IDENTIFIER', 'SetTargetEnt')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('IDENTIFIER', 'setWayPoint')
('LPAREN', '(')
('IDENTIFIER', 'true')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'compass_waypoint_defend')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_not_moving')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('IDENTIFIER', 'destroy')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('ASSIGNMENT', '=')
('IDENTIFIER', 'newHudElem')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('DOT', '.')
('IDENTIFIER', 'hideWhenInMenu')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('IDENTIFIER', 'SetTargetEnt')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('DOT', '.')
('IDENTIFIER', 'hud')
('IDENTIFIER', 'setWayPoint')
('LPAREN', '(')
('IDENTIFIER', 'true')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'compass_waypoint_capture')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload_fx')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'off')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Returns how many people are moving the Payload')
('NEWLINE', '\n')
('IDENTIFIER', 'how_many_IsTouching')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'count')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsAlive')
('LPAREN', '(')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'IsTouching')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'weapon')
('ASSIGNMENT', '=')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'GetCurrentWeapon')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Players get more ammo for pushing the payload')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'none')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'GiveMaxAmmo')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'count')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'count')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Return closest node from array.')
('NEWLINE', '\n')
('IDENTIFIER', 'get_closest_node')
('LPAREN', '(')
('IDENTIFIER', 'org')
('COMMA', ',')
('IDENTIFIER', 'nodes')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'getClosest')
('LPAREN', '(')
('IDENTIFIER', 'org')
('COMMA', ',')
('IDENTIFIER', 'nodes')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " Just displays an objective for the players incase they're lost.")
('NEWLINE', '\n')
('IDENTIFIER', 'setup_objective')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_add')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'active')
('QUOTE', '"')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'PAYLOAD_OBJECTIVE')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_current')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'we_win')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_state')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' Zombies')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'ZombInit')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' Just a safe re-notify')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_end')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " Don't let any remaining enemies spawn")
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Triggers')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'trigger_off')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Kill any remaining enemies')
('NEWLINE', '\n')
('IDENTIFIER', 'ai')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetAIArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'ai')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'self_delete')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('ASSIGNMENT', '=')
('IDENTIFIER', 'newHudElem')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('DOT', '.')
('IDENTIFIER', 'alpha')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('DOT', '.')
('IDENTIFIER', 'hidewheninmenu')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('DOT', '.')
('IDENTIFIER', 'horzAlign')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'center')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('DOT', '.')
('IDENTIFIER', 'vertAlign')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'middle')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('DOT', '.')
('IDENTIFIER', 'alignX')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'center')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('DOT', '.')
('IDENTIFIER', 'alignY')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'middle')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('DOT', '.')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('DOT', '.')
('IDENTIFIER', 'y')
('ASSIGNMENT', '=')
('SUBTRACT', '-')
('IDENTIFIER', '60')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('DOT', '.')
('IDENTIFIER', 'font')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'big')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('DOT', '.')
('IDENTIFIER', 'fontscale')
('ASSIGNMENT', '=')
('IDENTIFIER', '2')
('DOT', '.')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('DOT', '.')
('IDENTIFIER', 'color')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('IDENTIFIER', 'setText')
('LPAREN', '(')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'PAYLOAD_MASTER')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'ZombieMode')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('IDENTIFIER', 'setExpFog')
('LPAREN', '(')
('IDENTIFIER', '50')
('COMMA', ',')
('IDENTIFIER', '256')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('IDENTIFIER', 'VisionSetNaked')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'mak')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '2')
('DOT', '.')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('IDENTIFIER', 'playSound')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'laugh')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('IDENTIFIER', 'playLoopSound')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'bg_zombie_madness')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'watchDuringZombie')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Make spawners into Zombie')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Zombie_Spawns')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'payload_zombiemode_spawner')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'zombie_spawn_init')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' How much time players have')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombTimer')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Spawn loot of Zombies by barn')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'BarnSpawn')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'masterHud')
('IDENTIFIER', 'destroy')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'watchDuringZombie')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'disconnect')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_laststand')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'player_is_in_laststand')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' lol @ player')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'playSound')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'laugh')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " Don't want to spam the laugh while they're in the same last stand")
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_laststand')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'player_is_in_laststand')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('DOT', '.')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombTimer')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Tweak how many seconds per player')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zTimer')
('ASSIGNMENT', '=')
('IDENTIFIER', '100')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('EQUALS_TO', '==')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zTimer')
('ASSIGNMENT', '=')
('IDENTIFIER', '90')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('EQUALS_TO', '==')
('IDENTIFIER', '2')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zTimer')
('ASSIGNMENT', '=')
('IDENTIFIER', '80')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zTimer')
('ASSIGNMENT', '=')
('IDENTIFIER', '60')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'timer')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_hud_util')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'get_countdown_hud')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'timer')
('DOT', '.')
('IDENTIFIER', 'label')
('ASSIGNMENT', '=')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'PAYLOAD_TIMER')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'timer')
('IDENTIFIER', 'settenthstimer')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zTimer')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'start_time')
('ASSIGNMENT', '=')
('IDENTIFIER', 'gettime')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Wait for timer')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zTimer')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', ' Timer out!')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'ZombiesKilled')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', '30')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'iPrintLnBold')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'TEMP: YOU WIN!')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endGame')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'nextmission')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'setDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ui_deadquote')
('QUOTE', '"')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'PAYLOAD_FAILED')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'missionFailedWrapper')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'BarnSpawn')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ai')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'eSpawned')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'zombsToSpawn')
('ASSIGNMENT', '=')
('IDENTIFIER', '30')
('SEMICOLON', ';')
('COMMENT', ' We can push 32 but lets just be safe : )')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endGame')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Zombie_Counter')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'zombsToSpawn')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Zombie_Spawns')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Zombie_Spawns')
('LBRACKET', '[')
('IDENTIFIER', 'rand')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'count')
('ASSIGNMENT', '=')
('IDENTIFIER', '999')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'eSpawned')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Zombie_Spawns')
('LBRACKET', '[')
('IDENTIFIER', 'rand')
('RBRACKET', ']')
('IDENTIFIER', 'StalingradSpawn')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'spawn_failed')
('LPAREN', '(')
('IDENTIFIER', 'eSpawned')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Zombie_Counter')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('DOT', '.')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' Cow Mortars')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Handles and checks triggers for when to drop cows.')
('NEWLINE', '\n')
('IDENTIFIER', 'cowTrigs')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'cow_drop')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'cowThink')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Handles user triggering for cows.')
('NEWLINE', '\n')
('IDENTIFIER', 'cowThink')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'xmodels')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'xmodels')
('LBRACKET', '[')
('IDENTIFIER', 'xmodels')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'static_seelow_deadcow')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'xmodels')
('LBRACKET', '[')
('IDENTIFIER', 'xmodels')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'static_seelow_deadcowb')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawnLocs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getStructArray')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', ' TODO: Assert')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'howManyToSpawn')
('ASSIGNMENT', '=')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', 'spawnLocs')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'newSpawnLocs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_randomize')
('LPAREN', '(')
('IDENTIFIER', 'spawnLocs')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'howManyToSpawn')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tSpawned')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_model')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'newSpawnLocs')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tSpawned')
('IDENTIFIER', 'setModel')
('LPAREN', '(')
('IDENTIFIER', 'xmodels')
('LBRACKET', '[')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'xmodels')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tSpawned')
('IDENTIFIER', 'RotatePitch')
('LPAREN', '(')
('SUBTRACT', '-')
('IDENTIFIER', '180')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '01')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'fallCow')
('LPAREN', '(')
('IDENTIFIER', 'tSpawned')
('COMMA', ',')
('IDENTIFIER', 'newSpawnLocs')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '8')
('COMMA', ',')
('IDENTIFIER', '1')
('DOT', '.')
('IDENTIFIER', '4')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', '4')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Drops the cows. Perhaps we can just use BulletTrace later?')
('NEWLINE', '\n')
('IDENTIFIER', 'fallCow')
('LPAREN', '(')
('IDENTIFIER', 'cow')
('COMMA', ',')
('IDENTIFIER', 'start')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tTarget')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getStruct')
('LPAREN', '(')
('IDENTIFIER', 'start')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'cow')
('IDENTIFIER', 'MoveTo')
('LPAREN', '(')
('IDENTIFIER', 'tTarget')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '3')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('DOT', '.')
('IDENTIFIER', '03')
('COMMA', ',')
('DOT', '.')
('IDENTIFIER', '7')
('RPAREN', ')')
('COMMA', ',')
('DOT', '.')
('IDENTIFIER', '01')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'cow')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'movedone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'cow_milk')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'cow')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'dropletCheck')
('LPAREN', '(')
('IDENTIFIER', 'cow')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'cow')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Checks for player collision with milk splash and plays overlay.')
('NEWLINE', '\n')
('IDENTIFIER', 'dropletCheck')
('LPAREN', '(')
('IDENTIFIER', 'cowOrigin')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'DistanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'cowOrigin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '220')
('MULTIPLY', '*')
('IDENTIFIER', '220')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_milk_drops_on_camera_for_time')
('LPAREN', '(')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' Airborne Dogs')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Handles and checks triggers for when to drop dogs.')
('NEWLINE', '\n')
('IDENTIFIER', 'dogsTrig')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'dog_drop')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'dogChuteThink')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_supply_drop_anims')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Handles user triggering for dogs.')
('NEWLINE', '\n')
('IDENTIFIER', 'dogChuteThink')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_end')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_vehicle')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'create_vehicle_from_spawngroup_and_gopath')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', ' TODO: Assert')
('NEWLINE', '\n')
('IDENTIFIER', 'waittillframeend')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'dog')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'airborne_dog')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'plane')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'dogPlane')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'spawnerMove')
('LPAREN', '(')
('IDENTIFIER', 'dog')
('COMMA', ',')
('IDENTIFIER', 'plane')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' TODO: Modulate which paths plane can use so map only needs 1 plane for all different paths.')
('NEWLINE', '\n')
('COMMENT', 'plane thread maps\\_vehicle::goPath(); ')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'skyTrig')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getent')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_linkto')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_linkname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', ' TODO: Assert')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Plane reaches drop point')
('NEWLINE', '\n')
('IDENTIFIER', 'skyTrig')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'skyTrig')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'parachuteAway')
('LPAREN', '(')
('IDENTIFIER', 'dog')
('COMMA', ',')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'plane')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_end_node')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'plane')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', '15')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Moves the dog spawner with the plane.')
('NEWLINE', '\n')
('IDENTIFIER', 'spawnerMove')
('LPAREN', '(')
('IDENTIFIER', 'dog')
('COMMA', ',')
('IDENTIFIER', 'plane')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'plane')
('RPAREN', ')')
('RPAREN', ')')
('COMMENT', ' Should probably use a flag')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dog')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'plane')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Spawn a dog.')
('NEWLINE', '\n')
('IDENTIFIER', 'parachuteAway')
('LPAREN', '(')
('IDENTIFIER', 'dog')
('COMMA', ',')
('IDENTIFIER', 'trig')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'canSpawn')
('ASSIGNMENT', '=')
('IDENTIFIER', 'calculateDogs')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'canSpawn')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dSpawned')
('ASSIGNMENT', '=')
('IDENTIFIER', 'dog')
('IDENTIFIER', 'StalingradSpawn')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'spawn_failed')
('LPAREN', '(')
('IDENTIFIER', 'dSpawned')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'dogCount')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'dSpawned')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'dogDeathDevent')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'dSpawned')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'parachuteThink')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'RandomFloat')
('LPAREN', '(')
('IDENTIFIER', '2')
('DOT', '.')
('IDENTIFIER', '0')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Lower dog limiter when dog dies.')
('NEWLINE', '\n')
('IDENTIFIER', 'dogDeathDevent')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'dogCount')
('SUBTRACT', '-')
('SUBTRACT', '-')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#using_animtree(')
('QUOTE', '"')
('STRING', 'supply_drop')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', ' Handles how the dog parachutes down.')
('NEWLINE', '\n')
('IDENTIFIER', 'parachuteThink')
('LPAREN', '(')
('IDENTIFIER', 'goal')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'landedEarly')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'magic_bullet_shield')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'harness')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_model')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'harness')
('IDENTIFIER', 'setModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'clutter_okinawa_prchute_drpbox')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'harness')
('DOT', '.')
('IDENTIFIER', 'animName')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'drop1')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'harness')
('IDENTIFIER', 'useanimtree')
('LPAREN', '(')
('PREPROCESSOR_DIRECTIVE', '#animtree')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'anchor')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_origin')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'harness')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'harness')
('IDENTIFIER', 'linkto')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'linkTo')
('LPAREN', '(')
('IDENTIFIER', 'anchor')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '100')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '50')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'str')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'landing')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'str')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'landingb')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trace')
('ASSIGNMENT', '=')
('IDENTIFIER', 'bulletTrace')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('SUBTRACT', '-')
('IDENTIFIER', '10000')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'false')
('COMMA', ',')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'dropLocation')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'trace')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'position')
('QUOTE', '"')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'dropLocation')
('PLUS_EQUALS', '+=')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '8')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'anchor')
('IDENTIFIER', 'MoveTo')
('LPAREN', '(')
('IDENTIFIER', 'dropLocation')
('COMMA', ',')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '4')
('COMMA', ',')
('IDENTIFIER', '6')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'harness')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'DogVibrate')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'checkLanded')
('LPAREN', '(')
('IDENTIFIER', 'anchor')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DogSplat')
('LPAREN', '(')
('IDENTIFIER', 'anchor')
('COMMA', ',')
('IDENTIFIER', 'harness')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'harness')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'movedone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isAlive')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'attackPlayers')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'landedEarly')
('EQUALS_TO', '==')
('IDENTIFIER', 'false')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'harness')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'anim_single_solo')
('LPAREN', '(')
('IDENTIFIER', 'harness')
('COMMA', ',')
('IDENTIFIER', 'str')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'harness')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'single anim')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'RadiusDamage')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', '100')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('PLUS', '+')
('IDENTIFIER', '1000')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('PLUS', '+')
('IDENTIFIER', '10')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'harness')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'anchor')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Parachute notifies dog when landed.')
('NEWLINE', '\n')
('IDENTIFIER', 'checkLanded')
('LPAREN', '(')
('IDENTIFIER', 'anchor')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'anchor')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'movedone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'landed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Splat. Enough said.')
('NEWLINE', '\n')
('IDENTIFIER', 'DogSplat')
('LPAREN', '(')
('IDENTIFIER', 'anchor')
('COMMA', ',')
('IDENTIFIER', 'harness')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill_any')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'landed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'unLink')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'harness')
('IDENTIFIER', 'unLink')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trace')
('ASSIGNMENT', '=')
('IDENTIFIER', 'bulletTrace')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('SUBTRACT', '-')
('IDENTIFIER', '10000')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'false')
('COMMA', ',')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'fallLocation')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'trace')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'position')
('QUOTE', '"')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'DistanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'fallLocation')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '10')
('MULTIPLY', '*')
('IDENTIFIER', '10')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'landedEarly')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'freeFall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_origin')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'linkTo')
('LPAREN', '(')
('IDENTIFIER', 'freeFall')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'harness')
('IDENTIFIER', 'hide')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'freeFall')
('IDENTIFIER', 'moveto')
('LPAREN', '(')
('IDENTIFIER', 'fallLocation')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '8')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'freeFall')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'movedone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dog_splat')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'freeFall')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'stop_magic_bullet_shield')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'freeFall')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'stop_magic_bullet_shield')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'anchor')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'movedone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#using_animtree(')
('QUOTE', '"')
('STRING', 'supply_drop')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', ' Originally was just shaking the dog, but now using animations for chute.')
('NEWLINE', '\n')
('IDENTIFIER', 'DogVibrate')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'drop1')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'useanimtree')
('LPAREN', '(')
('PREPROCESSOR_DIRECTIVE', '#animtree')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'movedone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'anim_single_solo')
('LPAREN', '(')
('IDENTIFIER', 'self')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'drop')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'single anim')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Checks how many Dogs can be spawned in when triggered')
('NEWLINE', '\n')
('IDENTIFIER', 'calculateDogs')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'min')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('COMMENT', ' Always try to spawn at least # ')
('NEWLINE', '\n')
('IDENTIFIER', 'max')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetDvarInt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_maxDogs')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' AI allowed per map')
('NEWLINE', '\n')
('IDENTIFIER', 'allocationFree')
('ASSIGNMENT', '=')
('IDENTIFIER', 'max')
('SUBTRACT', '-')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'dogCount')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'allocationFree')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMENT', ' No room')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'allocationFree')
('GREATER_THAN', '>')
('IDENTIFIER', 'max')
('RPAREN', ')')
('COMMENT', ' Enough for max spawn')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('LPAREN', '(')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', 'min')
('COMMA', ',')
('IDENTIFIER', 'max')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('COMMENT', ' Already dogs spawned')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('LPAREN', '(')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', 'min')
('COMMA', ',')
('IDENTIFIER', 'allocationFree')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'min')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' AI Classes And Logic')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'chooseClass')
('LPAREN', '(')
('IDENTIFIER', 'howManyCanSpawn')
('COMMA', ',')
('IDENTIFIER', 'eLocos')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Defender : Will hold their ground.')
('NEWLINE', '\n')
('COMMENT', ' Attacker : Will charge players.')
('NEWLINE', '\n')
('COMMENT', ' Stealer  : Will try to stop Payload.')
('NEWLINE', '\n')
('COMMENT', ' Kamikaze : Blow up on death.')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Add classes here')
('NEWLINE', '\n')
('COMMENT', ' You can stress/bug test a class by commenting out the rest')
('NEWLINE', '\n')
('IDENTIFIER', 'eClasses')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'eClasses')
('LBRACKET', '[')
('IDENTIFIER', 'eClasses')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'Defender')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'eClasses')
('LBRACKET', '[')
('IDENTIFIER', 'eClasses')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'Attacker')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'eClasses')
('LBRACKET', '[')
('IDENTIFIER', 'eClasses')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'Stealer')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'eClasses')
('LBRACKET', '[')
('IDENTIFIER', 'eClasses')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'Kamikaze')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Cycle and choose what classes are going to spawn')
('NEWLINE', '\n')
('COMMENT', ' Then spawn.')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'howManyCanSpawn')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'eSpawner')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tempClass')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_randomize')
('LPAREN', '(')
('IDENTIFIER', 'eClasses')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'classToSpawn')
('ASSIGNMENT', '=')
('IDENTIFIER', 'tempClass')
('LBRACKET', '[')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'tempClass')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guyWeapon')
('ASSIGNMENT', '=')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'weaponClassThink')
('LPAREN', '(')
('IDENTIFIER', 'classToSpawn')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'moveSpawners')
('LPAREN', '(')
('IDENTIFIER', 'eLocos')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'guyWeapon')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'ptrs41')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'kar98k')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'kar98k_scoped')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'gewehr43')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'shotgun')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'doublebarrel_sawed_grip')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'doublebarrel')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'eSpawner')
('ASSIGNMENT', '=')
('IDENTIFIER', 'findSpawnerScript')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rifle')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'm2_flamethrower')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'eSpawner')
('ASSIGNMENT', '=')
('IDENTIFIER', 'findSpawnerScript')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flame')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'mg42_bipod')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'fg42_bipod')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', '30cal_bipod')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'eSpawner')
('ASSIGNMENT', '=')
('IDENTIFIER', 'findSpawnerScript')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'portable')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'panzerschrek')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'panzershark')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'eSpawner')
('ASSIGNMENT', '=')
('IDENTIFIER', 'findSpawnerScript')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'bazooka')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'stg44')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'mp40')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'eSpawner')
('ASSIGNMENT', '=')
('IDENTIFIER', 'findSpawnerScript')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'smg')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'default')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'eSpawner')
('ASSIGNMENT', '=')
('IDENTIFIER', 'findSpawnerScript')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rifle')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'eSpawned')
('ASSIGNMENT', '=')
('IDENTIFIER', 'eSpawner')
('IDENTIFIER', 'doSpawn')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'spawn_failed')
('LPAREN', '(')
('IDENTIFIER', 'eSpawned')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' empty check')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'eSpawned')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'spawnEvent')
('LPAREN', '(')
('IDENTIFIER', 'classToSpawn')
('COMMA', ',')
('IDENTIFIER', 'guyWeapon')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'eSpawned')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'flyingBodies')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'resetSpawners')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' Return those spawners back to original location until next time')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'level notify( "spawners_ready" ); ')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flyingBodies')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' Notes:\n\t\tHandles how all the AI go flying when you kill them.\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_end')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'explosionPos')
('ASSIGNMENT', '=')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '24')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'explosionPos')
('SUBTRACT_EQUALS', '-=')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('MULTIPLY', '*')
('IDENTIFIER', '20')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'explosionRadius')
('ASSIGNMENT', '=')
('IDENTIFIER', '70')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'explosionForce')
('ASSIGNMENT', '=')
('IDENTIFIER', '4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsPlayer')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', " Humor Mod Merge -- This isn't working yet.")
('NEWLINE', '\n')
('COMMENT', 'temp = spawn( "script_struct", origin ); ')
('NEWLINE', '\n')
('COMMENT', 'player.kill = newClientHudElem(); ')
('NEWLINE', '\n')
('COMMENT', 'player.kill.hideWhenInMenu = true; ')
('NEWLINE', '\n')
('COMMENT', 'player.kill SetTargetEnt( temp ); ')
('NEWLINE', '\n')
('COMMENT', 'player.kill setShader( "compass_waypoint_capture" ); ')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'player')
('IDENTIFIER', 'GetCurrentWeapon')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'm2_flamethrower')
('QUOTE', '"')
('RPAREN', ')')
('COMMENT', ' Letting burning guys burn')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'startragdoll')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'physicsExplosionSphere')
('LPAREN', '(')
('IDENTIFIER', 'explosionPos')
('COMMA', ',')
('IDENTIFIER', 'explosionRadius')
('COMMA', ',')
('IDENTIFIER', 'explosionRadius')
('DIVIDE', '/')
('IDENTIFIER', '1')
('DOT', '.')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', 'explosionForce')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Do a second send off incase the first one was too early.')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('DOT', '.')
('IDENTIFIER', '04')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'physicsExplosionSphere')
('LPAREN', '(')
('IDENTIFIER', 'explosionPos')
('COMMA', ',')
('IDENTIFIER', 'explosionRadius')
('COMMA', ',')
('IDENTIFIER', 'explosionRadius')
('DIVIDE', '/')
('IDENTIFIER', '1')
('DOT', '.')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', 'explosionForce')
('DIVIDE', '/')
('IDENTIFIER', '1')
('DOT', '.')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'player.kill fadeovertime( 1.3 ); ')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('DOT', '.')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'player.kill destroy(); ')
('NEWLINE', '\n')
('COMMENT', 'temp delete(); ')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Trys to find the best possible actor for a specific gun.')
('NEWLINE', '\n')
('COMMENT', " That way an actor with flame thrower anims isn't trying")
('NEWLINE', '\n')
('COMMENT', ' to fire a bazooka for example.')
('NEWLINE', '\n')
('IDENTIFIER', 'findSpawnerScript')
('LPAREN', '(')
('IDENTIFIER', 'eNoteWorthy')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spawner')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('IDENTIFIER', 'eNoteWorthy')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spawner')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'spawner')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Main logic for how the enemy team plays against players.')
('NEWLINE', '\n')
('IDENTIFIER', 'npcClassInit')
('LPAREN', '(')
('IDENTIFIER', 'classToSpawn')
('COMMA', ',')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'assert')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'classToSpawn')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'Enemy does not have an assigned class at: ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Class stuff')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'classToSpawn')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'Defender')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'PushPlayer')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'enable_pain')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '1024')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxhealth')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetDvarInt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_defenderHealth')
('QUOTE', '"')
('RPAREN', ')')
('PLUS', '+')
('IDENTIFIER', '10')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'getToPlayers')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'Attacker')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'PushPlayer')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'disable_pain')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '512')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxhealth')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetDvarInt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_attackerHealth')
('QUOTE', '"')
('RPAREN', ')')
('PLUS', '+')
('IDENTIFIER', '10')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'getToPlayers')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'Stealer')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'PushPlayer')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'enable_pain')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '256')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_force_cover')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'none')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxhealth')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetDvarInt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_stealerHealth')
('QUOTE', '"')
('RPAREN', ')')
('PLUS', '+')
('IDENTIFIER', '10')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'getToCart')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'Kamikaze')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'PushPlayer')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'disable_pain')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '75')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_force_cover')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'none')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxhealth')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetDvarInt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_kamikazeHealth')
('QUOTE', '"')
('RPAREN', ')')
('PLUS', '+')
('IDENTIFIER', '10')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'self thread getToPlayers(); ')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Weapon stuff')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'ptrs41')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'kar98k')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'kar98k_scoped')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'gewehr43')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'shotgun')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'doublebarrel_sawed_grip')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'doublebarrel')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('COMMENT', ' Rifles & Shotguns')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_npc_weapon')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'm2_flamethrower')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('COMMENT', ' Flamethrower')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_npc_weapon')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'baseaccuracy')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'flamethrowerShootTime_min')
('ASSIGNMENT', '=')
('IDENTIFIER', '10000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'flamethrowerShootTime_max')
('ASSIGNMENT', '=')
('IDENTIFIER', '15000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'flamethrowerShootDelay_min')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'flamethrowerShootDelay_max')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'mg42_bipod')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'fg42_bipod')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', '30cal_bipod')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_npc_weapon')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'panzerschrek')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'panzershark')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('COMMENT', ' Bazooka')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'grenadeAmmo')
('ASSIGNMENT', '=')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'self.dropweapon = false; ')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_npc_weapon')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'no_weapon_switch')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('COMMENT', ' They will stick to just using bazookas')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'stg44')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'mp40')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('COMMENT', ' SMGs')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_npc_weapon')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Need to call this whenever we switch weapons on the fly, ')
('NEWLINE', '\n')
('COMMENT', ' else errors/warnings/bugs galore.')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'm2_flamethrower')
('QUOTE', '"')
('RPAREN', ')')
('COMMENT', ' Flame thrower guys start with flame throwers, skip the')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'animscripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'init')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'initWeapon')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'primary')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'set_npc_weapon')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'primaryweapon')
('ASSIGNMENT', '=')
('IDENTIFIER', 'weapon')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'animscripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'init')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'initWeapon')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'primary')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'gun_switchto')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'right')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Assigns a gun to an enemy dependent upon their class.')
('NEWLINE', '\n')
('IDENTIFIER', 'weaponClassThink')
('LPAREN', '(')
('IDENTIFIER', 'class')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'weaponList')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'weapon')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', '')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'class')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'Defender')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'weaponList')
('LBRACKET', '[')
('IDENTIFIER', 'weaponList')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', '30cal_bipod')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'weaponList')
('LBRACKET', '[')
('IDENTIFIER', 'weaponList')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'gewehr43')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'weaponList')
('LBRACKET', '[')
('IDENTIFIER', 'weaponList')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'panzershark')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'Attacker')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'weaponList')
('LBRACKET', '[')
('IDENTIFIER', 'weaponList')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'stg44')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'weaponList')
('LBRACKET', '[')
('IDENTIFIER', 'weaponList')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'gewehr43')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'weaponList')
('LBRACKET', '[')
('IDENTIFIER', 'weaponList')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'doublebarrel_sawed_grip')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'weaponList')
('LBRACKET', '[')
('IDENTIFIER', 'weaponList')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'doublebarrel')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'weaponList')
('LBRACKET', '[')
('IDENTIFIER', 'weaponList')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'shotgun')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'Stealer')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'weaponList')
('LBRACKET', '[')
('IDENTIFIER', 'weaponList')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'm2_flamethrower')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'Kamikaze')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'weaponList')
('LBRACKET', '[')
('IDENTIFIER', 'weaponList')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'panzershark')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'default')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'weaponList')
('LBRACKET', '[')
('IDENTIFIER', 'weaponList')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'gewehr43')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'weaponList')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tWeaponList')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_randomize')
('LPAREN', '(')
('IDENTIFIER', 'weaponList')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'weapon')
('ASSIGNMENT', '=')
('IDENTIFIER', 'tWeaponList')
('LBRACKET', '[')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'tWeaponList')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'weapon')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'weaponList')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Do anything here we want to happen/check when AI spawn.')
('NEWLINE', '\n')
('IDENTIFIER', 'spawnEvent')
('LPAREN', '(')
('IDENTIFIER', 'classToSpawn')
('COMMA', ',')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'npcCount')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'npcClassInit')
('LPAREN', '(')
('IDENTIFIER', 'classToSpawn')
('COMMA', ',')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Do anything here we want to happen/check when AI die.')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isPlayer')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isAlive')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'player')
('IDENTIFIER', 'GetCurrentWeapon')
('LPAREN', '(')
('RPAREN', ')')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'm2_flamethrower')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'RadiusDamage')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', '200')
('COMMA', ',')
('IDENTIFIER', '20')
('COMMA', ',')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'kamikaze_boom')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'grenadeAmmo')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'npcCount')
('SUBTRACT', '-')
('SUBTRACT', '-')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Handles user triggering for spawners')
('NEWLINE', '\n')
('IDENTIFIER', 'spawnTrigThink')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_end')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'eLocos')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getStructArray')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'eLocos')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('COMMENT', ' No where to spawn :( ')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'howManyToSpawn')
('ASSIGNMENT', '=')
('IDENTIFIER', 'eLocos')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'howManyCanSpawn')
('ASSIGNMENT', '=')
('IDENTIFIER', 'allocationFree')
('LPAREN', '(')
('IDENTIFIER', 'howManyToSpawn')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'howManyCanSpawn')
('RPAREN', ')')
('LOGICAL_OR', '||')
('IDENTIFIER', 'howManyCanSpawn')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Fail safe incase we go into Zombie mode')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'ZombieMode')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'chooseClass')
('LPAREN', '(')
('IDENTIFIER', 'howManyCanSpawn')
('COMMA', ',')
('IDENTIFIER', 'eLocos')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', '4')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'allocationFree')
('LPAREN', '(')
('IDENTIFIER', 'howManyToSpawn')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' Notes:\n\t\tChecks how many AI can be spawned in when triggered\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'min')
('ASSIGNMENT', '=')
('IDENTIFIER', '2')
('SEMICOLON', ';')
('COMMENT', ' Always try to spawn at least # ')
('NEWLINE', '\n')
('IDENTIFIER', 'max')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetDvarInt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'payload_maxAi')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' AI allowed per map')
('NEWLINE', '\n')
('IDENTIFIER', 'allocationFree')
('ASSIGNMENT', '=')
('IDENTIFIER', 'max')
('SUBTRACT', '-')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'npcCount')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'allocationFree')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMENT', ' No room')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'allocationFree')
('GREATER_THAN', '>')
('IDENTIFIER', 'howManyToSpawn')
('RPAREN', ')')
('COMMENT', ' More than enough spawn locos')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'min')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', 'howManyToSpawn')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'min')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('LPAREN', '(')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', 'min')
('COMMA', ',')
('IDENTIFIER', 'howManyToSpawn')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('COMMENT', ' Enough room for each spawn loco')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'min')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', 'allocationFree')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'min')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('LPAREN', '(')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', 'min')
('COMMA', ',')
('IDENTIFIER', 'allocationFree')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Moves all the spawners to the same location to location.')
('NEWLINE', '\n')
('COMMENT', ' findSpawnerScript() chooses which actor to spawn from then moves them.')
('NEWLINE', '\n')
('COMMENT', " It won't/shouldn't telefrag since Spawners are only visual references. ; )")
('NEWLINE', '\n')
('IDENTIFIER', 'moveSpawners')
('LPAREN', '(')
('IDENTIFIER', 'eLoc')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'eLoc')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Takes the spawners back to their original location.')
('NEWLINE', '\n')
('COMMENT', ' Not really necessary but hey, might as well know where')
('NEWLINE', '\n')
('COMMENT', ' our spawners are at when not creating AI.')
('NEWLINE', '\n')
('IDENTIFIER', 'resetSpawners')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tLoc')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'tLoc')
('IDENTIFIER', 'getorigin')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Reset a single spawner back to its original location.')
('NEWLINE', '\n')
('IDENTIFIER', 'resetSpawner')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tLoc')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'tLoc')
('IDENTIFIER', 'getorigin')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' AI House Keeping')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Makes a guy fire at the players.')
('NEWLINE', '\n')
('IDENTIFIER', 'fireAtPlayers')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'temp')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'mixMeUp')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_randomize')
('LPAREN', '(')
('IDENTIFIER', 'temp')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'mixMeUp')
('LBRACKET', '[')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'mixMeUp')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goal')
('ASSIGNMENT', '=')
('IDENTIFIER', 'player')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'timeout')
('LPAREN', '(')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', '4')
('COMMA', ',')
('IDENTIFIER', '6')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill_any')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'timeout')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Makes a dog go straight for players.')
('NEWLINE', '\n')
('COMMENT', ' Woof! >: )')
('NEWLINE', '\n')
('IDENTIFIER', 'attackPlayers')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'temp')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'mixMeUp')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_randomize')
('LPAREN', '(')
('IDENTIFIER', 'temp')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'mixMeUp')
('LBRACKET', '[')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'mixMeUp')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'team')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'timeout')
('LPAREN', '(')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', '3')
('COMMA', ',')
('IDENTIFIER', '4')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill_any')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'timeout')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Makes an AI go straight for players.')
('NEWLINE', '\n')
('COMMENT', ' Watch out! : )')
('NEWLINE', '\n')
('IDENTIFIER', 'getToPlayers')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'temp')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_randomize')
('LPAREN', '(')
('IDENTIFIER', 'temp')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('IDENTIFIER', 'getOrigin')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'timeout')
('LPAREN', '(')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', '5')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill_any')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'timeout')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Makes an AI go straight for the payload.')
('NEWLINE', '\n')
('IDENTIFIER', 'getToCart')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('IDENTIFIER', 'getOrigin')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'payload')
('IDENTIFIER', 'getOrigin')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill_any')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', '5')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Disable all spawners for xyz reason.')
('NEWLINE', '\n')
('IDENTIFIER', 'disableSpawners')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'count')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Disable a spawner for xyz reason.')
('NEWLINE', '\n')
('IDENTIFIER', 'disableSpawner')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'count')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Enable all spawners for xyz reason.')
('NEWLINE', '\n')
('IDENTIFIER', 'enableSpawners')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'x')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'Enemy_Spawns')
('LBRACKET', '[')
('IDENTIFIER', 'x')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'count')
('ASSIGNMENT', '=')
('IDENTIFIER', '9999999')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Enable a spawner for xyz reason.')
('NEWLINE', '\n')
('IDENTIFIER', 'enableSpawner')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'count')
('ASSIGNMENT', '=')
('IDENTIFIER', '9999999')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' Co-Op Callbacks')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'onFirstPlayerConnect')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'connecting_first_player')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' put any calls here that you want to happen when the FIRST player connects to the game')
('NEWLINE', '\n')
('IDENTIFIER', 'println')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'First player connected to game.')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'onPlayerConnect')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('SEMICOLON', ';')
('SEMICOLON', ';')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'connecting')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'onPlayerDisconnect')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'onPlayerSpawned')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'onPlayerKilled')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' put any calls here that you want to happen when the player connects to the game')
('NEWLINE', '\n')
('IDENTIFIER', 'println')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Player connected to game.')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'score')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Dvars')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'setClientDvars')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ragdoll_explode_force')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '30000')
('COMMA', ',')
('NEWLINE', '\n')
('QUOTE', '"')
('STRING', 'jump_height')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '110')
('COMMA', ',')
('NEWLINE', '\n')
('QUOTE', '"')
('STRING', 'jump_slowdownEnable')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('NEWLINE', '\n')
('QUOTE', '"')
('STRING', 'player_sprintUnlimited')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('NEWLINE', '\n')
('QUOTE', '"')
('STRING', 'player_clipSizeMultiplier')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '1')
('DOT', '.')
('IDENTIFIER', '0')
('COMMA', ',')
('NEWLINE', '\n')
('QUOTE', '"')
('STRING', 'phys_gravity')
('QUOTE', '"')
('COMMA', ',')
('SUBTRACT', '-')
('IDENTIFIER', '400')
('COMMA', ',')
('NEWLINE', '\n')
('QUOTE', '"')
('STRING', 'ragdoll_bullet_force')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '500')
('COMMA', ',')
('NEWLINE', '\n')
('QUOTE', '"')
('STRING', 'ragdoll_explode_upbias')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '7')
('COMMA', ',')
('NEWLINE', '\n')
('QUOTE', '"')
('STRING', 'bg_fallDamageMinHeight')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '256')
('COMMA', ',')
('NEWLINE', '\n')
('QUOTE', '"')
('STRING', 'bg_fallDamageMaxHeight')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '512')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'onPlayerDisconnect')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'disconnect')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' put any calls here that you want to happen when the player disconnects from the game')
('NEWLINE', '\n')
('COMMENT', ' this is a good place to do any clean up you need to do')
('NEWLINE', '\n')
('IDENTIFIER', 'println')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Player disconnected from the game.')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'onPlayerSpawned')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'disconnect')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('SEMICOLON', ';')
('SEMICOLON', ';')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'spawned_player')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'takeallweapons')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'onPlayerSpawned_ChooseClass')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_loadout')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'set_laststand_pistol')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'colt')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'onPlayerSpawned_ChooseClass')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'class')
('ASSIGNMENT', '=')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'class')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('IDENTIFIER', '0')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('COMMENT', ' MG guy')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fg42_bipod')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveMaxAmmo')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fg42_bipod')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'mg42_bipod')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveMaxAmmo')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'mg42_bipod')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', '30cal_bipod')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveMaxAmmo')
('LPAREN', '(')
('QUOTE', '"')
('STRING', '30cal_bipod')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fraggrenade')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SwitchToWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fg42_bipod')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('IDENTIFIER', '1')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('COMMENT', ' Explosives guy')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'colt_dirty_harry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'm2_flamethrower')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fraggrenade')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'molotov')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panzershark')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveMaxAmmo')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panzershark')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SwitchToWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'colt_dirty_harry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('IDENTIFIER', '2')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('COMMENT', ' Maximum damage guy')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'doublebarrel_sawed_grip')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveMaxAmmo')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'doublebarrel_sawed_grip')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'doublebarrel')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveMaxAmmo')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'doublebarrel')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'shotgun')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveMaxAmmo')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'shotgun')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GiveWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fraggrenade')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SwitchToWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'doublebarrel_sawed_grip')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'onPlayerKilled')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'disconnect')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('SEMICOLON', ';')
('SEMICOLON', ';')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'killed_player')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' put any calls here that you want to happen when the player gets killed')
('NEWLINE', '\n')
('COMMENT', 'println( "Player killed at " + self.origin ); ')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' Co-Op House Keeping')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'player_spawns')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', " Notes:\n\t\tAt the start of the map place players at spots.\n\t\tOtherwise they'll spawn inside each other.\n\t")
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'structs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getStructArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_spawn')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'all_players_connected')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'setorigin')
('LPAREN', '(')
('IDENTIFIER', 'structs')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'setplayerangles')
('LPAREN', '(')
('IDENTIFIER', 'structs')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'do_milk_drops_on_camera_for_time')
('LPAREN', '(')
('IDENTIFIER', 'wait_time')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' Notes:\n\t\tIf a player gets hit with milk.\n\t\t\tFrom Pel2. Modified by Sparks.\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players_water_drops_on')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'wait_time')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players_water_drops_off')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players_water_drops_on')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'setwaterdrops')
('LPAREN', '(')
('IDENTIFIER', '300')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players_water_drops_off')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'setwaterdrops')
('LPAREN', '(')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' Anims')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#using_animtree(')
('QUOTE', '"')
('STRING', 'supply_drop')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_supply_drop_anims')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' Notes:\n\t\tParachute animations for the airborne dogs.\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'drop')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'drop')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'o_supplydrop_loop')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'drop')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'landing')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'o_supplydrop_landing')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'drop')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'landingb')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'o_supplydrop_landingB')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'drop1')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'drop')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'o_supplydrop_loop')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'drop1')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'landing')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'o_supplydrop_landing')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'drop1')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'landingb')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'o_supplydrop_landingB')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('EOF', None)