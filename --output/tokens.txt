('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'common_scripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#using_animtree(')
('QUOTE', '"')
('STRING', 'generic_human')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'init')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_move_speed')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_health')
('ASSIGNMENT', '=')
('IDENTIFIER', '150')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_eyes_limited')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_eyes_disabled')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'getdvarint')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'g_allzombieseyeglow')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_eyes_limited')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombies')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_spawner')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'later_rounds')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getentarray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'later_round_spawners')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombies')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_combine')
('LPAREN', '(')
('IDENTIFIER', 'zombies')
('COMMA', ',')
('IDENTIFIER', 'later_rounds')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'zombies')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'is_spawner_targeted_by_blocker')
('LPAREN', '(')
('IDENTIFIER', 'zombies')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'zombies')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'locked_spawner')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'zombies')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'zombie_spawn_init')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'zombies')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'zombie_rise')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#using_animtree(')
('QUOTE', '"')
('STRING', 'generic_human')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'is_spawner_targeted_by_blocker')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('DOT', '.')
('IDENTIFIER', 'targetname')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'targeters')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('DOT', '.')
('IDENTIFIER', 'targetname')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'target')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'targeters')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'targeters')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'targetname')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'zombie_door')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'targeters')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'targetname')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'zombie_debris')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'result')
('ASSIGNMENT', '=')
('IDENTIFIER', 'is_spawner_targeted_by_blocker')
('LPAREN', '(')
('IDENTIFIER', 'targeters')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'result')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' set up zombie walk cycles')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_spawn_init')
('LPAREN', '(')
('IDENTIFIER', 'animname_set')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'animname_set')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'animname_set')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'targetname')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'zombie')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'animname_set')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'zombie')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'allowdeath')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('COMMENT', ' allows death during animscripted calls')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'gib_override')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('COMMENT', ' needed to make sure this guy does gibs')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'is_zombie')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('COMMENT', ' needed for melee.gsc in the animscripts')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'has_legs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('COMMENT', ' Sumeet - This tells the zombie that he is allowed to stand anymore or not, gibbing can take ')
('NEWLINE', '\n')
('COMMENT', ' out both legs and then the only allowed stance should be prone.')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'allowedStances')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'gibbed')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'head_gibbed')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' might need this so co-op zombie players cant block zombie pathing')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'PushPlayer')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '\tself.meleeRange = 128; ')
('NEWLINE', '\n')
('COMMENT', '\tself.meleeRangeSq = anim.meleeRange * anim.meleeRange; ')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'animscripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'shared')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'placeWeaponOn')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'primaryweapon')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'none')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' This isn\'t working, might need an "empty" weapon')
('NEWLINE', '\n')
('COMMENT', 'self animscripts\\shared::placeWeaponOn( self.weapon, "none" ); ')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'disableArrivals')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'disableExits')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'grenadeawareness')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'badplaceawareness')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreSuppression')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'suppressionThreshold')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'noDodgeMove')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'dontShootWhileMoving')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'pathenemylookahead')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'badplaceawareness')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'chatInitialized')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'disable_pain')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxhealth')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_health')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_health')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'dropweapon')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_death_event')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' We need more script/code to get this to work properly')
('NEWLINE', '\n')
('COMMENT', '\tself add_to_spectate_list();')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'random_tan')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_zombie_run_cycle')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_think')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_gib_on_damage')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_damage_failsafe')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' MM - mixed zombies test')
('NEWLINE', '\n')
('COMMENT', ' \tif ( flag( "crawler_round" ) || ')
('NEWLINE', '\n')
('COMMENT', ' \t\t ( IsDefined( level.mixed_rounds_enabled ) && level.mixed_rounds_enabled == 1 &&')
('NEWLINE', '\n')
('COMMENT', ' \t\t   level.zombie_total > 10 && ')
('NEWLINE', '\n')
('COMMENT', ' \t\t   level.round_number > 5 && RandomInt(100) < 10 ) )')
('NEWLINE', '\n')
('COMMENT', ' \t{')
('NEWLINE', '\n')
('COMMENT', ' \t\tself thread make_crawler();')
('NEWLINE', '\n')
('COMMENT', ' \t}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\tself thread zombie_head_gib(); ')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'delayed_zombie_eye_glow')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' delayed eye glow for ground crawlers (the eyes floated above the ground before the anim started)')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathFunction')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'zombie_death_animscript')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'flame_damage_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_spawn_init -> Spawned = ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_init_done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', "\ndelayed_zombie_eye_glow:\nFixes problem where zombies that climb out of the ground are warped to their start positions\nand their eyes glowed above the ground for a split second before their animation started even\nthough the zombie model is hidden. and applying this delay to all the zombies doesn't really matter.\n")
('NEWLINE', '\n')
('IDENTIFIER', 'delayed_zombie_eye_glow')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('DOT', '.')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_eye_glow')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_damage_failsafe')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'continue_failsafe_damage')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'should only be for zombie exploits')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'istouching')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'old_org')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'continue_failsafe_damage')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', "make sure player doesn't die instantly after getting touched by a zombie.")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemy')
('RPAREN', ')')
('LOGICAL_OR', '||')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemy')
('IDENTIFIER', 'hasperk')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'specialty_armorvest')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'istouching')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemy')
('RPAREN', ')')
('NEWLINE', '\n')
('LOGICAL_AND', '&&')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemy')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_laststand')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'player_is_in_laststand')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isalive')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distancesquared')
('LPAREN', '(')
('IDENTIFIER', 'old_org')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('LPAREN', '(')
('IDENTIFIER', '35')
('MULTIPLY', '*')
('IDENTIFIER', '35')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'setsaveddvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_deathInvulnerableTime')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemy')
('IDENTIFIER', 'DoDamage')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemy')
('DOT', '.')
('IDENTIFIER', 'health')
('PLUS', '+')
('IDENTIFIER', '1000')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemy')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'riflebullet')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'setsaveddvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_deathInvulnerableTime')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'startInvulnerableTime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'continue_failsafe_damage')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue_failsafe_damage')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'set_zombie_run_cycle')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_speed')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'death_anims')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_zombie_deaths')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'death_anims')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'if(level.round_number < 3)')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\tself.zombie_move_speed = "walk";')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_move_speed')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'walk')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'var')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '8')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'walk')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'var')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'walk')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'var')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'run')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'var')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '6')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'run')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'var')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'run')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'var')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'sprint')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'var')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sprint')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'var')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'sprint')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'var')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'set_run_speed')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_move_speed')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_move_speed')
('PLUS', '+')
('IDENTIFIER', '35')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\tself thread print_run_speed( rand );')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'rand')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', '35')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_move_speed')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'walk')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'rand')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', '70')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_move_speed')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'run')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_move_speed')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'sprint')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' this is the main zombie think thread that starts when they spawn in')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_think')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'assert')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'self')
('IDENTIFIER', 'enemy_is_dog')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'node = level.exterior_goals[randomint( level.exterior_goals.size )]; ')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' MM - 5/8/9 Add ability for risers to find_flesh immediately after spawning if the')
('NEWLINE', '\n')
('COMMENT', '\trise struct has the script_noteworthy "find_flesh"')
('NEWLINE', '\n')
('IDENTIFIER', 'rise_struct_string')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'CHRIS_P - test dudes rising from ground ')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'GetDVarInt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_rise_test')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_string')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_string')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'riser')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'do_rise')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'self notify("do_rise");')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'risen')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'rise_struct_string')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'no_rise')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'desired_nodes')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_barrier_search_dist_override')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'max_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_barrier_search_dist_override')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'max_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '500')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_forcegoal')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_forcegoal')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'desired_origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_desired_origin')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'AssertEx')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'desired_origin')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'Spawner @ ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' has a script_forcegoal but did not find a target')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'desired_origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getclosest')
('LPAREN', '(')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'exterior_goals')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'node')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_think -> #1 entrance (script_forcegoal) origin = ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' DCS: for riser zombies to go to a door instead of to player (see next else if).')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'nazi_zombie_factory')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'rise_struct_string')
('RPAREN', ')')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'rise_struct_string')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'riser_door')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'desired_origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_desired_origin')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'desired_origin')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'desired_origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Get the 3 closest nodes')
('NEWLINE', '\n')
('IDENTIFIER', 'nodes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_array_of_closest')
('LPAREN', '(')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'exterior_goals')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Figure out the distances between them, if any of them are greater than 256 units compared to the previous, drop it')
('NEWLINE', '\n')
('IDENTIFIER', 'desired_nodes')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'prev_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'Distance')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'Distance')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'dist')
('SUBTRACT', '-')
('IDENTIFIER', 'prev_dist')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', 'max_dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'prev_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'dist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'desired_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'desired_nodes')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'desired_nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'desired_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'desired_nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'desired_nodes')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_think -> #1 entrance origin = ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'node')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Incase the guy does not move from spawn, then go to the closest one instead')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_assure_node')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' JMA - this is used in swamp to spawn outdoor zombies and immediately rush the player')
('NEWLINE', '\n')
('COMMENT', ' JMA - if riser becomes a non-riser, make sure they go to a barrier first instead of chasing a player')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'nazi_zombie_factory')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'zombie_test_map')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('NEWLINE', '\n')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_string')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_string')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'zombie_chaser')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_OR', '||')
('NEWLINE', '\n')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'rise_struct_string')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'rise_struct_string')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'find_flesh')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_setup_attack_properties')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'if the zombie has a target, make them go there first')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'end_at_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetNode')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'end_at_node')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setgoalnode')
('LPAREN', '(')
('IDENTIFIER', 'end_at_node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'find_flesh')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'desired_origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_desired_origin')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'desired_origin')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'desired_origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Get the 3 closest nodes')
('NEWLINE', '\n')
('IDENTIFIER', 'nodes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_array_of_closest')
('LPAREN', '(')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'exterior_goals')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Figure out the distances between them, if any of them are greater than 256 units compared to the previous, drop it')
('NEWLINE', '\n')
('IDENTIFIER', 'desired_nodes')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'prev_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'Distance')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'Distance')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'dist')
('SUBTRACT', '-')
('IDENTIFIER', 'prev_dist')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', 'max_dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'prev_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'dist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'desired_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'desired_nodes')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'desired_nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'desired_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'desired_nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'desired_nodes')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_think -> #1 entrance origin = ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'node')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Incase the guy does not move from spawn, then go to the closest one instead')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_assure_node')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'AssertEx')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'node')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'Did not find a node!!! [Should not see this!]')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'draw_line_ent_to_pos')
('LPAREN', '(')
('IDENTIFIER', 'self')
('COMMA', ',')
('IDENTIFIER', 'node')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'node')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_goto_entrance')
('LPAREN', '(')
('IDENTIFIER', 'node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'get_desired_origin')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ent')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ent')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getstruct')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ent')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetNode')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'AssertEx')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'Cannot find the targeted ent/node/struct, \\')
('QUOTE', '"')
('QUOTE', '"')
('STRING', ' + self.target + ')
('QUOTE', '"')
('PATH_SEPARATOR', '\\')
('QUOTE', '"')
('STRING', ' at ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'ent')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_goto_entrance')
('LPAREN', '(')
('IDENTIFIER', 'node')
('COMMA', ',')
('IDENTIFIER', 'endon_bad_path')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'assert')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'self')
('IDENTIFIER', 'enemy_is_dog')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'intermission')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'endon_bad_path')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'endon_bad_path')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' If we cannot go to the goal, then end...')
('NEWLINE', '\n')
('COMMENT', ' Used from find_flesh')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'bad_path')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_goto_entrance -> start goto entrance ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'node')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'got_to_entrance')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '128')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('IDENTIFIER', 'node')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'got_to_entrance')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_goto_entrance -> reached goto entrance ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'node')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Guy should get to goal and tear into building until all barrier chunks are gone')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'tear_into_building')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'REMOVED THIS, WAS CAUSING ISSUES')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'clip')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'if(!isDefined(self.first_node.clip.disabled) || !self.first_node.clip.disabled)')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\tself.first_node.clip disable_trigger();')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'clip')
('IDENTIFIER', 'connectpaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " here is where they zombie would play the traversal into the building( if it's a window )")
('NEWLINE', '\n')
('COMMENT', ' and begin the player seek logic')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_setup_attack_properties')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'PI CHANGE - force the zombie to go over the traversal near their goal node if desired')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'nazi_zombie_sumpf')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'temp_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetNode')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'temp_node')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'temp_node')
('DOT', '.')
('IDENTIFIER', 'target')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'end_at_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetNode')
('LPAREN', '(')
('IDENTIFIER', 'temp_node')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'end_at_node')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setgoalnode')
('LPAREN', '(')
('IDENTIFIER', 'end_at_node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', 'END PI CHANGE')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'find_flesh')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_assure_node')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'intermission')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'start_pos')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_bad_path')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_assure_node -> assigned assured node = ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'println')
('LPAREN', '(')
('QUOTE', '"')
('STRING', '^1Zombie @ ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' did not move for 1 second. Going to next closest node @ ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'draw_line_ent_to_pos')
('LPAREN', '(')
('IDENTIFIER', 'self')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', " CHRISP - must add an additional check, since the 'self.entrance_nodes' array is not dynamically updated to accomodate for entrance points that can be turned on and off")
('NEWLINE', '\n')
('COMMENT', " only do this if it's the asylum map")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'nazi_zombie_asylum')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'nazi_zombie_sumpf')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'nazi_zombie_factory')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', ' Get more nodes and try again')
('NEWLINE', '\n')
('IDENTIFIER', 'nodes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_array_of_closest')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'exterior_goals')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('IDENTIFIER', '20')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'nodes')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_bad_path')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_assure_node -> assigned assured node = ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'println')
('LPAREN', '(')
('QUOTE', '"')
('STRING', '^1Zombie @ ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' did not move for 1 second. Going to next closest node @ ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'draw_line_ent_to_pos')
('LPAREN', '(')
('IDENTIFIER', 'self')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'entrance_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_assure_node -> failed to find a good entrance point')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'assertmsg( "^1Zombie @ " + self.origin + " did not find a good entrance point... Please fix pathing or Entity setup" );')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '20')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'iprintln( "^1Zombie @ " + self.origin + " did not find a good entrance point... Please fix pathing or Entity setup" );')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DoDamage')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('PLUS', '+')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_bad_path')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_bad_path_notify')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_bad_path_timeout')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_bad_path')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_bad_path')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_zombie_bad_path')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_bad_path')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_bad_path_notify')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_zombie_bad_path')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'bad_path')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_bad_path')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_bad_path_timeout')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_zombie_bad_path')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_bad_path')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' zombies are trying to get at player contained behind barriers, so the barriers')
('NEWLINE', '\n')
('COMMENT', ' need to come down')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_into_building')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'chrisp - added this ')
('NEWLINE', '\n')
('COMMENT', 'checkpass = false;')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tear_into_building -> start')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'no_blocker')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'target')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'all_chunks_destroyed')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'barrier_chunks')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tear_into_building -> all chunks destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Pick a spot to tear down')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'get_attack_spot')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tear_into_building -> Could not find an attack spot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacking_spot')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '\tMM- 05/09')
('NEWLINE', '\n')
('COMMENT', '\tIf you wait for "orientdone", you NEED to also have a timeout.')
('NEWLINE', '\n')
('COMMENT', '\tOtherwise, zombies could get stuck waiting to do their facing.')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill_notify_or_timeout')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'orientdone')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tear_into_building -> Reach position and orientated')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' chrisp - do one final check to make sure that the boards are still torn down')
('NEWLINE', '\n')
('COMMENT', ' this *mostly* prevents the zombies from coming through the windows as you are boarding them up. ')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'all_chunks_destroyed')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'barrier_chunks')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tear_into_building -> all chunks destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'attack_spots_taken')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'attack_spots_taken')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Now tear down boards')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'chunk')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_closest_non_destroyed_chunk')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'barrier_chunks')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'attack_spots_taken')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'attack_spots_taken')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tear_into_building -> animating')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_tear_anim')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('COMMA', ',')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'target_by_zombie')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'AnimScripted')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tear_anim')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('IDENTIFIER', 'tear_anim')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_tear_notetracks')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tear_anim')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'chunk')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'chris - adding new window attack & gesture animations ;)')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'nazi_zombie_prototype')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'attack')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'should_attack_player_thru_boards')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'attack')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'attack')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'has_legs')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'do_a_taunt')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', 'chrisp - fix the extra tear anim bug')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'all_chunks_destroyed')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'barrier_chunks')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'attack_spots_taken')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'attack_spots_taken')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'reset_attack_spot')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '------------------------------------\nchecks to see if the zombie should \ndo a taunt when tearing thru the boards\n------------------------------------')
('NEWLINE', '\n')
('IDENTIFIER', 'do_a_taunt')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'has_legs')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'old_origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'getdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_taunt_freq')
('QUOTE', '"')
('RPAREN', ')')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_taunt_freq')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '5')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'freq')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getdvarint')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_taunt_freq')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'freq')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '100')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'anime')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_zombie_board_taunt')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'animscripted')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_taunt')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('IDENTIFIER', 'anime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'getanimlength')
('LPAREN', '(')
('IDENTIFIER', 'anime')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'teleport')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'old_origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '------------------------------------\nchecks to see if the players are near\nthe entrance and tries to attack them \nthru the boards. 50% chance\n------------------------------------')
('NEWLINE', '\n')
('IDENTIFIER', 'should_attack_player_thru_boards')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'no board attacks if they are crawlers')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'has_legs')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'getdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_reachin_freq')
('QUOTE', '"')
('RPAREN', ')')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_reachin_freq')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '50')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'freq')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getdvarint')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_reachin_freq')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'attack')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance2d')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', '72')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'attack')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'attack')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'freq')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '100')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'iprintln("checking attack");')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'check to see if the guy is left, right, or center ')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'old_origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacking_spot_index')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMENT', "he's in the center")
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '100')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '50')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'animscripted')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'window_melee')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_window_attack_arm_l_out')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'animscripted')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'window_melee')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_window_attack_arm_r_out')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'window_notetracks')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'window_melee')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacking_spot_index')
('EQUALS_TO', '==')
('IDENTIFIER', '2')
('RPAREN', ')')
('COMMENT', "<-- he's to the left")
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'animscripted')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'window_melee')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_window_attack_arm_r_out')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'window_notetracks')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'window_melee')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacking_spot_index')
('EQUALS_TO', '==')
('IDENTIFIER', '1')
('RPAREN', ')')
('COMMENT', "<-- he's to the right")
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'animscripted')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'window_melee')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_window_attack_arm_l_out')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'window_notetracks')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'window_melee')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'window_notetracks')
('LPAREN', '(')
('IDENTIFIER', 'msg')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('IDENTIFIER', 'msg')
('COMMA', ',')
('IDENTIFIER', 'notetrack')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'notetrack')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'end')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'self waittill("end");')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'teleport')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'old_origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'notetrack')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'fire')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'melee')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'crash_into_building')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tear_into_building -> start')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'no_blocker')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'target')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'all_chunks_destroyed')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'barrier_chunks')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tear_into_building -> all chunks destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Pick a spot to tear down')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'get_attack_spot')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tear_into_building -> Could not find an attack spot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacking_spot')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tear_into_building -> Reach position and orientated')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Now tear down boards')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'chunk')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_closest_non_destroyed_chunk')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'barrier_chunks')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'attack_spots_taken')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'attack_spots_taken')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tear_into_building -> crash')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'tear_anim = get_tear_anim( chunk ); ')
('NEWLINE', '\n')
('COMMENT', 'self AnimScripted( "tear_anim", self.origin, self.first_node.angles, tear_anim );')
('NEWLINE', '\n')
('COMMENT', 'self zombie_tear_notetracks( "tear_anim", chunk, self.first_node );')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'wood_chunk_destory')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'wood_chunk_destory')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '20')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '20')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '10')
('RPAREN', ')')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'wood_chunk_destory')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '40')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '40')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '20')
('RPAREN', ')')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_blockers_new')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'remove_chunk')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'all_chunks_destroyed')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'barrier_chunks')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'EarthQuake')
('LPAREN', '(')
('IDENTIFIER', 'randomfloatrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '8')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', '300')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'clip')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'clip')
('IDENTIFIER', 'ConnectPaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'clip')
('IDENTIFIER', 'disable_trigger')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'barrier_chunks')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'first_node')
('DOT', '.')
('IDENTIFIER', 'barrier_chunks')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'ConnectPaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'EarthQuake')
('LPAREN', '(')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '15')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', '200')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'reset_attack_spot')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'reset_attack_spot')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacking_node')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacking_node')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacking_spot_index')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'node')
('DOT', '.')
('IDENTIFIER', 'attack_spots_taken')
('LBRACKET', '[')
('IDENTIFIER', 'index')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacking_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacking_spot_index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'get_attack_spot')
('LPAREN', '(')
('IDENTIFIER', 'node')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_attack_spot_index')
('LPAREN', '(')
('IDENTIFIER', 'node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'index')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacking_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'node')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacking_spot_index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'index')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'node')
('DOT', '.')
('IDENTIFIER', 'attack_spots_taken')
('LBRACKET', '[')
('IDENTIFIER', 'index')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacking_spot')
('ASSIGNMENT', '=')
('IDENTIFIER', 'node')
('DOT', '.')
('IDENTIFIER', 'attack_spots')
('LBRACKET', '[')
('IDENTIFIER', 'index')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'get_attack_spot_index')
('LPAREN', '(')
('IDENTIFIER', 'node')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'indexes')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'node')
('DOT', '.')
('IDENTIFIER', 'attack_spots')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'node')
('DOT', '.')
('IDENTIFIER', 'attack_spots_taken')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'indexes')
('LBRACKET', '[')
('IDENTIFIER', 'indexes')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'indexes')
('DOT', '.')
('IDENTIFIER', 'size')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'indexes')
('LBRACKET', '[')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'indexes')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_tear_notetracks')
('LPAREN', '(')
('IDENTIFIER', 'msg')
('COMMA', ',')
('IDENTIFIER', 'chunk')
('COMMA', ',')
('IDENTIFIER', 'node')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'chunk')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'check_for_zombie_death')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('IDENTIFIER', 'msg')
('COMMA', ',')
('IDENTIFIER', 'notetrack')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'notetrack')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'end')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'notetrack')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'board')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'destroyed')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'lastchunk_destroy_time')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getTime')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'wood_chunk_destory')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'wood_chunk_destory')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '20')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '20')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '10')
('RPAREN', ')')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'wood_chunk_destory')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '40')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '40')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '20')
('RPAREN', ')')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_blockers_new')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'remove_chunk')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('COMMA', ',')
('IDENTIFIER', 'node')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'check_for_zombie_death')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'target_by_zombie')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'get_tear_anim')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('COMMA', ',')
('IDENTIFIER', 'zombo')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["left"]["one"] = %ai_zombie_boardtear_l_1;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["left"]["two"] = %ai_zombie_boardtear_l_2;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["left"]["three"] = %ai_zombie_boardtear_l_3;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["left"]["four"] = %ai_zombie_boardtear_l_4;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["left"]["five"] = %ai_zombie_boardtear_l_5;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["left"]["six"] = %ai_zombie_boardtear_l_6;')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["middle"]["one"] = %ai_zombie_boardtear_m_1;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["middle"]["two"] = %ai_zombie_boardtear_m_2;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["middle"]["three"] = %ai_zombie_boardtear_m_3;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["middle"]["four"] = %ai_zombie_boardtear_m_4;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["middle"]["five"] = %ai_zombie_boardtear_m_5;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["middle"]["six"] = %ai_zombie_boardtear_m_6;')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["right"]["one"] = %ai_zombie_boardtear_r_1;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["right"]["two"] = %ai_zombie_boardtear_r_2;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["right"]["three"] = %ai_zombie_boardtear_r_3;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["right"]["four"] = %ai_zombie_boardtear_r_4;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["right"]["five"] = %ai_zombie_boardtear_r_5;')
('NEWLINE', '\n')
('COMMENT', 'level._zombie_board_tearing["right"]["six"] = %ai_zombie_boardtear_r_6;')
('NEWLINE', '\n')
('IDENTIFIER', 'anims')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'anims')
('LBRACKET', '[')
('IDENTIFIER', 'anims')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_door_tear_left')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'anims')
('LBRACKET', '[')
('IDENTIFIER', 'anims')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_door_tear_right')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anims')
('LBRACKET', '[')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'anims')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'has_legs')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'zombo')
('DOT', '.')
('IDENTIFIER', 'attacking_spot_index')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '1')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_m_1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '2')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_m_2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '3')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_m_3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '4')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_m_4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '5')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_m_5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '6')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_m_6')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'zombo')
('DOT', '.')
('IDENTIFIER', 'attacking_spot_index')
('EQUALS_TO', '==')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '1')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_r_1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '3')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_r_3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '4')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_r_4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '5')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_r_5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '6')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_r_6')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '2')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_r_2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'zombo')
('DOT', '.')
('IDENTIFIER', 'attacking_spot_index')
('EQUALS_TO', '==')
('IDENTIFIER', '2')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '1')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_l_1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '2')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_l_2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '4')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_l_4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '5')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_l_5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '6')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_l_6')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '3')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_l_3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'z_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'origin')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('SUBTRACT', '-')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'z_dist')
('GREATER_THAN', '>')
('IDENTIFIER', '70')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_door_tear_high')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'z_dist')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '40')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_door_tear_low')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'anims')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'anims')
('LBRACKET', '[')
('IDENTIFIER', 'anims')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_door_tear_left')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'anims')
('LBRACKET', '[')
('IDENTIFIER', 'anims')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_door_tear_right')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anims')
('LBRACKET', '[')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'anims')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'zombo')
('DOT', '.')
('IDENTIFIER', 'attacking_spot_index')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '1')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_m_1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '2')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_m_2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '3')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_m_3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '4')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_m_4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '5')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_m_5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '6')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_m_6')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'zombo')
('DOT', '.')
('IDENTIFIER', 'attacking_spot_index')
('EQUALS_TO', '==')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '1')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_r_1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '3')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_r_3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '4')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_r_4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '5')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_r_5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '6')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_r_6')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '2')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_r_2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'zombo')
('DOT', '.')
('IDENTIFIER', 'attacking_spot_index')
('EQUALS_TO', '==')
('IDENTIFIER', '2')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '1')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_l_1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '2')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_l_2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '4')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_l_4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '5')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_l_5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '6')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_l_6')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chunk')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '3')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_boardtear_crawl_l_3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'anims')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'anims')
('LBRACKET', '[')
('IDENTIFIER', 'anims')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_attack_crawl')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'anims')
('LBRACKET', '[')
('IDENTIFIER', 'anims')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_attack_crawl_lunge')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tear_anim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anims')
('LBRACKET', '[')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'anims')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'tear_anim')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'cap_zombie_head_gibs')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_head_gibs_per_frame')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_head_gibs_per_frame')
('ASSIGNMENT', '=')
('IDENTIFIER', '4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'head_gibs_this_frame')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_head_gib')
('LPAREN', '(')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'is_german_build')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'head_gibbed')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'head_gibbed')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'head_gibs_this_frame')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'cap_zombie_head_gibs')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'head_gibs_this_frame')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_head_gibs_per_frame')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'head_gibs_this_frame')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'head_gibbed')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_eye_glow_stop')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'size')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetAttachSize')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'model')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetAttachModelName')
('LPAREN', '(')
('IDENTIFIER', 'i')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsSubStr')
('LPAREN', '(')
('IDENTIFIER', 'model')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'head')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' SRS 9/2/2008: wet em up')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'headshot_blood_fx')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'hatmodel')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'detach')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'hatModel')
('COMMA', ',')
('QUOTE', '"')
('STRING', '')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'play_sound_on_ent')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_head_gib')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'Detach')
('LPAREN', '(')
('IDENTIFIER', 'model')
('COMMA', ',')
('QUOTE', '"')
('STRING', '')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'Attach')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'char_ger_honorgd_zomb_behead')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'damage_over_time')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('MULTIPLY', '*')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'damage_over_time')
('LPAREN', '(')
('IDENTIFIER', 'dmg')
('COMMA', ',')
('IDENTIFIER', 'delay')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsAlive')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsPlayer')
('LPAREN', '(')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'attacker')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'delay')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DoDamage')
('LPAREN', '(')
('IDENTIFIER', 'dmg')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DoDamage')
('LPAREN', '(')
('IDENTIFIER', 'dmg')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' SRS 9/2/2008: reordered checks, added ability to gib heads with airburst grenades')
('NEWLINE', '\n')
('IDENTIFIER', 'head_should_gib')
('LPAREN', '(')
('IDENTIFIER', 'attacker')
('COMMA', ',')
('IDENTIFIER', 'type')
('COMMA', ',')
('IDENTIFIER', 'point')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'is_german_build')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'head_gibbed')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' check if the attacker was a player')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsPlayer')
('LPAREN', '(')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " check the enemy's health")
('NEWLINE', '\n')
('IDENTIFIER', 'low_health_percent')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('DIVIDE', '/')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxhealth')
('RPAREN', ')')
('MULTIPLY', '*')
('IDENTIFIER', '100')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'low_health_percent')
('GREATER_THAN', '>')
('IDENTIFIER', '10')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'weapon')
('ASSIGNMENT', '=')
('IDENTIFIER', 'attacker')
('IDENTIFIER', 'GetCurrentWeapon')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' SRS 9/2/2008: check for damage type')
('NEWLINE', '\n')
('COMMENT', '  - most SMGs use pistol bullets')
('NEWLINE', '\n')
('COMMENT', '  - projectiles = rockets, raygun')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'type')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'MOD_RIFLE_BULLET')
('QUOTE', '"')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'type')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'MOD_PISTOL_BULLET')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', " maybe it's ok, let's see if it's a grenade")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_GRENADE')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_GRENADE_SPLASH')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'Distance')
('LPAREN', '(')
('IDENTIFIER', 'point')
('COMMA', ',')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetTagOrigin')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'j_head')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '55')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' the grenade airburst close to the head so return true')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_PROJECTILE')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'Distance')
('LPAREN', '(')
('IDENTIFIER', 'point')
('COMMA', ',')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetTagOrigin')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'j_head')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '10')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', " shottys don't give a testable damage type but should still gib heads")
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'WeaponClass')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'spread')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' check location now that we\'ve checked for grenade damage (which reports "none" as a location)')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'self')
('IDENTIFIER', 'animscripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'utility')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'damageLocationIsAny')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'head')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'helmet')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'neck')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' check weapon - don\'t want "none", pistol, or flamethrower')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'none')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'WeaponClass')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'pistol')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'WeaponIsGasWeapon')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' does blood fx for fun and to mask head gib swaps')
('NEWLINE', '\n')
('IDENTIFIER', 'headshot_blood_fx')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'is_mature')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'fxTag')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'j_neck')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'fxOrigin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetTagOrigin')
('LPAREN', '(')
('IDENTIFIER', 'fxTag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'upVec')
('ASSIGNMENT', '=')
('IDENTIFIER', 'AnglesToUp')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetTagAngles')
('LPAREN', '(')
('IDENTIFIER', 'fxTag')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'forwardVec')
('ASSIGNMENT', '=')
('IDENTIFIER', 'AnglesToForward')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetTagAngles')
('LPAREN', '(')
('IDENTIFIER', 'fxTag')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' main head pop fx')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFX')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'headshot')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'fxOrigin')
('COMMA', ',')
('IDENTIFIER', 'forwardVec')
('COMMA', ',')
('IDENTIFIER', 'upVec')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFX')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'headshot_nochunks')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'fxOrigin')
('COMMA', ',')
('IDENTIFIER', 'forwardVec')
('COMMA', ',')
('IDENTIFIER', 'upVec')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_tesla')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'enemy_killed_by_tesla')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFxOnTag')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'tesla_head_light')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('COMMA', ',')
('IDENTIFIER', 'fxTag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayFxOnTag')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'bloodspurt')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('COMMA', ',')
('IDENTIFIER', 'fxTag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' gib limbs if enough firepower occurs')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_gib_on_damage')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', '\tself endon( "death" ); ')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'amount')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('COMMA', ',')
('IDENTIFIER', 'direction_vec')
('COMMA', ',')
('IDENTIFIER', 'point')
('COMMA', ',')
('IDENTIFIER', 'type')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_should_gib')
('LPAREN', '(')
('IDENTIFIER', 'amount')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('COMMA', ',')
('IDENTIFIER', 'type')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'head_should_gib')
('LPAREN', '(')
('IDENTIFIER', 'attacker')
('COMMA', ',')
('IDENTIFIER', 'type')
('COMMA', ',')
('IDENTIFIER', 'point')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'type')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'MOD_BURNED')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_head_gib')
('LPAREN', '(')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'attacker')
('DOT', '.')
('IDENTIFIER', 'headshot_count')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'attacker')
('DOT', '.')
('IDENTIFIER', 'headshot_count')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'attacker')
('DOT', '.')
('IDENTIFIER', 'headshot_count')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', 'stats tracking')
('NEWLINE', '\n')
('IDENTIFIER', 'attacker')
('DOT', '.')
('IDENTIFIER', 'stats')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'headshots')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'attacker')
('DOT', '.')
('IDENTIFIER', 'headshot_count')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'attacker')
('DOT', '.')
('IDENTIFIER', 'stats')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_gibs')
('QUOTE', '"')
('RBRACKET', ']')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'gibbed')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' The head_should_gib() above checks for this, so we should not randomly gib if shot in the head')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'animscripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'utility')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'damageLocationIsAny')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'head')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'helmet')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'neck')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'damageLocation')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'torso_upper')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'torso_lower')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('COMMENT', ' HACK the torso that gets swapped for guts also removes the left arm')
('NEWLINE', '\n')
('COMMENT', '  so we need to sometimes do another ref')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'guts')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_arm')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'right_arm_upper')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'right_arm_lower')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'right_hand')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('COMMENT', 'if( IsDefined( self.left_arm_gibbed ) )')
('NEWLINE', '\n')
('COMMENT', '\trefs[refs.size] = "no_arms"; ')
('NEWLINE', '\n')
('COMMENT', 'else')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_arm')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'self.right_arm_gibbed = true; ')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'left_arm_upper')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'left_arm_lower')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'left_hand')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('COMMENT', 'if( IsDefined( self.right_arm_gibbed ) )')
('NEWLINE', '\n')
('COMMENT', '\trefs[refs.size] = "no_arms"; ')
('NEWLINE', '\n')
('COMMENT', 'else')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'left_arm')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'self.left_arm_gibbed = true; ')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'right_leg_upper')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'right_leg_lower')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'right_foot')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' Addition "right_leg" refs so that the no_legs happens less and is more rare')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'no_legs')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'left_leg_upper')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'left_leg_lower')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'left_foot')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' Addition "left_leg" refs so that the no_legs happens less and is more rare')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'left_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'left_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'left_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'no_legs')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'default')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'damageLocation')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'none')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' SRS 9/7/2008: might be a nade or a projectile')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_GRENADE')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_GRENADE_SPLASH')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_PROJECTILE')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' ... in which case we have to derive the ref ourselves')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'derive_damage_refs')
('LPAREN', '(')
('IDENTIFIER', 'point')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'guts')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_arm')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'left_arm')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'left_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'no_legs')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('ASSIGNMENT', '=')
('IDENTIFIER', 'animscripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'death')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'get_random')
('LPAREN', '(')
('IDENTIFIER', 'refs')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " Don't stand if a leg is gone")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'no_legs')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'right_leg')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'left_leg')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'has_legs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'AllowedStances')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'crouch')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'which_anim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'no_legs')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '100')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '50')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl_hand_1')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl_hand_1')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl_hand_1')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl_hand_2')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl_hand_2')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl_hand_2')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'which_anim')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl1')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl1')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl1')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'which_anim')
('EQUALS_TO', '==')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death4')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl2')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl2')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl2')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'which_anim')
('EQUALS_TO', '==')
('IDENTIFIER', '2')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl3')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl3')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl3')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'which_anim')
('EQUALS_TO', '==')
('IDENTIFIER', '3')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death4')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl4')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl4')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl4')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'which_anim')
('EQUALS_TO', '==')
('IDENTIFIER', '4')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl5')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl5')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl5')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' force gibbing if the zombie is still alive')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'animscripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'death')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'do_gib')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'stat tracking')
('NEWLINE', '\n')
('IDENTIFIER', 'attacker')
('DOT', '.')
('IDENTIFIER', 'stats')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_gibs')
('QUOTE', '"')
('RBRACKET', ']')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_should_gib')
('LPAREN', '(')
('IDENTIFIER', 'amount')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('COMMA', ',')
('IDENTIFIER', 'type')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'is_german_build')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'type')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'type')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'MOD_UNKNOWN')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'MOD_CRUSH')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'MOD_TELEFRAG')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'MOD_FALLING')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'MOD_SUICIDE')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'MOD_TRIGGER_HURT')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'MOD_BURNED')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'MOD_MELEE')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isPlayer')
('LPAREN', '(')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'randomFloat')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'attacker')
('IDENTIFIER', 'HasPerk')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'specialty_altmelee')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_PISTOL_BULLET')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_RIFLE_BULLET')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsPlayer')
('LPAREN', '(')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'weapon')
('ASSIGNMENT', '=')
('IDENTIFIER', 'attacker')
('IDENTIFIER', 'GetCurrentWeapon')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'none')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'WeaponClass')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'pistol')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'WeaponIsGasWeapon')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\tprintln( "**DEBUG amount = ", amount );')
('NEWLINE', '\n')
('COMMENT', '\tprintln( "**DEBUG self.head_gibbed = ", self.head_gibbed );')
('NEWLINE', '\n')
('COMMENT', '\tprintln( "**DEBUG self.health = ", self.health );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'prev_health')
('ASSIGNMENT', '=')
('IDENTIFIER', 'amount')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'prev_health')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'prev_health')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'damage_percent')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'amount')
('DIVIDE', '/')
('IDENTIFIER', 'prev_health')
('RPAREN', ')')
('MULTIPLY', '*')
('IDENTIFIER', '100')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'damage_percent')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '10')
('COMMENT', '|| damage_percent >= 100')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' SRS 9/7/2008: need to derive damage location for types that return location of "none"')
('NEWLINE', '\n')
('IDENTIFIER', 'derive_damage_refs')
('LPAREN', '(')
('IDENTIFIER', 'point')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'gib_tags')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'init_gib_tags')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'closestTag')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'gib_tags')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'closestTag')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'closestTag')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'gib_tags')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'DistanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'point')
('COMMA', ',')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetTagOrigin')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'gib_tags')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'DistanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'point')
('COMMA', ',')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetTagOrigin')
('LPAREN', '(')
('IDENTIFIER', 'closestTag')
('RPAREN', ')')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'closestTag')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'gib_tags')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' figure out the refs based on the tag returned')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_SpineLower')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_SpineUpper')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_Spine4')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' HACK the torso that gets swapped for guts also removes the left arm')
('NEWLINE', '\n')
('COMMENT', '  so we need to sometimes do another ref')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'guts')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_arm')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_Shoulder_LE')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_Elbow_LE')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_Wrist_LE')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'left_arm')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_Shoulder_RI')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_Elbow_RI')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_Wrist_RI')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_arm')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_Hip_LE')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_Knee_LE')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_Ankle_LE')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'left_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'no_legs')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_Hip_RI')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_Knee_RI')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'closestTag')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'J_Ankle_RI')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'no_legs')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'ASSERTEX')
('LPAREN', '(')
('IDENTIFIER', 'array_validate')
('LPAREN', '(')
('IDENTIFIER', 'refs')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', "get_closest_damage_refs(): couldn't derive refs from closestTag ")
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'closestTag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'refs')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'init_gib_tags')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' "guts", "right_arm", "left_arm", "right_leg", "left_leg", "no_legs"')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' "guts"')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_SpineLower')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_SpineUpper')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Spine4')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' "left_arm"')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Shoulder_LE')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Elbow_LE')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Wrist_LE')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' "right_arm"')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Shoulder_RI')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Elbow_RI')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Wrist_RI')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' "left_leg"/"no_legs"')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Hip_LE')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Knee_LE')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Ankle_LE')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' "right_leg"/"no_legs"')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Hip_RI')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Knee_RI')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tags')
('LBRACKET', '[')
('IDENTIFIER', 'tags')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_Ankle_RI')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'gib_tags')
('ASSIGNMENT', '=')
('IDENTIFIER', 'tags')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_can_drop_powerups')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'damageweapon')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'zombie_cymbal_monkey')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_death_points')
('LPAREN', '(')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'mod')
('COMMA', ',')
('IDENTIFIER', 'hit_location')
('COMMA', ',')
('IDENTIFIER', 'player')
('COMMA', ',')
('IDENTIFIER', 'zombie')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'ChrisP - no points or powerups for killing zombies')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'marked_for_death')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'zombie_can_drop_powerups')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_powerups')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'powerup_drop')
('LPAREN', '(')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsPlayer')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'TUEY Play VO if you get a Head Shot')
('NEWLINE', '\n')
('COMMENT', 'add this check ( 3/24/09 - Chrisp)')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'nazi_zombie_prototype')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'play_death_vo')
('LPAREN', '(')
('IDENTIFIER', 'hit_location')
('COMMA', ',')
('IDENTIFIER', 'player')
('COMMA', ',')
('IDENTIFIER', 'mod')
('COMMA', ',')
('IDENTIFIER', 'zombie')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_score')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'player_add_points')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'mod')
('COMMA', ',')
('IDENTIFIER', 'hit_location')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'designate_rival_hero')
('LPAREN', '(')
('IDENTIFIER', 'player')
('COMMA', ',')
('IDENTIFIER', 'hero')
('COMMA', ',')
('IDENTIFIER', 'rival')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getplayers')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\t\tiprintlnbold("designating_rival");')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'playHero')
('ASSIGNMENT', '=')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'hero')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playRival')
('ASSIGNMENT', '=')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'rival')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'playHero')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'playRival')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'randomfloatrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'playRival')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'playHero')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'playHero')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'hero')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '400')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'player_responder')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'hero')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'hero')
('RBRACKET', ']')
('IDENTIFIER', 'play_headshot_response_hero')
('LPAREN', '(')
('IDENTIFIER', 'player_responder')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'playRival')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'rival')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '400')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'player_responder')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'rival')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'rival')
('RBRACKET', ']')
('IDENTIFIER', 'play_headshot_response_rival')
('LPAREN', '(')
('IDENTIFIER', 'player_responder')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'play_death_vo')
('LPAREN', '(')
('IDENTIFIER', 'hit_location')
('COMMA', ',')
('IDENTIFIER', 'player')
('COMMA', ',')
('IDENTIFIER', 'mod')
('COMMA', ',')
('IDENTIFIER', 'zombie')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', " CHRISP - adding some modifiers here so that it doens't play 100% of the time ")
('NEWLINE', '\n')
('COMMENT', ' and takes into account the damage type. ')
('NEWLINE', '\n')
('COMMENT', '\tdefault is 10% chance of saying something')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold(mod);')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold(player);')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'getdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_death_vo_freq')
('QUOTE', '"')
('RPAREN', ')')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'setdvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_death_vo_freq')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '100')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', 'TUEY moved to 50---We can take this out\\tweak this later.')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'chance')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getdvarint')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_death_vo_freq')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'weapon')
('ASSIGNMENT', '=')
('IDENTIFIER', 'player')
('IDENTIFIER', 'GetCurrentWeapon')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold (weapon);')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'sound')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', "just return and don't play a sound if the chance is not there")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'chance')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '100')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'TUEY - this funciton allows you to play a voice over when you kill a zombie and its last hit spot was something specific (like Headshot).')
('NEWLINE', '\n')
('COMMENT', 'players = getplayers();')
('NEWLINE', '\n')
('IDENTIFIER', 'index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_weapons')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'get_player_index')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getplayers')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_is_speaking')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_is_speaking')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_vars')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_insta_kill')
('QUOTE', '"')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_vars')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_insta_kill')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'hit_location')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'head')
('QUOTE', '"')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_vars')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_insta_kill')
('QUOTE', '"')
('RBRACKET', ']')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'no VO for non bullet headshot kills')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'MOD_PISTOL_BULLET')
('QUOTE', '"')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'mod')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'MOD_RIFLE_BULLET')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', 'chrisp - far headshot sounds')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '450')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'sound = "plr_" + index + "_vox_kill_headdist" + "_" + randomintrange(0, 11);')
('NEWLINE', '\n')
('IDENTIFIER', 'plr')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'play_headshot_dialog')
('LPAREN', '(')
('IDENTIFIER', 'plr')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'index')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('COMMENT', 'DEMPSEY gets a headshot, response hero Tenko, rival The Doc')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'designate_rival_hero')
('LPAREN', '(')
('IDENTIFIER', 'player')
('COMMA', ',')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'index')
('EQUALS_TO', '==')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'Nickolai gets a headshot, response hero Dempsey, rival Tenko')
('NEWLINE', '\n')
('IDENTIFIER', 'designate_rival_hero')
('LPAREN', '(')
('IDENTIFIER', 'player')
('COMMA', ',')
('IDENTIFIER', '3')
('COMMA', ',')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'index')
('EQUALS_TO', '==')
('IDENTIFIER', '2')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'Tenko gets a headshot, response hero The Doctor, rival Nickolai')
('NEWLINE', '\n')
('IDENTIFIER', 'designate_rival_hero')
('LPAREN', '(')
('IDENTIFIER', 'player')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'index')
('EQUALS_TO', '==')
('IDENTIFIER', '3')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'The Doc gets a headshot, response hero Nickolai, rival Dempsey')
('NEWLINE', '\n')
('IDENTIFIER', 'designate_rival_hero')
('LPAREN', '(')
('IDENTIFIER', 'player')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', 'remove headshot sounds for instakill')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_vars')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_insta_kill')
('QUOTE', '"')
('RBRACKET', ']')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'sound')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'ray_gun')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'Ray Gun Kills')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '348')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_vars')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_insta_kill')
('QUOTE', '"')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '100')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'rand')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '28')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'plr')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'play_raygun_dialog')
('LPAREN', '(')
('IDENTIFIER', 'plr')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'weapon')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'ray_gun')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'Ray Gun Kills')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '348')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_vars')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_insta_kill')
('QUOTE', '"')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '100')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'rand')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '28')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'plr')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'play_raygun_dialog')
('LPAREN', '(')
('IDENTIFIER', 'plr')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_BURNED')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'TUEY play flamethrower death sounds')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\tiprintlnbold(mod);')
('NEWLINE', '\n')
('IDENTIFIER', 'plr')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'play_flamethrower_dialog')
('LPAREN', '(')
('IDENTIFIER', 'plr')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', 'check for close range kills, and play a special sound, unless instakill is on ')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'MOD_MELEE')
('QUOTE', '"')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'hit_location')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'head')
('QUOTE', '"')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_vars')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_insta_kill')
('QUOTE', '"')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('LOGICAL_AND', '&&')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'has_legs')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '100')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'rand')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '15')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'plr')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'create_and_play_dialog')
('LPAREN', '(')
('IDENTIFIER', 'plr')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'vox_crawl_kill')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'player')
('IDENTIFIER', 'HasPerk')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'specialty_altmelee')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_MELEE')
('QUOTE', '"')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_vars')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_insta_kill')
('QUOTE', '"')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '100')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'rand')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '25')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'plr')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'create_and_play_dialog')
('LPAREN', '(')
('IDENTIFIER', 'plr')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'vox_kill_bowie')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'special case for close range melee attacks while insta-kill is on')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_vars')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_insta_kill')
('QUOTE', '"')
('RBRACKET', ']')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_MELEE')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_BAYONET')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_UNKNOWN')
('QUOTE', '"')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '64')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'plr')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'play_insta_melee_dialog')
('LPAREN', '(')
('IDENTIFIER', 'plr')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'sound = "plr_" + index + "_vox_melee_insta" + "_" + randomintrange(0, 5); ')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'Explosive Kills')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_GRENADE_SPLASH')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_GRENADE')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_vars')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_insta_kill')
('QUOTE', '"')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'Plays explosion dialog')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'damageweapon')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'zombie_cymbal_monkey')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'plr')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'create_and_play_dialog')
('LPAREN', '(')
('IDENTIFIER', 'plr')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'vox_kill_monkey')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'plr')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'play_explosion_dialog')
('LPAREN', '(')
('IDENTIFIER', 'plr')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_PROJECTILE')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'Plays explosion dialog')
('NEWLINE', '\n')
('IDENTIFIER', 'plr')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'play_explosion_dialog')
('LPAREN', '(')
('IDENTIFIER', 'plr')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '64')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_vars')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_insta_kill')
('QUOTE', '"')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'mod')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'MOD_BURNED')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '100')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'rand')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '40')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'plr')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'play_closekill_dialog')
('LPAREN', '(')
('IDENTIFIER', 'plr')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\n\t//This keeps multiple voice overs from playing on the same player (both killstreaks and headshots).\n\tif (level.player_is_speaking != 1 && isDefined(sound) && level.zombie_vars["zombie_insta_kill"] != 0)\n\t{\t\n\t\tlevel.player_is_speaking = 1;\n\t\tplayer playsound(sound, "sound_done");\t\t\t\n\t\tplayer waittill("sound_done");\n\t\t//This ensures that there is at least 2 seconds waittime before playing another VO.\n\t\twait(2);\t\t\n\t\tlevel.player_is_speaking = 0;\n\t}\n\t//This allows us to play VO\'s faster if the player is in Instakill and killing at a short distance.\n\telse if (level.player_is_speaking != 1 && isDefined(sound) && level.zombie_vars["zombie_insta_kill"] == 0)\n\t{\n\t\tlevel.player_is_speaking = 1;\n\t\tplayer playsound(sound, "sound_done");\t\t\t\n\t\tplayer waittill("sound_done");\n\t\t//This ensures that there is at least 3 seconds waittime before playing another VO.\n\t\twait(0.5);\t\t\n\t\tlevel.player_is_speaking = 0;\n\n\t}\t\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'play_headshot_response_hero')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'waittime')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time_hero')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time_hero')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_hr_headdist')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'num_variants')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_number_variants')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('PLUS', '+')
('QUOTE', '"')
('STRING', 'vox_resp_hr_headdist')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '\tiprintlnbold(num_variants);')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_hr_headdist')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num_variants')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_hr_headdist')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_hr_headdist')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'vox_resp_hr_headdist_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_hr_headdist_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_hr_headdist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time_hero')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time_hero')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'sound_to_play')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_hr_headdist_available')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '\tiprintlnbold(player_index + "_" + sound_to_play);')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'do_player_playdialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('COMMA', ',')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_hr_headdist_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_hr_headdist_available')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_hr_headdist_available')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_hr_headdist_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_hr_headdist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time_hero')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'play_headshot_response_rival')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'waittime')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time_rival')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time_rival')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_riv_headdist')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'num_variants')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_number_variants')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('PLUS', '+')
('QUOTE', '"')
('STRING', 'vox_resp_riv_headdist')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_riv_headdist')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num_variants')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_riv_headdist')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_riv_headdist')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'vox_resp_riv_headdist_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_riv_headdist_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_riv_headdist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time_rival')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time_rival')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'sound_to_play')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_riv_headdist_available')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '\tiprintlnbold(player_index + "_" + sound_to_play);')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_riv_headdist_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_riv_headdist_available')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'do_player_playdialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('COMMA', ',')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_riv_headdist_available')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_riv_headdist_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_resp_riv_headdist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time_rival')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'play_projectile_dialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'waittime')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'num_variants')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_number_variants')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('PLUS', '+')
('QUOTE', '"')
('STRING', 'vox_kill_explo')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num_variants')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'vox_kill_explo_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'sound_to_play')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo_available')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '\t\tiprintlnbold(player_index + "_" + sound_to_play);')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo_available')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'do_player_playdialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('COMMA', ',')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo_available')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'play_explosion_dialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'waittime')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'num_variants')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_number_variants')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('PLUS', '+')
('QUOTE', '"')
('STRING', 'vox_kill_explo')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num_variants')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'vox_kill_explo_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'sound_to_play')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo_available')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '\t\t\tiprintlnbold(player_index + "_" + sound_to_play);')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo_available')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'do_player_playdialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('COMMA', ',')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo_available')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_explo')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'play_flamethrower_dialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'waittime')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_flame')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'num_variants')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_number_variants')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('PLUS', '+')
('QUOTE', '"')
('STRING', 'vox_kill_flame')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_flame')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num_variants')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_flame')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_flame')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'vox_kill_flame_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_flame_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_flame')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'sound_to_play')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_flame_available')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_flame_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_flame_available')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'do_player_playdialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('COMMA', ',')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_flame_available')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_flame_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_flame')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'play_closekill_dialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'waittime')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_close')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'num_variants')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_number_variants')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('PLUS', '+')
('QUOTE', '"')
('STRING', 'vox_close')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_close')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num_variants')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_close')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_close')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'vox_close_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_close_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_close')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_close_available')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'sound_to_play')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_close_available')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_close_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_close_available')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'do_player_playdialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('COMMA', ',')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_close_available')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_close_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_close')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'get_number_variants')
('LPAREN', '(')
('IDENTIFIER', 'aliasPrefix')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '100')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'SoundExists')
('LPAREN', '(')
('IDENTIFIER', 'aliasPrefix')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold(aliasPrefix +"_" + i);')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'play_headshot_dialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'waittime')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_headdist')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'num_variants')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_number_variants')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('PLUS', '+')
('QUOTE', '"')
('STRING', 'vox_kill_headdist')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold(num_variants);')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_headdist')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num_variants')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_headdist')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_headdist')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'vox_kill_headdist_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold("vox_kill_headdist_" + i);\t')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_headdist_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_headdist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'sound_to_play')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_headdist_available')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold("LINE:" + player_index + sound_to_play);')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'do_player_playdialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('COMMA', ',')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_headdist_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_headdist_available')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_headdist_available')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_headdist_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_headdist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'play_tesla_dialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'waittime')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_tesla')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'num_variants')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_number_variants')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('PLUS', '+')
('QUOTE', '"')
('STRING', 'vox_kill_tesla')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold(num_variants);')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_tesla')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num_variants')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_tesla')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_tesla')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'vox_kill_tesla_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold("vox_kill_tesla_" + i);\t')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_tesla_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_tesla')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_is_speaking')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_is_speaking')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'sound_to_play')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_tesla_available')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold("LINE:" + player_index + sound_to_play);')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'do_player_playdialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('COMMA', ',')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_tesla_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_tesla_available')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_tesla_available')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_tesla_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_tesla')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'play_raygun_dialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'waittime')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_ray')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'num_variants')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_number_variants')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('PLUS', '+')
('QUOTE', '"')
('STRING', 'vox_kill_ray')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold(num_variants);')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_ray')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num_variants')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_ray')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_ray')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'vox_kill_ray_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold("vox_kill_ray_" + i);\t')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_ray_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_ray')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_is_speaking')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_is_speaking')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'sound_to_play')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_ray_available')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '\tiprintlnbold("LINE:" + player_index + sound_to_play);')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'do_player_playdialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('COMMA', ',')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_ray_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_ray_available')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_ray_available')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_ray_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_kill_ray')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'play_insta_melee_dialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'waittime')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_insta_melee')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'num_variants')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_number_variants')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('PLUS', '+')
('QUOTE', '"')
('STRING', 'vox_insta_melee')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_insta_melee')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num_variants')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_insta_melee')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_insta_melee')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'vox_insta_melee_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_insta_melee_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_insta_melee')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'sound_to_play')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_insta_melee_available')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_insta_melee_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_insta_melee_available')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_insta_melee_available')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_insta_melee_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_insta_melee')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'do_player_playdialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('COMMA', ',')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'self playsound(player_index + sound_to_play, "sound_done" + sound_to_play);\t\t\t')
('NEWLINE', '\n')
('COMMENT', 'self waittill("sound_done" + sound_to_play);')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'one_at_a_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', 'This ensures that there is at least 3 seconds waittime before playing another VO.')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'do_player_playdialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('COMMA', ',')
('IDENTIFIER', 'waittime')
('COMMA', ',')
('IDENTIFIER', 'response')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_weapons')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'get_player_index')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_is_speaking')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_is_speaking')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_is_speaking')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_is_speaking')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold(sound_to_play);')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'playsound')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('PLUS', '+')
('IDENTIFIER', 'sound_to_play')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'sound_done')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'sound_to_play')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'sound_done')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'sound_to_play')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_is_speaking')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'response')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_response_line')
('LPAREN', '(')
('IDENTIFIER', 'self')
('COMMA', ',')
('IDENTIFIER', 'index')
('COMMA', ',')
('IDENTIFIER', 'response')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' Called from animscripts\\death.gsc')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_death_animscript')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'reset_attack_spot')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_tesla')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'enemy_killed_by_tesla')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' If no_legs, then use the AI no-legs death')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'has_legs')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'no_legs')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_gib_bothlegs_gib')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'grenadeAmmo')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Give attacker points')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', "ChrisP - 12/8/08 - added additional 'self' argument")
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'zombie_death_points')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'damagemod')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'damagelocation')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'attacker')
('COMMA', ',')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'damagemod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_BURNED')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'animscripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'death')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'flame_death_fx')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'damagemod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_GRENADE')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'damagemod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_GRENADE_SPLASH')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_grenade_death')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'damage_on_fire')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_flame_damage')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'is_on_fire')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'is_on_fire')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'round_number')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '6')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dmg')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_health')
('MULTIPLY', '*')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' 20% - 30%')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'round_number')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '9')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dmg')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_health')
('MULTIPLY', '*')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '15')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'round_number')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '11')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dmg')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_health')
('MULTIPLY', '*')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dmg')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_health')
('MULTIPLY', '*')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '15')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'Isdefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'Isalive')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DoDamage')
('LPAREN', '(')
('IDENTIFIER', 'dmg')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DoDamage')
('LPAREN', '(')
('IDENTIFIER', 'dmg')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'level')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'randomfloatrange')
('LPAREN', '(')
('IDENTIFIER', '1')
('DOT', '.')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '3')
('DOT', '.')
('IDENTIFIER', '0')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_damage')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('COMMA', ',')
('IDENTIFIER', 'hit_location')
('COMMA', ',')
('IDENTIFIER', 'hit_origin')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'is_magic_bullet_shield_enabled')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'ChrisP - 12/8 - no points for killing gassed zombies!')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'use_weapon_type')
('ASSIGNMENT', '=')
('IDENTIFIER', 'mod')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'marked_for_death')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_flame_damage')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_give_flame_damage_points')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_score')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'player_add_points')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'mod')
('COMMA', ',')
('IDENTIFIER', 'hit_location')
('COMMA', ',')
('IDENTIFIER', 'self')
('IDENTIFIER', 'enemy_is_dog')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_tesla')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'is_tesla_damage')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_tesla')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'tesla_damage_init')
('LPAREN', '(')
('IDENTIFIER', 'hit_location')
('COMMA', ',')
('IDENTIFIER', 'hit_origin')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_score')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'player_add_points')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'mod')
('COMMA', ',')
('IDENTIFIER', 'hit_location')
('COMMA', ',')
('IDENTIFIER', 'self')
('IDENTIFIER', 'enemy_is_dog')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_GRENADE')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_GRENADE_SPLASH')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isalive')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DoDamage')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'round_number')
('PLUS', '+')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '100')
('COMMA', ',')
('IDENTIFIER', '500')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DoDamage')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'round_number')
('PLUS', '+')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '100')
('COMMA', ',')
('IDENTIFIER', '500')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_PROJECTILE')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_EXPLOSIVE')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_PROJECTILE_SPLASH')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_PROJECTILE_SPLASH')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isalive')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DoDamage')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'round_number')
('MULTIPLY', '*')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '100')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DoDamage')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'round_number')
('MULTIPLY', '*')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '100')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_ZOMBIE_BETTY')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isalive')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DoDamage')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'round_number')
('MULTIPLY', '*')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '100')
('COMMA', ',')
('IDENTIFIER', '200')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DoDamage')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'round_number')
('MULTIPLY', '*')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '100')
('COMMA', ',')
('IDENTIFIER', '200')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'AUDIO Plays a sound when Crawlers are created')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'no_legs')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isalive')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '100')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'rand')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '10')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_weapons')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'get_player_index')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'plr')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'create_and_play_dialog')
('LPAREN', '(')
('IDENTIFIER', 'plr')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'vox_crawl_spawn')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'resp_cspawn')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'right_arm')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'left_arm')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'has_legs')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isalive')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '100')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'rand')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '3')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_weapons')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'get_player_index')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'plr')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'create_and_play_dialog')
('LPAREN', '(')
('IDENTIFIER', 'plr')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'vox_shoot_limb')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_powerups')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'check_for_instakill')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_damage_ads')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('COMMA', ',')
('IDENTIFIER', 'hit_location')
('COMMA', ',')
('IDENTIFIER', 'hit_origin')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'is_magic_bullet_shield_enabled')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'use_weapon_type')
('ASSIGNMENT', '=')
('IDENTIFIER', 'mod')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_flame_damage')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_give_flame_damage_points')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_score')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'player_add_points')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage_ads')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'mod')
('COMMA', ',')
('IDENTIFIER', 'hit_location')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_tesla')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'is_tesla_damage')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_tesla')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'tesla_damage_init')
('LPAREN', '(')
('IDENTIFIER', 'hit_location')
('COMMA', ',')
('IDENTIFIER', 'hit_origin')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_score')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'player_add_points')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage_ads')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'mod')
('COMMA', ',')
('IDENTIFIER', 'hit_location')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_powerups')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'check_for_instakill')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_give_flame_damage_points')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'GetTime')
('LPAREN', '(')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'flame_damage_time')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'flame_damage_time')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetTime')
('LPAREN', '(')
('RPAREN', ')')
('PLUS', '+')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_vars')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'zombie_flame_dmg_point_delay')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_flame_damage')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('COMMA', ',')
('IDENTIFIER', 'player')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'mod')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_BURNED')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'moveplaybackrate')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '8')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'is_on_fire')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LPAREN', '(')
('IDENTIFIER', 'Isdefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'is_on_fire')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'is_on_fire')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'damage_on_fire')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'do_flame_death')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '100')
('MULTIPLY', '*')
('IDENTIFIER', '100')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ai')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetAiArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'ai')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'ai')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'is_on_fire')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'ai')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'is_on_fire')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'DistanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'ai')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'do_flame_death')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'do_flame_death')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'animscripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'death')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'flame_death_fx')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_death_event')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_eye_glow_stop')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playsoundatposition')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death_vocals')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', ' this is controlling killstreak voice over in the asylum.gsc')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isplayer')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'nazi_zombie_prototype')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'attacker')
('DOT', '.')
('IDENTIFIER', 'killcounter')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'attacker')
('DOT', '.')
('IDENTIFIER', 'killcounter')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'attacker')
('DOT', '.')
('IDENTIFIER', 'killcounter')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'sound_damage_player')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'sound_damage_player')
('EQUALS_TO', '==')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'attacker')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'play_closeDamage_dialog')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'attacker')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zom_kill')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isplayer')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'damageloc')
('ASSIGNMENT', '=')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'damagelocation')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'damagemod')
('ASSIGNMENT', '=')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'damagemod')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'attacker')
('ASSIGNMENT', '=')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'attacker')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'weapon')
('ASSIGNMENT', '=')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'damageWeapon')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'bbPrint')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_kills: round %d zombietype zombie damagetype %s damagelocation %s playername %s playerweapon %s playerx %f playery %f playerz %f zombiex %f zombiey %f zombiez %f')
('QUOTE', '"')
('COMMA', ',')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'round_number')
('COMMA', ',')
('IDENTIFIER', 'damagemod')
('COMMA', ',')
('IDENTIFIER', 'damageloc')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('DOT', '.')
('IDENTIFIER', 'playername')
('COMMA', ',')
('IDENTIFIER', 'weapon')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'play_closeDamage_dialog')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_weapons')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'get_player_index')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player_index')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'plr_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'index')
('PLUS', '+')
('QUOTE', '"')
('STRING', '_')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_dmg_close')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'num_variants')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_spawner')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'get_number_variants')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('PLUS', '+')
('QUOTE', '"')
('STRING', 'vox_dmg_close')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_dmg_close')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num_variants')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_dmg_close')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_dmg_close')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'vox_dmg_close_')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_dmg_close_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_dmg_close')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'sound_to_play')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_dmg_close_available')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_dmg_close_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_dmg_close_available')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_dmg_close_available')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_dmg_close_available')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'vox_dmg_close')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_spawner')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'do_player_playdialog')
('LPAREN', '(')
('IDENTIFIER', 'player_index')
('COMMA', ',')
('IDENTIFIER', 'sound_to_play')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' this is where zombies go into attack mode, and need different attributes set up')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_setup_attack_properties')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_setup_attack_properties()')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' allows zombie to attack again')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' push the player out of the way so they use traversals in the house.')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'PushPlayer')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'pathEnemyFightDist')
('ASSIGNMENT', '=')
('IDENTIFIER', '64')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'meleeAttackDist')
('ASSIGNMENT', '=')
('IDENTIFIER', '64')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'try to prevent always turning towards the enemy')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxsightdistsqrd')
('ASSIGNMENT', '=')
('IDENTIFIER', '128')
('MULTIPLY', '*')
('IDENTIFIER', '128')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' turn off transition anims')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'disableArrivals')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'disableExits')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' the seeker logic for zombies')
('NEWLINE', '\n')
('IDENTIFIER', 'find_flesh')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'intermission')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'intermission')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignore_player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'find flesh -> start')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '32')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' try to split the zombies up when the bunch up')
('NEWLINE', '\n')
('COMMENT', " see if a bunch zombies are already near my current target; if there's a bunch")
('NEWLINE', '\n')
('COMMENT', " and I'm still far enough away, ignore my current target and go after another one")
('NEWLINE', '\n')
('COMMENT', '\t\tnear_zombies = getaiarray("axis");')
('NEWLINE', '\n')
('COMMENT', '\t\tsame_enemy_count = 0;')
('NEWLINE', '\n')
('COMMENT', '\t\tfor (i = 0; i < near_zombies.size; i++)')
('NEWLINE', '\n')
('COMMENT', '\t\t{')
('NEWLINE', '\n')
('COMMENT', '\t\t\tif ( isdefined( near_zombies[i] ) && isalive( near_zombies[i] ) )')
('NEWLINE', '\n')
('COMMENT', '\t\t\t{')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\tif ( isdefined( near_zombies[i].favoriteenemy ) && isdefined( self.favoriteenemy ) ')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t&&\tnear_zombies[i].favoriteenemy == self.favoriteenemy )')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t{')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\tif ( distancesquared( near_zombies[i].origin, self.favoriteenemy.origin ) < 225 * 225 ')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t&&\t distancesquared( near_zombies[i].origin, self.origin ) > 525 * 525)')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t{')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t\tsame_enemy_count++;')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t}')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t}')
('NEWLINE', '\n')
('COMMENT', '\t\t\t}')
('NEWLINE', '\n')
('COMMENT', '\t\t}')
('NEWLINE', '\n')
('COMMENT', '\t\t')
('NEWLINE', '\n')
('COMMENT', '\t\tif (same_enemy_count > 12)')
('NEWLINE', '\n')
('COMMENT', '\t\t{')
('NEWLINE', '\n')
('COMMENT', '\t\t\tself.ignore_player = self.favoriteenemy;')
('NEWLINE', '\n')
('COMMENT', '\t\t}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_poi')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'get_zombie_point_of_interest')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'PI_CHANGE_BEGIN - 6/18/09 JV It was requested that we use the poi functionality to set the "wait" point while all players  ')
('NEWLINE', '\n')
('COMMENT', 'are in the process of teleportation. It should not intefere with the monkey.  The way it should work is, if all players are in teleportation,')
('NEWLINE', '\n')
('COMMENT', 'zombies should go and wait at the stage, but if there is a valid player not in teleportation, they should go to him')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombieTheaterTeleporterSeekLogicFunc')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'temp_poi')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('LBRACKET', '[')
('LBRACKET', '[')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombieTheaterTeleporterSeekLogicFunc')
('RBRACKET', ']')
('RBRACKET', ']')
('LPAREN', '(')
('IDENTIFIER', 'players')
('COMMA', ',')
('IDENTIFIER', 'zombie_poi')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'temp_poi')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_poi')
('ASSIGNMENT', '=')
('IDENTIFIER', 'temp_poi')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', 'PI_CHANGE_END')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' If playing single player, never ignore the player')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('EQUALS_TO', '==')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignore_player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_closest_valid_player')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignore_player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'zombie_poi')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', "find flesh -> can't find player, continue")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignore_player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignore_player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignore_player')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignore_player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemyoverride')
('ASSIGNMENT', '=')
('IDENTIFIER', 'zombie_poi')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('ASSIGNMENT', '=')
('IDENTIFIER', 'player')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_pathing')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_path_timer')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetTime')
('LPAREN', '(')
('RPAREN', ')')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '3')
('RPAREN', ')')
('MULTIPLY', '*')
('IDENTIFIER', '1000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'GetTime')
('LPAREN', '(')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_path_timer')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'find flesh -> bottom of loop')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'debug_print')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Zombie is re-acquiring enemy, ending breadcrumb search')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_acquire_enemy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_pathing')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_acquire_enemy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'intermission')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'assert')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('RPAREN', ')')
('LOGICAL_OR', '||')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemyoverride')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_follow_enemy')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'bad_path')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemyoverride')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'debug_print')
('LPAREN', '(')
('QUOTE', '"')
('STRING', "Zombie couldn't path to point of interest at origin: ")
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemyoverride')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' Falling back to breadcrumb system')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemyoverride')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemyoverride')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemyoverride')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('IDENTIFIER', 'invalidate_attractor_pos')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemyoverride')
('COMMA', ',')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_path_timer')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'debug_print')
('LPAREN', '(')
('QUOTE', '"')
('STRING', "Zombie couldn't path to player at origin: ")
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' Falling back to breadcrumb system')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_path_timer')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'disconnect')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'crumb_list')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'zombie_breadcrumbs')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'bad_crumbs')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'is_player_valid')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_path_timer')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'goal')
('ASSIGNMENT', '=')
('IDENTIFIER', 'zombie_pathing_get_breadcrumb')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'crumb_list')
('COMMA', ',')
('IDENTIFIER', 'bad_crumbs')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', '100')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '20')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'goal')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'debug_print')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Zombie exhausted breadcrumb search')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'goal')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'spectator_respawn')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'debug_print')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Setting current breadcrumb to ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'goal')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_path_timer')
('PLUS_EQUALS', '+=')
('IDENTIFIER', '1000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('IDENTIFIER', 'goal')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'bad_path')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'debug_print')
('LPAREN', '(')
('QUOTE', '"')
('STRING', "Zombie couldn't path to breadcrumb at ")
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'goal')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' Finding next breadcrumb')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'crumb_list')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'goal')
('EQUALS_TO', '==')
('IDENTIFIER', 'crumb_list')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'bad_crumbs')
('LBRACKET', '[')
('IDENTIFIER', 'bad_crumbs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_pathing_get_breadcrumb')
('LPAREN', '(')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'breadcrumbs')
('COMMA', ',')
('IDENTIFIER', 'bad_crumbs')
('COMMA', ',')
('IDENTIFIER', 'pick_random')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'assert')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'assert')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'breadcrumbs')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'assert')
('LPAREN', '(')
('IDENTIFIER', 'IsArray')
('LPAREN', '(')
('IDENTIFIER', 'breadcrumbs')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('DIVIDE', '/')
('PREPROCESSOR_DIRECTIVE', '#')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'pick_random')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'debug_print')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Finding random breadcrumb')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#/')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'breadcrumbs')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'pick_random')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'crumb_index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'breadcrumbs')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'crumb_index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'crumb_is_bad')
('LPAREN', '(')
('IDENTIFIER', 'crumb_index')
('COMMA', ',')
('IDENTIFIER', 'bad_crumbs')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'breadcrumbs')
('LBRACKET', '[')
('IDENTIFIER', 'crumb_index')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'crumb_is_bad')
('LPAREN', '(')
('IDENTIFIER', 'crumb')
('COMMA', ',')
('IDENTIFIER', 'bad_crumbs')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'bad_crumbs')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'bad_crumbs')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', 'crumb')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'jitter_enemies_bad_breadcrumbs')
('LPAREN', '(')
('IDENTIFIER', 'start_crumb')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trace_distance')
('ASSIGNMENT', '=')
('IDENTIFIER', '35')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'jitter_distance')
('ASSIGNMENT', '=')
('IDENTIFIER', '2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'start_crumb')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'zombie_breadcrumbs')
('LBRACKET', '[')
('IDENTIFIER', 'index')
('PLUS', '+')
('IDENTIFIER', '1')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'current_crumb')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'zombie_breadcrumbs')
('LBRACKET', '[')
('IDENTIFIER', 'index')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'next_crumb')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'zombie_breadcrumbs')
('LBRACKET', '[')
('IDENTIFIER', 'index')
('PLUS', '+')
('IDENTIFIER', '1')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'vectortoangles')
('LPAREN', '(')
('IDENTIFIER', 'current_crumb')
('SUBTRACT', '-')
('IDENTIFIER', 'next_crumb')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'right')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anglestoright')
('LPAREN', '(')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'left')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anglestoright')
('LPAREN', '(')
('IDENTIFIER', 'angles')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '180')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'dist_pos')
('ASSIGNMENT', '=')
('IDENTIFIER', 'current_crumb')
('PLUS', '+')
('IDENTIFIER', 'vectorScale')
('LPAREN', '(')
('IDENTIFIER', 'right')
('COMMA', ',')
('IDENTIFIER', 'trace_distance')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trace')
('ASSIGNMENT', '=')
('IDENTIFIER', 'bulletTrace')
('LPAREN', '(')
('IDENTIFIER', 'current_crumb')
('COMMA', ',')
('IDENTIFIER', 'dist_pos')
('COMMA', ',')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'vector')
('ASSIGNMENT', '=')
('IDENTIFIER', 'trace')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'position')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'vector')
('COMMA', ',')
('IDENTIFIER', 'current_crumb')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '17')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'zombie_breadcrumbs')
('LBRACKET', '[')
('IDENTIFIER', 'index')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'current_crumb')
('PLUS', '+')
('IDENTIFIER', 'vectorScale')
('LPAREN', '(')
('IDENTIFIER', 'left')
('COMMA', ',')
('IDENTIFIER', 'jitter_distance')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' try the other side')
('NEWLINE', '\n')
('IDENTIFIER', 'dist_pos')
('ASSIGNMENT', '=')
('IDENTIFIER', 'current_crumb')
('PLUS', '+')
('IDENTIFIER', 'vectorScale')
('LPAREN', '(')
('IDENTIFIER', 'left')
('COMMA', ',')
('IDENTIFIER', 'trace_distance')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trace')
('ASSIGNMENT', '=')
('IDENTIFIER', 'bulletTrace')
('LPAREN', '(')
('IDENTIFIER', 'current_crumb')
('COMMA', ',')
('IDENTIFIER', 'dist_pos')
('COMMA', ',')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'vector')
('ASSIGNMENT', '=')
('IDENTIFIER', 'trace')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'position')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'vector')
('COMMA', ',')
('IDENTIFIER', 'current_crumb')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '17')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'zombie_breadcrumbs')
('LBRACKET', '[')
('IDENTIFIER', 'index')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'current_crumb')
('PLUS', '+')
('IDENTIFIER', 'vectorScale')
('LPAREN', '(')
('IDENTIFIER', 'right')
('COMMA', ',')
('IDENTIFIER', 'jitter_distance')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'index')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_follow_enemy')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_acquire_enemy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'bad_path')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'intermission')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemyoverride')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemyoverride')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemyoverride')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '1')
('MULTIPLY', '*')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'OrientMode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'face motion')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'OrientMode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'face point')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemyoverride')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemyoverride')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'OrientMode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'face default')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' PI_CHANGE_BEGIN')
('NEWLINE', '\n')
('COMMENT', ' JMA - while on the zipline, get zipline destination and use it as the goal')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'nazi_zombie_sumpf')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'on_zipline')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'on_zipline')
('EQUALS_TO', '==')
('IDENTIFIER', 'true')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'crumb_list')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'zombie_breadcrumbs')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'bad_crumbs')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'goal')
('ASSIGNMENT', '=')
('IDENTIFIER', 'zombie_pathing_get_breadcrumb')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'favoriteenemy')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'crumb_list')
('COMMA', ',')
('IDENTIFIER', 'bad_crumbs')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'goal')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetGoalPos')
('LPAREN', '(')
('IDENTIFIER', 'goal')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', ' PI_CHANGE_END')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' When a Zombie spawns, set his eyes to glowing.')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_eye_glow')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_eye_glow')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_eye_glow')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\tif(!isdefined(level._numZombEyeGlows))\n\t{\n\t\tlevel._numZombEyeGlows = 0;\n\t}\n\t\n//\tif(level.zombie_eyes_limited && level._numZombEyeGlows > 8)\n//\t\treturn;\n\n\tif ( level.zombie_eyes_disabled )\n\t{\n\t\treturn;\n\t}\n\n\tlinkTag = "J_Eyeball_LE";\n\tfxModel = "tag_origin";\n\tfxTag = "tag_origin";\n\n\t// SRS 9/2/2008: only using one particle now per Barry\'s request;\n\t//  modified to be able to turn particle off\n\t\n\tself.fx_eye_glow = Spawn( "script_model", self GetTagOrigin( linkTag ) );\n\tself.fx_eye_glow.angles = self GetTagAngles( linkTag );\n\tself.fx_eye_glow SetModel( fxModel );\n\tself.fx_eye_glow LinkTo( self, linkTag ); \n\n\t// TEMP for testing\n\t//self.fx_eye_glow thread maps\\_debug::drawTagForever( fxTag );\n\n\tPlayFxOnTag( level._effect["eye_glow"], self.fx_eye_glow, fxTag );\n\t\n\tlevel._numZombEyeGlows ++;\n\taddtagname(linkTag);\n\tself haseyes(1);')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Called when either the Zombie dies or if his head gets blown off')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_eye_glow_stop')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', '\tif( IsDefined( self.fx_eye_glow ) )\n\t{\n\t\tself.fx_eye_glow Delete();\n\t\tlevel._numZombEyeGlows --;\n\t} \n\t\n\tself haseyes(0);')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', ' DEBUG')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_history')
('LPAREN', '(')
('IDENTIFIER', 'msg')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('DIVIDE', '/')
('PREPROCESSOR_DIRECTIVE', '#')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_history')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_history')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_history')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_history')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'msg')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#/')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\n\tZombie Rise Stuff\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_rise')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'no_rise')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'do_rise')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'do_zombie_rise')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\nzombie_rise:\nZombies rise from the ground\n')
('NEWLINE', '\n')
('IDENTIFIER', 'do_zombie_rise')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_rise_version')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', '99999')
('RPAREN', ')')
('MODULUS', '%')
('IDENTIFIER', '2')
('RPAREN', ')')
('PLUS', '+')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('COMMENT', ' equally choose between version 1 and verson 2 of the animations')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_move_speed')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'walk')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' only do version 1 anims for "run" and "sprint"')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_rise_version')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'in_the_ground')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'self.zombie_rise_version = 1; // TESTING: override version')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'anchor')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_origin')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'anchor')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'linkto')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'anchor')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' JMA - this is used in swamp to only spawn risers in active player zones')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'nazi_zombie_sumpf')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'script')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'nazi_zombie_factory')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('NEWLINE', '\n')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_rise_spawners')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spots')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'zombie_rise_spawners')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spots')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetStructArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_rise')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'spots')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'unlink')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'anchor')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('IDENTIFIER', 'spot')
('ASSIGNMENT', '=')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'spots')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('DIVIDE', '/')
('PREPROCESSOR_DIRECTIVE', '#')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'GetDVarInt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_rise_test')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spot')
('ASSIGNMENT', '=')
('IDENTIFIER', 'SpawnStruct')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', " I know this never gets deleted, but it's just for testing")
('NEWLINE', '\n')
('IDENTIFIER', 'spot')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', '472')
('COMMA', ',')
('IDENTIFIER', '240')
('COMMA', ',')
('IDENTIFIER', '56')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' TEST LOCATION')
('NEWLINE', '\n')
('IDENTIFIER', 'spot')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#/')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'spot')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spot')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'anim_org')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spot')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'anim_ang')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spot')
('DOT', '.')
('IDENTIFIER', 'angles')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', "TODO: bbarnes: do a bullet trace to the ground so the structs don't have to be exactly on the ground.")
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_rise_version')
('EQUALS_TO', '==')
('IDENTIFIER', '2')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'anim_org')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anim_org')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('SUBTRACT', '-')
('IDENTIFIER', '14')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' version 2 animation starts 14 units below the ground')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'anim_org')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anim_org')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('SUBTRACT', '-')
('IDENTIFIER', '45')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' start the animation 45 units below the ground')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'self Teleport(anim_org, anim_ang);\t// we should get this working for MP')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'Hide')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'anchor')
('IDENTIFIER', 'moveto')
('LPAREN', '(')
('IDENTIFIER', 'anim_org')
('COMMA', ',')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'anchor')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'movedone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' face goal')
('NEWLINE', '\n')
('IDENTIFIER', 'target_org')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_zombiemode_spawner')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'get_desired_origin')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'target_org')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'anim_ang')
('ASSIGNMENT', '=')
('IDENTIFIER', 'VectorToAngles')
('LPAREN', '(')
('IDENTIFIER', 'target_org')
('SUBTRACT', '-')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'anchor')
('IDENTIFIER', 'RotateTo')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'anim_ang')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMA', ',')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'anchor')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rotatedone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'unlink')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'anchor')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'hide_pop')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' hack to hide the pop when the zombie gets to the start position before the anim starts')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_rise_death')
('LPAREN', '(')
('IDENTIFIER', 'self')
('COMMA', ',')
('IDENTIFIER', 'spot')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spot')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_rise_fx')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'self animMode("nogravity");')
('NEWLINE', '\n')
('COMMENT', 'self setFlaggedAnimKnoballRestart("rise", level.scr_anim["zombie"]["rise_walk"], %body, 1, .1, 1);\t// no "noclip" mode for these anim functions')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'AnimScripted')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rise')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'spot')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('IDENTIFIER', 'self')
('IDENTIFIER', 'get_rise_anim')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'animscripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'shared')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'DoNoteTracks')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rise')
('QUOTE', '"')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'handle_rise_notetracks')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('IDENTIFIER', 'spot')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rise_anim_finished')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spot')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_zombie_rise_fx')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'in_the_ground')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'risen')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'spot')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'hide_pop')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('DOT', '.')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'Show')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'handle_rise_notetracks')
('LPAREN', '(')
('IDENTIFIER', 'note')
('COMMA', ',')
('IDENTIFIER', 'spot')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', ' the anim notetracks control which death anim to play')
('NEWLINE', '\n')
('COMMENT', ' default to "deathin" (still in the ground)')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'note')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'deathout')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'note')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'deathhigh')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_rise_death_out')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_rise_death_out')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('IDENTIFIER', '2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spot')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_zombie_rise_fx')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\nzombie_rise_death:\nTrack when the zombie should die, set the death anim, and stop the animscripted so he can die\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_rise_death')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('COMMA', ',')
('IDENTIFIER', 'spot')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'self.nodeathragdoll = true;')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'zombie_rise_death_out')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rise_anim_finished')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'health')
('GREATER_THAN', '>')
('IDENTIFIER', '1')
('RPAREN', ')')
('COMMENT', ' health will only go down to 1 when playing animation with AnimScripted()')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'amount')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spot')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_zombie_rise_fx')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'zombie')
('IDENTIFIER', 'get_rise_death_anim')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('IDENTIFIER', 'StopAnimScripted')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' stop the anim so the zombie can die.  death anim is handled by the anim scripts.')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\nzombie_rise_fx:\t self is the script struct at the rise location\nPlay the fx as the zombie crawls out of the ground and thread another function to handle the dust falling\noff when the zombie is out of the ground.\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_rise_fx')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_rise_dust_fx')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'zombie_rise_burst_fx')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playsoundatposition')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'zombie_spawn')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_zombie_rise_fx')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('DOT', '.')
('IDENTIFIER', 'zombie_move_speed')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'sprint')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', " wait longer before starting billowing fx if it's not a really fast animation")
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_rise_burst_fx')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_zombie_rise_fx')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rise_anim_finished')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'in_water')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'rise_burst_water')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('DOT', '.')
('IDENTIFIER', '25')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'rise_billow_water')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('SUBTRACT', '-')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('SUBTRACT', '-')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'rise_burst')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('DOT', '.')
('IDENTIFIER', '25')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'rise_billow')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('SUBTRACT', '-')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('SUBTRACT', '-')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'burst_time = 10; // play dust fx for a max time')
('NEWLINE', '\n')
('COMMENT', 'interval = randomfloatrange(.15,.45); // wait this time in between playing the effect')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'for (t = 0; t < burst_time; t += interval)')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\twait interval;')
('NEWLINE', '\n')
('COMMENT', '}\t')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie_rise_dust_fx')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dust_tag')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'J_SpineUpper')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_zombie_rise_dust_fx')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'stop_zombie_rise_dust_fx')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'dust_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '7')
('DOT', '.')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('COMMENT', ' play dust fx for a max time')
('NEWLINE', '\n')
('IDENTIFIER', 'dust_interval')
('ASSIGNMENT', '=')
('DOT', '.')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('COMMENT', 'randomfloatrange(.1,.25); // wait this time in between playing the effect')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'TODO - add rising dust stuff ere')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'in_water')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 't')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 't')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'dust_time')
('SEMICOLON', ';')
('IDENTIFIER', 't')
('PLUS_EQUALS', '+=')
('IDENTIFIER', 'dust_interval')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayfxOnTag')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'rise_dust_water')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'zombie')
('COMMA', ',')
('IDENTIFIER', 'dust_tag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('IDENTIFIER', 'dust_interval')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 't')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 't')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'dust_time')
('SEMICOLON', ';')
('IDENTIFIER', 't')
('PLUS_EQUALS', '+=')
('IDENTIFIER', 'dust_interval')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'PlayfxOnTag')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'rise_dust')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'zombie')
('COMMA', ',')
('IDENTIFIER', 'dust_tag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('IDENTIFIER', 'dust_interval')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'stop_zombie_rise_dust_fx')
('LPAREN', '(')
('IDENTIFIER', 'zombie')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'zombie')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_zombie_rise_dust_fx')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\nget_rise_anim:\nReturn a random rise animation based on a possible set of animations\n')
('NEWLINE', '\n')
('IDENTIFIER', 'get_rise_anim')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', '/* TESTING: put this block back in')
('NEWLINE', '\n')
('IDENTIFIER', 'speed')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_move_speed')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_zombie_rise_anims')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_rise_version')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'speed')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '*/')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'return %ai_zombie_traverse_ground_v1_crawlfast;')
('NEWLINE', '\n')
('COMMENT', 'return %ai_zombie_traverse_ground_v2_walk;')
('NEWLINE', '\n')
('COMMENT', 'return %ai_zombie_traverse_ground_v2_walk_altB;')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\nget_rise_death_anim:\nReturn a random death animation based on a possible set of animations\n')
('NEWLINE', '\n')
('IDENTIFIER', 'get_rise_death_anim')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'possible_anims')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_rise_death_out')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'possible_anims')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_zombie_rise_death_anims')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_rise_version')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'out')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'possible_anims')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_zombie_rise_death_anims')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'zombie_rise_version')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'in')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'random')
('LPAREN', '(')
('IDENTIFIER', 'possible_anims')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' gib limbs if enough firepower occurs')
('NEWLINE', '\n')
('IDENTIFIER', 'make_crawler')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', '\tself endon( "death" ); ')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'has_legs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'AllowedStances')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'crouch')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'damage_type')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_foot')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'damage_type')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'left_foot')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'damage_type')
('LBRACKET', '[')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', 'damage_type')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'right_leg_upper')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'right_leg_lower')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'right_foot')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('COMMENT', ' Addition "right_leg" refs so that the no_legs happens less and is more rare')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'right_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'no_legs')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'left_leg_upper')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'left_leg_lower')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'left_foot')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('COMMENT', ' Addition "left_leg" refs so that the no_legs happens less and is more rare')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'left_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'left_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'left_leg')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'refs')
('LBRACKET', '[')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'no_legs')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'refs')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('ASSIGNMENT', '=')
('IDENTIFIER', 'animscripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'death')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'get_random')
('LPAREN', '(')
('IDENTIFIER', 'refs')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " Don't stand if a leg is gone")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'no_legs')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'right_leg')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'left_leg')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'has_legs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'AllowedStances')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'crouch')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'which_anim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'RandomInt')
('LPAREN', '(')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'gib_ref')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'no_legs')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', '100')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '50')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl_hand_1')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl_hand_1')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl_hand_1')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl_hand_2')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl_hand_2')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl_hand_2')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'which_anim')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl1')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl1')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl1')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'which_anim')
('EQUALS_TO', '==')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death4')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl2')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl2')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl2')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'which_anim')
('EQUALS_TO', '==')
('IDENTIFIER', '2')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl3')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl3')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl3')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'which_anim')
('EQUALS_TO', '==')
('IDENTIFIER', '3')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death4')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl4')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl4')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl4')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'which_anim')
('EQUALS_TO', '==')
('IDENTIFIER', '4')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'deathanim')
('ASSIGNMENT', '=')
('MODULUS', '%')
('IDENTIFIER', 'ai_zombie_crawl_death_v1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_run_anim')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'run_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl5')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchRunAnim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl5')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'crouchrun_combatanim')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_anim')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'crawl5')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\tif( self.health > 0 )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\t// force gibbing if the zombie is still alive')
('NEWLINE', '\n')
('COMMENT', '\t\tself thread animscripts\\death::do_gib();')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '\t\t//stat tracking')
('NEWLINE', '\n')
('COMMENT', '\t\tattacker.stats["zombie_gibs"]++;')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('RBRACE', '}')
('EOF', None)