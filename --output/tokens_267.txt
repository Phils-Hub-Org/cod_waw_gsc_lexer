('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_anim')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'common_scripts')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'pel2_util')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_vehicle_utility')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_threat')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_grenade_toss')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_music')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_vehicle_behavior')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_fortifications')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_sound')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#include')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_busing')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' precache turret for popping and intermediate damage states')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_ger_tracked_panzer4_d_turret')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_ger_tracked_panther_d_turret')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_ger_tracked_king_tiger_d_turret')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_ger_tracked_panzer4v1_dmg1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_ger_tracked_panther_dmg1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_ger_tracked_king_tiger_dmg1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'katyusha_rocket')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon_rus_reznov_knife')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon_rus_mosinnagant_rifle')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' precache rumble')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheRumble')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tank_damage_heavy_mp')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheRumble')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tank_damage_light_mp')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'campaign')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'russian')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' All vehicles setup')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_see2_panther')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_ger_tracked_panther')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_see2_ot34')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_rus_tracked_ot34')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_see2_t34')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_rus_tracked_t34')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_see2_physics_t34')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_rus_tracked_ot34')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_see2_tiger')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_ger_tracked_king_tiger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_see2_panzeriv')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_ger_tracked_panzer4v1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_truck')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_ger_wheeled_covered_opel_blitz')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'opel')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_see2_flak88')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'artillery_ger_flak88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_aircraft')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_rus_airplane_il2')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'il2')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'false')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' cut down from 3 turrets to 0')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon_machinegun_tiger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachemodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_rus_tracked_ot34_d')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precacheturret')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'allied_hull_flamethrower')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'precachestring')
('LPAREN', '(')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'SEE2_FLAMETHROWER_HINT')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachestring')
('LPAREN', '(')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'SEE2_MG_COOP_HINT')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'precachestring')
('LPAREN', '(')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'SEE2_ADS_HINT')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Setup start points - Currently gets the level logically to this state does not warp players yet')
('NEWLINE', '\n')
('IDENTIFIER', 'default_start')
('LPAREN', '(')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'field_begin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'add_start')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio_tower')
('QUOTE', '"')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'radio_tower_begin')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'STARTS_SEE2_RADIOTOWER')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'add_start')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fuel_depot')
('QUOTE', '"')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'fuel_depot_begin')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'STARTS_SEE2_FUELDEPOT')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'add_start')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'air_strike')
('QUOTE', '"')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'air_strike_begin')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'STARTS_SEE2_AIRSTRIKE')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'maps\\_drones::init();\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'drones_per_wave')
('ASSIGNMENT', '=')
('IDENTIFIER', '8')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_level')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_drone')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'init')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_drones')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'allies')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', '32')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_drones')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', '32')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_fx')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_drones')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_anim')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_breadcrumbs')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_amb')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_load')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'difficulty_scale')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'init_level_flags')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '-- LEVEL THROTTLING SPAWN FUNCTION VARIABLES')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'tune_max_ai_numbers')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'character\\char_ger_pnzgren_k98::precache();')
('NEWLINE', '\n')
('COMMENT', 'character\\char_rus_r_rifle::precache();')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' These are called everytime a drone is spawned in to set up the character.')
('NEWLINE', '\n')
('COMMENT', 'level.drone_spawnFunction["axis"] = character\\char_ger_pnzgren_k98::main;')
('NEWLINE', '\n')
('COMMENT', 'level.drone_spawnFunction["allies"] = character\\char_rus_r_rifle::main; ')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'tune_ai')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_armor')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'death_bucket')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'line_queue')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'identified_entities')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radio_tower_goal_nodes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetNodeArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower goal')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fuel_depot_goal_nodes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetNodeArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fuel depot goal')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'custom_target')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'vehicle_death_thread')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'vehicle_death_thread')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'see2_panzeriv')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_vehicle_behavior')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'see2_veh_death_thread')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'vehicle_death_thread')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'see2_tiger')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_vehicle_behavior')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'see2_veh_death_thread')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'vehicle_death_thread')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'see2_panther')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_vehicle_behavior')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'see2_veh_death_thread')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'finished_events')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_friendly_consistency_check')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_radio_tower_explode')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_finalbattle_alternate')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', '-- Glocke: to fit with the new objective text')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'centroid')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'keep_track_of_player_centroid')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_dialog_triggers')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'see2_handleLineQueue')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_points')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_points')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_points')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'radio tower')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_points')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_points')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'fuel depot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_points')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_points')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'airstrike')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'invalid_retreat_points')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'time_between_dialogue')
('ASSIGNMENT', '=')
('IDENTIFIER', '9')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'dialogue_timer')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_close_infantry_for_warning')
('ASSIGNMENT', '=')
('IDENTIFIER', '3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_distance_for_close_infantry')
('ASSIGNMENT', '=')
('IDENTIFIER', '120')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Idle warning variables')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'current_idle_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_idle_dist_sq')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'idle_warn_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '10')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'num_idle_lines')
('ASSIGNMENT', '=')
('IDENTIFIER', '6')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'update_dialogue_timer')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_achievement_spawn_func')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'spawn_func_throttle_spawns')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'callbackSaveRestored')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'see2_callback_saveRestored')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('DIVIDE', '/')
('PREPROCESSOR_DIRECTIVE', '#')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'debug_ai_prints')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#/')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'BadPlacesEnable')
('LPAREN', '(')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' GLOBAL UTILITY FUNCTIONS')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tune_max_ai_numbers')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_ai_spawn')
('ASSIGNMENT', '=')
('IDENTIFIER', '20')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_vehicles')
('ASSIGNMENT', '=')
('IDENTIFIER', '8')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_ai_spawn_current')
('ASSIGNMENT', '=')
('IDENTIFIER', '20')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_vehicle_spawn_current')
('ASSIGNMENT', '=')
('IDENTIFIER', '8')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', "TODO: FINISH THIS LATER WHEN I KNOW WHAT I'M DOING WITH IT")
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'current_number_of_vehicles')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'current_number_of_vehicles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_vehicle')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'classname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'current_number_of_vehicles')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' AI targeting tune values')
('NEWLINE', '\n')
('IDENTIFIER', 'tune_ai')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'number_miss_structs')
('ASSIGNMENT', '=')
('IDENTIFIER', '8')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_miss_distance')
('ASSIGNMENT', '=')
('IDENTIFIER', '150')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_miss_distance')
('ASSIGNMENT', '=')
('IDENTIFIER', '250')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'Distances used for tank targeting')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_tank_target_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '4000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_tank_firing_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '3500')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_threshold')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '6')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'min_pzrsk_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '500')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'max_pzrsk_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '2500')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_panzerschreck_eng_distsq')
('ASSIGNMENT', '=')
('IDENTIFIER', 'min_pzrsk_dist')
('MULTIPLY', '*')
('IDENTIFIER', 'min_pzrsk_dist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_panzerschreck_eng_distsq')
('ASSIGNMENT', '=')
('IDENTIFIER', 'max_pzrsk_dist')
('MULTIPLY', '*')
('IDENTIFIER', 'max_pzrsk_dist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' --- DIFFICULTY SCALING ---')
('NEWLINE', '\n')
('IDENTIFIER', 'difficulty_scale')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'GetDifficulty')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'easy')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_player_armor')
('ASSIGNMENT', '=')
('IDENTIFIER', '7500')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_base_lag_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_targeters')
('ASSIGNMENT', '=')
('IDENTIFIER', '3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_percent_life_at_checkpoint')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'time_before_regen')
('ASSIGNMENT', '=')
('IDENTIFIER', '9')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'no_shoot_increase')
('ASSIGNMENT', '=')
('DOT', '.')
('IDENTIFIER', '05')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'medium')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_player_armor')
('ASSIGNMENT', '=')
('IDENTIFIER', '6000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_base_lag_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '75')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_targeters')
('ASSIGNMENT', '=')
('IDENTIFIER', '3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_percent_life_at_checkpoint')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '75')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'time_before_regen')
('ASSIGNMENT', '=')
('IDENTIFIER', '10')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'no_shoot_increase')
('ASSIGNMENT', '=')
('DOT', '.')
('IDENTIFIER', '05')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'hard')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_player_armor')
('ASSIGNMENT', '=')
('IDENTIFIER', '4500')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_base_lag_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_targeters')
('ASSIGNMENT', '=')
('IDENTIFIER', '4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_percent_life_at_checkpoint')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'time_before_regen')
('ASSIGNMENT', '=')
('IDENTIFIER', '11')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'no_shoot_increase')
('ASSIGNMENT', '=')
('DOT', '.')
('IDENTIFIER', '03')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'fu')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_player_armor')
('ASSIGNMENT', '=')
('IDENTIFIER', '3000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_base_lag_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_targeters')
('ASSIGNMENT', '=')
('IDENTIFIER', '4')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_percent_life_at_checkpoint')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'time_before_regen')
('ASSIGNMENT', '=')
('IDENTIFIER', '12')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'no_shoot_increase')
('ASSIGNMENT', '=')
('DOT', '.')
('IDENTIFIER', '01')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'armor_per_frame')
('ASSIGNMENT', '=')
('IDENTIFIER', 'int')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_player_armor')
('DIVIDE', '/')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'time_before_regen')
('DIVIDE', '/')
('IDENTIFIER', '20')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: keep_track_of_achievement')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Keeps track of the status of the achievement and then awards it to all players when it has been accomplished')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'keep_track_of_achievement')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', "-- because the water towers weren't hooked to anything")
('NEWLINE', '\n')
('IDENTIFIER', 'water_tower_trigs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'water_tower_trig')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'water_tower_trigs')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'water_tower_trigs')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'track_water_tower_triggers')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '-- The Max that are in the level')
('NEWLINE', '\n')
('IDENTIFIER', 'water_tower_number')
('ASSIGNMENT', '=')
('IDENTIFIER', '3')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'bunker_number')
('ASSIGNMENT', '=')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'schreck_number')
('ASSIGNMENT', '=')
('IDENTIFIER', '14')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '-- The counters')
('NEWLINE', '\n')
('IDENTIFIER', 'water_tower_achievement')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'bunker_achievement')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'schreck_tower_achievement')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'achievement_destroy_notify')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'item')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'item')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'water_tower')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'water_tower_achievement')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'bunker')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'bunker_achievement')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'schreck_tower')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'schreck_tower_achievement')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'default')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '-- Check and give award')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'water_tower_achievement')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', 'water_tower_number')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'bunker_achievement')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', 'bunker_number')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'schreck_tower_achievement')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', 'schreck_number')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'giveachievement_wrapper')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'SEE2_ACHIEVEMENT_TOWER')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'track_water_tower_triggers')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'achievement_destroy_notify')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'water_tower')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_achievement_spawn_func')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_func_throttle_spawns')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ai_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetSpawnerArray')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'ai_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'ai_array[i] add_spawn_function( ::throttle_ai_keep_time ); //called by throttle_ai_make_room')
('NEWLINE', '\n')
('IDENTIFIER', 'ai_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'add_spawn_function')
('LPAREN', '(')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'throttle_ai_make_room')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'throttle_ai_keep_time')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'see2_life_time')
('PLUS_EQUALS', '+=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '001')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'throttle_ai_make_room')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ai')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetAIArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '-- ai setup')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'ai')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'ai')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'see2_life_time')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ai')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'see2_life_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ai')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'throttle_ai_keep_time')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'ai')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_ai_spawn_current')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ai')
('ASSIGNMENT', '=')
('IDENTIFIER', 'sort_ai_by_life_time')
('LPAREN', '(')
('IDENTIFIER', 'ai')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'num_ai_to_remove')
('ASSIGNMENT', '=')
('IDENTIFIER', 'ai')
('DOT', '.')
('IDENTIFIER', 'size')
('SUBTRACT', '-')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_ai_spawn_current')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num_ai_to_remove')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'ai[i] Delete(); //-- change this to bloody death')
('NEWLINE', '\n')
('IDENTIFIER', 'random_wait')
('ASSIGNMENT', '=')
('IDENTIFIER', 'RandomFloatRange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('DOT', '.')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ai')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'bloody_death')
('LPAREN', '(')
('IDENTIFIER', 'random_wait')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'sort_ai_by_life_time')
('LPAREN', '(')
('IDENTIFIER', 'nodes')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'j')
('ASSIGNMENT', '=')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', 'j')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'see2_life_time')
('GREATER_THAN', '>')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'see2_life_time')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'temp')
('ASSIGNMENT', '=')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', 'j')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'nodes')
('LBRACKET', '[')
('IDENTIFIER', 'j')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'temp')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'nodes')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: keep_track_of_player_centroid')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Keeps track of the centroid of all players for use by anyone who might want to stay')
('NEWLINE', '\n')
('COMMENT', '          as close to the players as a whole as possible')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'keep_track_of_player_centroid')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_first_player')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'num_players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'total')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'num_players')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'total')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'total')
('ASSIGNMENT', '=')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'total')
('ASSIGNMENT', '=')
('IDENTIFIER', 'total')
('PLUS', '+')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'centroid')
('ASSIGNMENT', '=')
('IDENTIFIER', 'total')
('DIVIDE', '/')
('IDENTIFIER', 'num_players')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: keep_grenade_bags_from_spawning')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Keeps grenade bags from spawning and saves us some entities')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'keep_grenade_bags_from_spawning')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'nextGrenadeDrop')
('ASSIGNMENT', '=')
('IDENTIFIER', '9999')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_flak88_guard')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a guard for flak88s')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Deprecated in favor of drones... I think')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_flak88_guard')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_group_spawn')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Waits until a predefined signal is sent then spawns a specific group')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_group_spawn')
('LPAREN', '(')
('IDENTIFIER', 'group')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'group ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'group')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' spawn')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'inform_on_touch_trigger')
('LPAREN', '(')
('IDENTIFIER', 'trigger')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('IDENTIFIER', 'trigger')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'skipto_flag_names')
('LBRACKET', '[')
('IDENTIFIER', 'group')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'do_area_spawn')
('LPAREN', '(')
('IDENTIFIER', 'group')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_friendly_consistency_check')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This iterates through all friendly paths and makes sure all are sound in terms of')
('NEWLINE', '\n')
('COMMENT', '          naming conventions')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_friendly_consistency_check')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('DIVIDE', '/')
('PREPROCESSOR_DIRECTIVE', '#')
('NEWLINE', '\n')
('IDENTIFIER', 'names')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'names')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'friendly 1')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'names')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'friendly 2')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'names')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'friendly 3')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'advance_triggers')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly advance trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'advance_triggers')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'advance_nodes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetVehicleNodeArray')
('LPAREN', '(')
('IDENTIFIER', 'advance_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'advance_nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('IDENTIFIER', '3')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'iprintlnbold')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Insufficient advance nodes for trigger ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'advance_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'j')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'names')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'found')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'k')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'k')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'advance_nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'k')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'advance_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'k')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'script_string')
('EQUALS_TO', '==')
('IDENTIFIER', 'names')
('LBRACKET', '[')
('IDENTIFIER', 'j')
('RBRACKET', ']')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'found')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'found')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'iprintlnbold')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Advance node ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'advance_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' does not exist for ent ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'names')
('LBRACKET', '[')
('IDENTIFIER', 'j')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#/')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: see2_callback_saveRestored')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: ?')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This is threaded when the level reloads from a checkpoint. It handles armor fixup')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'see2_callback_saveRestored')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_callbackglobal')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'Callback_SaveRestored')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('DOT', '.')
('IDENTIFIER', 'armor')
('DIVIDE', '/')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('DOT', '.')
('IDENTIFIER', 'maxarmor')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('DOT', '.')
('IDENTIFIER', 'armor')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('DOT', '.')
('IDENTIFIER', 'maxarmor')
('MULTIPLY', '*')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_percent_life_at_checkpoint')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: explosive_damage')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: anything')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: checks to see if a damage type is considered explosive for purposes of destruction')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'explosive_damage')
('LPAREN', '(')
('IDENTIFIER', 'type')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('LPAREN', '(')
('IDENTIFIER', 'issubstr')
('LPAREN', '(')
('IDENTIFIER', 'type')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'GRENADE')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_OR', '||')
('IDENTIFIER', 'issubstr')
('LPAREN', '(')
('IDENTIFIER', 'type')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'PROJECTILE')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_OR', '||')
('IDENTIFIER', 'issubstr')
('LPAREN', '(')
('IDENTIFIER', 'type')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'EXPLOSIVE')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_OR', '||')
('IDENTIFIER', 'issubstr')
('LPAREN', '(')
('IDENTIFIER', 'type')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'BURNED')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: inform_on_touch_trigger')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a trigger')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This sends a signal to the level when the trigger is breached, commented section checked')
('NEWLINE', '\n')
('COMMENT', "          that the entity triggering was a player. I don't know why this was disabled. It may be")
('NEWLINE', '\n')
('COMMENT', '          why the airstrike is triggering early')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Look and see where this is being used and see why it is not checking for players')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'inform_on_touch_trigger')
('LPAREN', '(')
('IDENTIFIER', 'event')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('IDENTIFIER', 'event')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\n\tbreaker = false;\n\twhile( !breaker )\n\t{\n\t\tfor( i = 0; i < get_players().size; i++ )\n\t\t{\n\t\t\tif( get_players()[i] isTouching( self ) )\n\t\t\t{\n\t\t\t\tself notify( "trigger" );\n\t\t\t\tbreaker = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\twait( 0.05 );\n\t}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: inform_on_damage_trigger')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a damage trigger')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This sends a notify to the level if a player or friendly tank does explosive damage to')
('NEWLINE', '\n')
('COMMENT', '          a trigger')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'inform_on_damage_trigger')
('LPAREN', '(')
('IDENTIFIER', 'event')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'damage')
('COMMA', ',')
('IDENTIFIER', 'other')
('COMMA', ',')
('IDENTIFIER', 'direction')
('COMMA', ',')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'damage_type')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'explosive_damage')
('LPAREN', '(')
('IDENTIFIER', 'damage_type')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'other')
('DOT', '.')
('IDENTIFIER', 'script_team')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'other')
('DOT', '.')
('IDENTIFIER', 'script_team')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'allies')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('IDENTIFIER', 'event')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: is_in_player_arc')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an object, with a player as an argument')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This checks to see if the object is in the view arc of the player passed in')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Maybe have it adjust view arc properly for widescreen FOV')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'is_in_player_arc')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'myOrigin')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playerOrigin')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'diff')
('ASSIGNMENT', '=')
('IDENTIFIER', 'myOrigin')
('SUBTRACT', '-')
('IDENTIFIER', 'playerOrigin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'vectortoangles')
('LPAREN', '(')
('IDENTIFIER', 'diff')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'abs')
('LPAREN', '(')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('SUBTRACT', '-')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '32')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_level')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Does all threat bias setup')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_level')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'CreateThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'players')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'create_see2_threat_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'players')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'CreateThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player tanks')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'create_see2_threat_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player tanks')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'CreateThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy antitank')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'create_see2_threat_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy antitank')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'CreateThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy infantry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'create_see2_threat_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy infantry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'CreateThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly antitank')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'create_see2_threat_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly antitank')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'CreateThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly infantry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'create_see2_threat_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly infantry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'CreateThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly armor')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'create_see2_threat_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly armor')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'create_see2_threat_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy armor')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'SetThreatBias( "players", "enemy antitank", 10000 );')
('NEWLINE', '\n')
('IDENTIFIER', 'SetThreatBias')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player tanks')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'enemy antitank')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '10000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'SetThreatBias')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly armor')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'enemy antitank')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '15000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'SetIgnoreMeGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'players')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'enemy infantry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'SetIgnoreMeGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'players')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'enemy antitank')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'SetIgnoreMeGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly armor')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'enemy infantry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_player_tanks')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Loads all players into their tanks, keeps them from exiting. It replaces any unused')
('NEWLINE', '\n')
('COMMENT', '          player tanks with friendly AI tanks and threads all the friendly vehicle AI stuff on')
('NEWLINE', '\n')
('COMMENT', '          them.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_player_tanks')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'entry_points')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '4')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'entry_points')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'entry_points')
('COMMA', ',')
('IDENTIFIER', 'getstruct')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'orig_enter_tanks')
('QUOTE', '"')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'i')
('PLUS', '+')
('IDENTIFIER', '1')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'entry_points')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getent')
('LPAREN', '(')
('IDENTIFIER', 'entry_points')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('DOT', '.')
('IDENTIFIER', 'animname')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'ot34')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'i')
('EQUALS_TO', '==')
('IDENTIFIER', '2')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'coop')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " Set the players' origin to the entry point because useby() is based on distance")
('NEWLINE', '\n')
('COMMENT', 'players[i] setOrigin( entry_points[i].origin );')
('NEWLINE', '\n')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'setOrigin')
('LPAREN', '(')
('IDENTIFIER', 'tank')
('IDENTIFIER', 'gettagorigin')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tag_enter_driver')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'setThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'players')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('IDENTIFIER', 'makevehicleunusable')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('DIVIDE', '/')
('PREPROCESSOR_DIRECTIVE', '#')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('IDENTIFIER', 'makevehicleusable')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#/')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('IDENTIFIER', 'useby')
('LPAREN', '(')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'mytank')
('ASSIGNMENT', '=')
('IDENTIFIER', 'tank')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'get_players()[i] thread check_for_flamethrower();')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'update_current_targeters')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'delta')
('ASSIGNMENT', '=')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_breadcrumbs')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_new_breadcrumb_ent')
('LPAREN', '(')
('IDENTIFIER', 'tank')
('COMMA', ',')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', '200')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'delta')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('DOT', '.')
('IDENTIFIER', 'my_targeting_delta')
('ASSIGNMENT', '=')
('IDENTIFIER', 'delta')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'vehicle_damage')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'disconnect_paths_around_me_based_on_speed')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'tank thread triggered_drop_bad_areas();')
('NEWLINE', '\n')
('COMMENT', 'tank thread constant_drop_bad_place();')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'friendly_fire_kill_tank')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', ' god mode for tanks')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'keep_tank_alive')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('COMMA', ',')
('IDENTIFIER', 'tank')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'old_script_int')
('ASSIGNMENT', '=')
('IDENTIFIER', 'tank')
('DOT', '.')
('IDENTIFIER', 'script_int')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'tank')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' spawn_trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'move_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' move_trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_trigger')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'move_trigger')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'new_tank')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('COMMA', ',')
('IDENTIFIER', 'new_tank')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'new_tank')
('DOT', '.')
('IDENTIFIER', 'script_int')
('ASSIGNMENT', '=')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'new_tank')
('IDENTIFIER', 'setSpeed')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '1000')
('COMMA', ',')
('IDENTIFIER', '1000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'new_tank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_player_support')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'new_tank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'cleanup_targeting')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'new_tank')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_vehicle')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'mgoff')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'new_tank')
('DOT', '.')
('IDENTIFIER', 'current_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getVehicleNode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' start')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '-- Whenever a set of AI wants to retreat and try to pick a new goal node, they will')
('NEWLINE', '\n')
('COMMENT', '   cause the player tanks to drop bad areas, so that the AI will try and avoid them a little smarter.')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'triggered_drop_bad_areas')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', "-- shouldn't ever happen with a players tank...")
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ai_set_new_retreat_node')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self_forward')
('ASSIGNMENT', '=')
('IDENTIFIER', 'AnglesToForward')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self_right')
('ASSIGNMENT', '=')
('IDENTIFIER', 'AnglesToRight')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'BadPlace_Cylinder')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'center')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', '64')
('COMMA', ',')
('IDENTIFIER', '100')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'BadPlace_Cylinder')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'front_left')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'self_forward')
('MULTIPLY', '*')
('IDENTIFIER', '62')
('RPAREN', ')')
('SUBTRACT', '-')
('LPAREN', '(')
('IDENTIFIER', 'self_right')
('MULTIPLY', '*')
('IDENTIFIER', '62')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '64')
('COMMA', ',')
('IDENTIFIER', '100')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'BadPlace_Cylinder')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'front_right')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'self_forward')
('MULTIPLY', '*')
('IDENTIFIER', '62')
('RPAREN', ')')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'self_right')
('MULTIPLY', '*')
('IDENTIFIER', '62')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '64')
('COMMA', ',')
('IDENTIFIER', '100')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'BadPlace_Cylinder')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rear_left')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SUBTRACT', '-')
('LPAREN', '(')
('IDENTIFIER', 'self_forward')
('MULTIPLY', '*')
('IDENTIFIER', '62')
('RPAREN', ')')
('SUBTRACT', '-')
('LPAREN', '(')
('IDENTIFIER', 'self_right')
('MULTIPLY', '*')
('IDENTIFIER', '62')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '64')
('COMMA', ',')
('IDENTIFIER', '100')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'BadPlace_Cylinder')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rear_right')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SUBTRACT', '-')
('LPAREN', '(')
('IDENTIFIER', 'self_forward')
('MULTIPLY', '*')
('IDENTIFIER', '62')
('RPAREN', ')')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'self_right')
('MULTIPLY', '*')
('IDENTIFIER', '62')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', '64')
('COMMA', ',')
('IDENTIFIER', '100')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'constant_drop_bad_place')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'lifetime')
('ASSIGNMENT', '=')
('IDENTIFIER', '2')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'old_position')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self_forward')
('ASSIGNMENT', '=')
('IDENTIFIER', 'AnglesToForward')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self_right')
('ASSIGNMENT', '=')
('IDENTIFIER', 'AnglesToRight')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'old_position')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '8')
('MULTIPLY', '*')
('IDENTIFIER', '8')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'BadPlace_Cylinder')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'center')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'lifetime')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', '200')
('COMMA', ',')
('IDENTIFIER', '100')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'BadPlace_Cylinder( "front_left", \tlifetime, \tself.origin + (self_forward * 62) - (self_right * 62), 64, 100, "axis" );')
('NEWLINE', '\n')
('COMMENT', 'BadPlace_Cylinder( "front_right", lifetime, \tself.origin + (self_forward * 62) + (self_right * 62), 64, 100, "axis" );')
('NEWLINE', '\n')
('COMMENT', 'BadPlace_Cylinder( "rear_left", \tlifetime, \tself.origin - (self_forward * 62) - (self_right * 62), 64, 100, "axis" );')
('NEWLINE', '\n')
('COMMENT', 'BadPlace_Cylinder( "rear_right", \tlifetime, \tself.origin - (self_forward * 62) + (self_right * 62), 64, 100, "axis" );')
('NEWLINE', '\n')
('IDENTIFIER', 'old_position')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', "-- This is done on the player's tank to try and keep AI from running through him.")
('NEWLINE', '\n')
('COMMENT', '-- going to try and do this based on speed.')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'disconnect_paths_around_me_based_on_speed')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', '-- this will probably never get called')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetSpeed')
('LPAREN', '(')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'DisconnectPaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetSpeed')
('LPAREN', '(')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'ConnectPaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_delete_triggers')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Threads delete_trigger behavior on all triggers threaded as such.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_delete_triggers')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'delete_triggers')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger_delete')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'delete_triggers')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'delete_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_delete_trigger')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_delete_trigger')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a trigger whose script_noteworthy is trigger_delete')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Deletes any entities that contact the trigger')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_delete_trigger')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_early_tanks')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: sets up all flame bunker fortifications, makes player tanks invulnerable, threads a ')
('NEWLINE', '\n')
('COMMENT', '          bunch of basic level functions. Is a poorly named function :(')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_early_tanks')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flak88_guard_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flak 88 guards')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'flak88_guard_array')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'setup_flak88_guard')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flame_bunker_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flame bunker one guard')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flame_bunker_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_combine')
('LPAREN', '(')
('IDENTIFIER', 'flame_bunker_array')
('COMMA', ',')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flame bunker two guard')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flame_bunker_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_combine')
('LPAREN', '(')
('IDENTIFIER', 'flame_bunker_array')
('COMMA', ',')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flame bunker three guard')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'flame_bunker_array')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'setup_flame_bunker_guard')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'level thread setup_spawngroup_generics( 0 );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\n\tvehicle = getent("the_gun","targetname");\n\t\t\n\t// here\'s the magic, the arty move function\t\n\tvehicle do_arty_move( "initial_arty_node" );\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\n\tlevel.friendly_tanks[0] = getent( "t34_1", "targetname" );\n\tlevel.friendly_tanks[1] = getent( "t34_2", "targetname" );\n\tlevel.friendly_tanks[2] = getent( "t34_3", "targetname" );\n\t\n\tlevel.friendly_tanks[0] thread keep_tank_alive();\n\tlevel.friendly_tanks[1] thread keep_tank_alive();\n\tlevel.friendly_tanks[2] thread keep_tank_alive();\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_flame_bunker')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flame bunker one')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'bunker one flamed')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', 'false')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_flame_bunker')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flame bunker two')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'bunker two flamed')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_flame_bunker')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flame bunker three')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'bunker three flamed')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_flame_bunker')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flame bunker four')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'bunker four flamed')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_flame_bunker')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flame bunker six')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'bunker six flamed')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'keep_grenade_bags_from_spawning')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'thread wait_for_guard_tower_sploders(); // Glocke: replaced by do_fortification_spawn')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_fake_schrecks')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '4')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ent')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_tank_')
('QUOTE', '"')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'i')
('PLUS', '+')
('IDENTIFIER', '1')
('RPAREN', ')')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('COMMA', ',')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', " TEMP put in so players don't die in tanks")
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'keep_tank_alive')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_friendly_advance_triggers')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('DIVIDE', '/')
('PREPROCESSOR_DIRECTIVE', '#')
('NEWLINE', '\n')
('COMMENT', 'level thread draw_ent_locations( level.friendly_tanks, "*TANK*", "stop_draw_tank_locations" );')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#/')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_area_spawn')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: waits on any area spawn triggers that exist for listed areaNum. Sends a signal that ')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\twill start the area spawn when the trigger is activated')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_area_spawn')
('LPAREN', '(')
('IDENTIFIER', 'areaNum')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'area')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'areaNum')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' spawn trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'trigger_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_spawngroup_generics')
('LPAREN', '(')
('IDENTIFIER', 'areaNum')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' Vehicle Spawns')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_fortification_spawn')
('LPAREN', '(')
('IDENTIFIER', 'areaNum')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' Drone Spawns')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\n\tif( areaNum == 3 )\n\t{\n\t\tlevel thread do_tiger_retreats();\n\t}\n\t')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'area')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'areaNum')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' spawned')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: log_finished_event')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This keeps track of events for use by other systems that may be waiting on an event.')
('NEWLINE', '\n')
('COMMENT', '          This should probably be replaced with two or three flags in the subsystems still using')
('NEWLINE', '\n')
('COMMENT', '          it.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Should be deprecated at some point')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'Log_Finished_Event')
('LPAREN', '(')
('IDENTIFIER', 'event')
('COMMA', ',')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'waittime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'array_check_for_dupes')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'finished_events')
('COMMA', ',')
('IDENTIFIER', 'event')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'finished_events')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'finished_events')
('COMMA', ',')
('IDENTIFIER', 'event')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('IDENTIFIER', 'event')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' PLAYER DAMAGE AND HUD')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: begin_armor_regen')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: player vehicle')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This begins regenerating the player armor until the player is damaged or dies')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'begin_armor_regen')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'armor')
('GREATER_THAN', '>')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxarmor')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'armor')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxarmor')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'armor')
('EQUALS_TO', '==')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxarmor')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'armor')
('PLUS_EQUALS', '+=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'armor_per_frame')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'armor_full')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: check_for_flamethrower')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a player')
('NEWLINE', '\n')
('COMMENT', " PURPOSE: This causes the hull mounted flamethrower or mg to mirror the player's turret ")
('NEWLINE', '\n')
('COMMENT', '          direction, allowing aiming')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'check_for_flamethrower')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'disconnect')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'mytank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_my_loop')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_my_loop')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: player tank')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: actually does the aiming of the hull gun')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: none')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_my_loop')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop firing')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'getTagAngles')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tag_barrel')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SUBTRACT', '-')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'angles')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'forward')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anglesToForward')
('LPAREN', '(')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'target_vec')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'getTagOrigin')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tag_gunner_barrel1')
('QUOTE', '"')
('RPAREN', ')')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', 'forward')
('MULTIPLY', '*')
('IDENTIFIER', '50')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setGunnerTargetVec')
('LPAREN', '(')
('IDENTIFIER', 'target_vec')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: vehicle_damage')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: player vehicle')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This does the scripted damage system for the tank. It keeps track of an armor value')
('NEWLINE', '\n')
('COMMENT', '          which is decreased by enemy attacks and also sets up the placeholder vehicle damage')
('NEWLINE', '\n')
('COMMENT', '          hud elements. It then threads the functions that will keep track of and act on these')
('NEWLINE', '\n')
('COMMENT', '          values.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'vehicle_damage')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'vehicle_owner')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'getvehicleowner')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'vehicle_owner')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'vehicle_owner')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'disconnect')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'myPlayer')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', 'vehicle_owner')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'myPlayer')
('ASSIGNMENT', '=')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'myPlayer')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'armor')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_player_armor')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxarmor')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_player_armor')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudelem = newClientHudElem(myPlayer);')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudback = newClientHudElem(myPlayer);')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudelem.sort = 2;')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudelem.x = 111;')
('NEWLINE', '\n')
('COMMENT', 'self.maxhudy = 72;')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudelem.y = 380;')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'starty')
('ASSIGNMENT', '=')
('IDENTIFIER', '380')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudback.sort = 1;')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudback.x = 110;')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudback.y = 379;')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudback setshader( "black", 11, 74 );')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudelem setshader( "white", 8, 72 );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_veh_damage_hud')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_veh_extra_damage_no_play')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'amount')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isGodMode')
('LPAREN', '(')
('IDENTIFIER', 'myPlayer')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' ignore mortar hits TODO check this for other cases')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'array_check_for_dupes')
('LPAREN', '(')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'array_check_for_dupes')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'armor')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dmg_faked')
('ASSIGNMENT', '=')
('IDENTIFIER', 'amount')
('MULTIPLY', '*')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'do_extra_dmg_no_fire')
('SEMICOLON', ';')
('COMMENT', "-- modifier if player isn't firing main turret")
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'too_close_damage_modifier')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dmg_faked')
('ASSIGNMENT', '=')
('IDENTIFIER', 'dmg_faked')
('MULTIPLY', '*')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'too_close_damage_modifier')
('SEMICOLON', ';')
('COMMENT', '-- modifier if player is humping an AI tank')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'armor')
('SUBTRACT_EQUALS', '-=')
('IDENTIFIER', 'dmg_faked')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'kill_tank')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isdefined')
('LPAREN', '(')
('IDENTIFIER', 'myPlayer')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'hurtTime')
('ASSIGNMENT', '=')
('IDENTIFIER', 'gettime')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'hurtTime')
('ASSIGNMENT', '=')
('IDENTIFIER', 'hurtTime')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'amount')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '500')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'myPlayer')
('IDENTIFIER', 'PlayRumbleOnEntity')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tank_damage_light_mp')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'myPlayer')
('IDENTIFIER', 'PlayRumbleOnEntity')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tank_damage_heavy_mp')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'myPlayer')
('IDENTIFIER', 'viewkick')
('LPAREN', '(')
('IDENTIFIER', '127')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myPlayer')
('IDENTIFIER', 'player_flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_has_red_flashing_overlay')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'myPlayer')
('IDENTIFIER', 'startfadingblur')
('LPAREN', '(')
('IDENTIFIER', '3')
('COMMA', ',')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'playerJustGotRedFlashing')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', "-- This monitors whether or not the player has fired their turret or not, if they haven't then")
('NEWLINE', '\n')
('COMMENT', '   the damage starts to scale up on the enemy tanks')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'do_veh_extra_damage_no_play')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'do_extra_dmg_no_fire')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'do_extra_dmg_no_fire')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_veh_extra_damage_no_play_update')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon_fired')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'do_extra_dmg_no_fire')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'do_veh_extra_damage_no_play_update')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon_fired')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '60')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'do_extra_dmg_no_fire')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '3')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'do_extra_dmg_no_fire')
('PLUS_EQUALS', '+=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'no_shoot_increase')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '10')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', '-- kind of arbitrary')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: kill_tank')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: player tank')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This does the vehicle model swap, plays death fx and locks player controls. This is')
('NEWLINE', '\n')
('COMMENT', '          because the player or tank dying does terrible things to the engine last I checked.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'kill_tank')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'see2_fail_the_mission_coop')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_rus_tracked_ot34_d')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'tank_destruct')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'getVehicleOwner')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'freezeControls')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'missionFailedWrapper')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'see2_fail_the_mission_coop')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'vehicle_rus_tracked_ot34_d')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'tank_destruct')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'getVehicleOwner')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'freezeControls')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_quotes')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'displayMissionFailed')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', 'player')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_quotes')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'displayPlayerDead')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'println')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Player #')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' is dead')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_quotes')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'displayTeammateDead')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'println')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'Player #')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' is alive')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_utility')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'missionFailedWrapper')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: friendly_fire_kill_tank')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: player tank')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This will trigger a mission fail if a player repeatedly shoots a friendly AI tank')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'friendly_fire_kill_tank')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'getVehicleOwner')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isPlayer')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'friendlyfire_count')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'friendly_fire_kill_tank_reduce')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'friendly attacked by player')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'player')
('EQUALS_TO', '==')
('IDENTIFIER', 'attacker')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'friendlyfire_count')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'friendlyfire_count')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', '3')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_friendlyfire')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'missionfail')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'friendly_fire_kill_tank_reduce')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'friendlyfire_count')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '10')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'friendlyfire_count')
('SUBTRACT', '-')
('SUBTRACT', '-')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: cleanup_damage_hud')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: player')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This gets rid of the damage hud for cutscenes, etc.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'cleanup_damage_hud')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop damage hud')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'self.myTank.armorhudelem.alpha = 0;')
('NEWLINE', '\n')
('COMMENT', 'self.myTank.armorhudback.alpha = 0;')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_veh_damage_hud')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: player vehicle')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This shows the armor bar (which is temp) and decreases it appropriately. This will ')
('NEWLINE', '\n')
('COMMENT', '          eventually be replaced by coloring the tank icon next to the compass red to show ')
('NEWLINE', '\n')
('COMMENT', '          damage.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Will eventually be deprecated in favor of coloring tank icon through code')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_veh_damage_hud')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'vehicle_owner')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'getvehicleowner')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'vehicle_owner')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'vehicle_owner')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'disconnect')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'vehicle_owner')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop damage hud')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'vehicle_owner')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'cleanup_damage_hud')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'slow_flash_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'slow_flash_color')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'fast_flash_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'fast_flash_color')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'regen_armor')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'current_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'percent')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'armor')
('DIVIDE', '/')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxarmor')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'percent')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'percent')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', 'current_y = int( self.maxhudy * percent );')
('NEWLINE', '\n')
('COMMENT', 'if( current_y <= 0 )')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', 'current_y = 1;')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudelem setshader( "white", 8, current_y );')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudelem.y = self.starty + (self.maxhudy-current_y);')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'percent')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'percent')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'current_time')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', 'slow_flash_time')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'current_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'percent_flash')
('ASSIGNMENT', '=')
('IDENTIFIER', 'current_time')
('DIVIDE', '/')
('IDENTIFIER', 'slow_flash_time')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudelem.color = ( (1-percent_flash)*(1,1,1) ) + (percent_flash*slow_flash_color);')
('NEWLINE', '\n')
('IDENTIFIER', 'current_time')
('PLUS_EQUALS', '+=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'percent')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'current_time')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', 'fast_flash_time')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'current_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'percent_flash')
('ASSIGNMENT', '=')
('IDENTIFIER', 'current_time')
('DIVIDE', '/')
('IDENTIFIER', 'fast_flash_time')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudelem.color = ( (1-percent_flash)*(1,1,1) ) + (percent_flash*fast_flash_color);')
('NEWLINE', '\n')
('IDENTIFIER', 'current_time')
('PLUS_EQUALS', '+=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'self.armorhudelem.color = (1, 1, 1);')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setHealthPercent')
('LPAREN', '(')
('IDENTIFIER', 'percent')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '\n\t\tself.frontarmorhudelem setText( "front armor: "+self.frontarmor );\n\t\tself.backarmorhudelem setText( "back armor: "+self.backarmor );\n\t\tself.rightarmorhudelem setText( "right armor: "+self.rightarmor );\n\t\tself.leftarmorhudelem setText( "left armor: "+self.leftarmor );\n\t\t')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: regen_armor')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: player vehicle')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This waits until the player has not been damaged for a sufficiently long time (set')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\tin see2::difficulty_scale ) and then begins armor regeneration.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'regen_armor')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'time_since_last_damage')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'update_damage_timer')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_damage_events')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\n\ttimer_widget = undefined;\n\towner = self getVehicleOwner();\n\tif( isDefined( owner ) && isPlayer( owner ) )\n\t{\n\t\ttimer_widget = newclienthudelem( owner );\n\t\ttimer_widget.x = 20;\n\t\ttimer_widget.y = 20;\n\t\ttimer_widget settext( "Time before regen: 0" );\n\t\ttimer_widget.alpha = 0;\n\t}\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'time_since_last_damage')
('GREATER_THAN', '>')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'time_before_regen')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', '\n\t\t\tif( isDefined( timer_widget ) )\n\t\t\t{\n\t\t\t\ttimer_widget.alpha = 0;\n\t\t\t}\n\t\t\t')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'begin_armor_regen')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill_either')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'armor_full')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', '\n\t\telse if( isDefined( timer_widget ) )\n\t\t{\n\t\t\ttimer_widget.alpha = 1;\n\t\t\ttimer_widget settext( "Time before regen: "+(level.time_before_regen - self.time_since_last_damage) );\n\t\t}\n\t\t')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: update_damage_timer')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: player vehicle')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Increments the time since the player tank has last been damaged')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'update_damage_timer')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'time_since_last_damage')
('PLUS_EQUALS', '+=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_damage_events')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: player vehicle')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: resets the damage timer to zero whenever the player tank is damaged')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_damage_events')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'time_since_last_damage')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////')
('NEWLINE', '\n')
('COMMENT', ' DIALOG SUPPORT')
('NEWLINE', '\n')
('COMMENT', '///////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: update_dialog_timer')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Keeps track of the time since a dialog line has last been delivered')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'update_dialogue_timer')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'dialogue_timer')
('PLUS_EQUALS', '+=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_dialog_triggers')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Creates a thread on all level dialog triggers waiting for them to trigger their')
('NEWLINE', '\n')
('COMMENT', '          dialog event')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_dialog_triggers')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_first_player')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'dialog_triggers')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'dialog trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'dialog_triggers')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dialog_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_dialog_event')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_dialog_event')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: dialog trigger')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Waits until the dialog trigger is triggered, then plays the sound for the event')
('NEWLINE', '\n')
('COMMENT', '          corresponding to its script_string (see ::init_level_flags below for examples of ')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\tsetting up events, their endon signals, complete signals and pertinent flags.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_dialog_event')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isPlayer')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'do_sound_for_event')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_string')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_string')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_string')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_string')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: init_level_flags')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This initializes all level flags, including the ones used by the dialog system. The')
('NEWLINE', '\n')
('COMMENT', '          dialog system does this by adding entries indexed by event name into five arrays. ')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\tThe arrays and their purposes are:')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t1. event_flags = this contains an array of all the flags that are used for this event.')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t\t              These flags will be run through ::update_target_flag below whenever')
('NEWLINE', '\n')
('COMMENT', '                          this event is activated through ::do_sound_for_event. They will also')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t\t\t\t\t\t\t\t\tbe passed into the function in the event_functions array. Maximum ')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t\t\t\t\t\t\t\t\tnumber of flags for an event is currently 6, this can be increased by')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t\t\t\t\t\t\t\t\tcreating more arguments in the function calls contained in see2_sound.gsc')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t2. endon_signals = This is the signal which, if the level is notified with, will end')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t\t\t\t\t\t\t\t\tthis dialogue function, stopping the playback of any future lines, but')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t\t\t\t\t\t\t\t\tnot any queued lines from the event.')
('NEWLINE', '\n')
('COMMENT', '          3. complete_signals = This is the signal which, if the event completes successfully, ')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t\t\t\t\t\t\t\t\twill be sent to the level as a notify.')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t4. event_functions = This is the event function that will be called with all elements')
('NEWLINE', '\n')
('COMMENT', '                          of the event_flags array as arguments when the sound event is kicked ')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t\t\t\t\t\t\t\t\toff.')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t5. kill_events = This is the events that will have their kill signals sent automatically')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t\t\t\t\t\t\t\t\twhen this event begins.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Add any new flags or events requested')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'init_level_flags')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'Skipto flags')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'skipto_flag_names')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flak 88s destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'skipto_flag_names')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'skipto_flag_names')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'flak 88s destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'skipto_flag_names')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'skipto_flag_names')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'radio tower destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fuel depot cleared')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'skipto_flag_names')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'skipto_flag_names')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'fuel depot cleared')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'final line breached')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'skipto_flag_names')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'skipto_flag_names')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'final line breached')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'General dialog flags')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'playback happening')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' used for queuing and resolving story events;')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'battlechatter allowed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', ' allows preemption of battlechatter when appropriate during')
('NEWLINE', '\n')
('COMMENT', ' story events')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Misc Flags')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'coop')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'left_path')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'EVENT FLAGS')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'Battlechatter')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'do_firing')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'do_firing')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'heavy_damage')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'heavy_damage')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damaged')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'damaged')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'infantry_close')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'infantry_close')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'retreaters')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'retreaters')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destruction')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destruction')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'idle')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'idle')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'end battlechatter')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'DNE')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'do_battlechatter')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'Destroy Artillery')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'objective intro')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'objective intro')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'intro interrupt')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'objective intro')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'commissar done')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'objective intro')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'level_intro_announcements')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'flamethrower_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flamethrower_fired_once')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'flamethrower_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'flamethrower_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'flamethrower_fired_once')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ads_once')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'flamethrower_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'flamethrower_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'ads_once')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flamethrower_close_to_inf')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'flamethrower_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'flamethrower_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'flamethrower_close_to_inf')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'killed_with_flamethrower')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'flamethrower_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'flamethrower_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'killed_with_flamethrower')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'flamethrower_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'engaged second 88')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'flamethrower_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'tank weapon tutorial complete')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'flamethrower_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'flamethrower_tutorial')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destroyed first 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'moved into field')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'first 88 destroyed')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'first_88_obj')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'second_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'second_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'second_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destroyed second 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'second 88 in sights')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'second_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'second_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'second 88 in sights')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'second_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'moved past second position')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'second_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'second 88 destroyed')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'second_88_obj')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'second_88_obj')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destroyed first 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destroyed first 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destroyed second 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destroyed second 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destroyed third and fourth 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destroyed third and fourth 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destroyed second last 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destroyed second last 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destroyed last 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destroyed last 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'stop track 88')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'all 88s dead')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'dead_88')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'tank_move_fire_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'first_fired_on_event')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'tank_move_fire_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'tank_move_fire_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'first_fired_on_event')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'first_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'tank_move_fire_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'tank_move_fire_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'first_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'tank_move_fire_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'skipped mf tutorial')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'tank_move_fire_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'tank move tutorial complete')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'tank_move_fire_tutorial')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'tank_reload_movement_tutorial')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_activated')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'panther_activated')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_in_sights')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'panther_in_sights')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_first_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'panther_first_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_second_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'panther_second_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_third_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'panther_third_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_dead')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'panther_dead')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'engage last 88s')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'first panther dead')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'first_panther_prompt')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'path chosen')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'player chose... wisely')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'choose_path')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_right_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_right_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_right_path')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destroyed third and fourth 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_right_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_right_path')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destroyed second last 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_right_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_right_path')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destroyed last 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_right_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'stop choose right')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_right_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'all artillery destroyed')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_right_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'choose_right_path')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_left_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_left_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_left_path')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destroyed third and fourth 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_left_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_left_path')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destroyed second last 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_left_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_left_path')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'destroyed last 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_left_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'stop choose left')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_left_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'all artillery destroyed')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'choose_left_path')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'choose_left_path')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'player_exposed')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'internal_first_warning_given')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'player_exposed')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'player_exposed')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'internal_first_warning_given')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'internal_second_warning_given')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'player_exposed')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'player_exposed')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'internal_second_warning_given')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'player_exposed')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'player not exposed')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'player_exposed')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'all warnings given')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'player_exposed')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'player_exposed')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Radio tower')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio_tower_visible')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'radio_tower_visible')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio_tower_close')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'radio_tower_close')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio_tower_destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'radio_tower_destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'first_88_obj')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'second_88_obj')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'dead_88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'first_panther')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'choose_path')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'choose_left_path')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'choose_right_path')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'kill_events')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'player_exposed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'do not interrupt')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'radio tower destroyed')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'radio_tower_dialog')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Fuel Depot')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'fuel_depot_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'fuel_depot_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'do not interrupt')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'fuel_depot_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'fuel depot done')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'fuel_depot_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'fuel_depot_dialog')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Final Battle')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'final_battle_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'final_battle_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'do not interrupt')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'final_battle_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'final done')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'final_battle_dialog')
('QUOTE', '"')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'final_battle_dialog')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Victory')
('NEWLINE', '\n')
('COMMENT', 'level.event_flags["victory_dialog"] = [];')
('NEWLINE', '\n')
('COMMENT', 'level.endon_signals["victory_dialog"] = "do not interrupt";')
('NEWLINE', '\n')
('COMMENT', 'level.complete_signals["victory_dialog"] = "victory done";')
('NEWLINE', '\n')
('COMMENT', 'level.event_functions["victory_dialog"] = ::victory_dialog;')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' GLocke: objective flags to check if the 2 optional objectives had been completed at the end of the map.')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flak objective completed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower objective completed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'final battle already started')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_ready_for_outro')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'outro_group_1_ready')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'outro_group_2_ready')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_sound_for_event')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This is the function called through script or through the dialog_trigger setup that')
('NEWLINE', '\n')
('COMMENT', '          will playback the sound for an event using the function setup specified in ')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t::init_level_flags. It also does some very basic error checking to keep it from')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\tdouble threading events and running improperly setup events')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_sound_for_event')
('LPAREN', '(')
('IDENTIFIER', 'event')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'event')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'error')
('LPAREN', '(')
('QUOTE', '"')
('STRING', "Requested sound event '")
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'event')
('PLUS', '+')
('QUOTE', '"')
('STRING', "' is not setup properly")
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'array_check_for_dupes')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'finished_events')
('COMMA', ',')
('IDENTIFIER', 'event')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'finished_events')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'finished_events')
('COMMA', ',')
('IDENTIFIER', 'event')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isSubStr')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'internal_')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'update_target_flag')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('LBRACKET', '[')
('LBRACKET', '[')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_functions')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('RBRACKET', ']')
('RBRACKET', ']')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'endon_signals')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'complete_signals')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '3')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '4')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '5')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'event_flags')
('LBRACKET', '[')
('IDENTIFIER', 'event')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', '6')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: update_target_flag')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This is threaded for each flag in a sound event. It is a giant switch statement that')
('NEWLINE', '\n')
('COMMENT', '          compartmentalizes all the logic for each individual flag in a case specified by the ')
('NEWLINE', '\n')
('COMMENT', '          flag name')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Add any needed flags for new events')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'update_target_flag')
('LPAREN', '(')
('IDENTIFIER', 'flag')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'flag')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', '"heavy_damage"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'heavy_damage')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'myTank')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'amount')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'old_percent')
('ASSIGNMENT', '=')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'myTank')
('DOT', '.')
('IDENTIFIER', 'armor')
('DIVIDE', '/')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'myTank')
('DOT', '.')
('IDENTIFIER', 'maxarmor')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'new_percent')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'myTank')
('DOT', '.')
('IDENTIFIER', 'armor')
('SUBTRACT', '-')
('IDENTIFIER', 'amount')
('RPAREN', ')')
('DIVIDE', '/')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'myTank')
('DOT', '.')
('IDENTIFIER', 'maxarmor')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'old_percent')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'new_percent')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LPAREN', '(')
('IDENTIFIER', 'old_percent')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'new_percent')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'heavy_damage')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'heavy_damage')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '8')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"do_firing"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'do_firing')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'myTank')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'getTagAngles')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tag_flash')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'getTagOrigin')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tag_flash')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'vec')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anglestoforward')
('LPAREN', '(')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trace')
('ASSIGNMENT', '=')
('IDENTIFIER', 'bullettrace')
('LPAREN', '(')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'origin')
('PLUS', '+')
('IDENTIFIER', 'vec')
('MULTIPLY', '*')
('IDENTIFIER', '5000')
('COMMA', ',')
('IDENTIFIER', 'false')
('COMMA', ',')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'myTank')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'trace')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'fraction')
('QUOTE', '"')
('RBRACKET', ']')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '95')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ent')
('ASSIGNMENT', '=')
('IDENTIFIER', 'trace')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'entity')
('QUOTE', '"')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'array_check_for_dupes')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_armor')
('COMMA', ',')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'ent')
('DOT', '.')
('IDENTIFIER', 'classname')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'script_vehicle_corpse')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'do_firing')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"damaged"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'damaged')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'myTank')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'amount')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damaged')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damaged')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '8')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"infantry_close"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'infantry_close')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'close_count')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'myTank')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_distance_for_close_infantry')
('MULTIPLY', '*')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_distance_for_close_infantry')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'close_count')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'close_count')
('GREATER_THAN', '>')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_close_infantry_for_warning')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'infantry_close')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'infantry_close')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"retreaters"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'retreaters')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'retreaters')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'check_for_visible')
('LPAREN', '(')
('IDENTIFIER', 'player')
('COMMA', ',')
('IDENTIFIER', 'ent')
('COMMA', ',')
('IDENTIFIER', '3000')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'retreaters')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'retreaters')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"destruction"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'destruction')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destruction')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destruction')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destruction')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"idle"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'idle')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'prev_position')
('ASSIGNMENT', '=')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'prev_position')
('COMMA', ',')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_idle_dist_sq')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'current_idle_time')
('PLUS_EQUALS', '+=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'current_idle_time')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'idle_warn_time')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'current_idle_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'idle')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'idle')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'current_idle_time')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'prev_position')
('ASSIGNMENT', '=')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"flamethrower_fired_once"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'flamethrower_fired_once')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'inform_on_ft_button')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ft_pressed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill_notify_or_timeout')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ft_pressed')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '6')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'go_past_ft_tut')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flamethrower_fired_once')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"ads_once"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'ads_once')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'inform_on_ads_button')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ads_pressed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill_notify_or_timeout')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ads_pressed')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '14')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', '-- needs the extra time to wait out the ft tutorial')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'go_past_ads_tut')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ads_once')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"flamethrower_close_to_inf"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'flamethrower_close_to_inf')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'check_close_to_stuck_inf')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_close')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '1200')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_close')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flamethrower_close_to_inf')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'battlechatter allowed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"destroyed first 88"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'destroyed first 88')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_active_arty')
('SUBTRACT', '-')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'active_arty')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destroyed first 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"second 88 in sights"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'second 88 in sights')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'second_arty')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'arty 3')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'in_player_sights')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'in_player_sights')
('EQUALS_TO', '==')
('IDENTIFIER', 'false')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'second_arty')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('DOT', '.')
('IDENTIFIER', 'size')
('LOGICAL_AND', '&&')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'in_player_sights')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'toVec')
('ASSIGNMENT', '=')
('IDENTIFIER', 'second_arty')
('DOT', '.')
('IDENTIFIER', 'origin')
('SUBTRACT', '-')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'forward')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anglesToForward')
('LPAREN', '(')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'toVec')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'toVec')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'toVec')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'forward')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'forward')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'forward')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'diff')
('ASSIGNMENT', '=')
('IDENTIFIER', 'VectorDot')
('LPAREN', '(')
('IDENTIFIER', 'VectorNormalize')
('LPAREN', '(')
('IDENTIFIER', 'forward')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'VectorNormalize')
('LPAREN', '(')
('IDENTIFIER', 'toVec')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'acos')
('LPAREN', '(')
('IDENTIFIER', 'diff')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '65')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'in_player_sights')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'second 88 in sights')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"destroyed second 88"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'destroyed second 88')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_active_arty')
('SUBTRACT', '-')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'active_arty')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destroyed second 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"destroyed third and fourth 88"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'destroyed third and fourth 88')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_active_arty')
('SUBTRACT', '-')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'active_arty')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '3')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destroyed third and fourth 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"destroyed second last 88"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'destroyed second last 88')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'active_arty')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '2')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destroyed second last 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"destroyed last 88"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'destroyed last 88')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'active_arty')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'destroyed last 88')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"first_fired_on_event"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'first_fired_on_event')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'first_fired_on_event')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"first_shot"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'first_shot')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_player_shoot_event')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'first_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"panther_activated"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'panther_activated')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther activate trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '8')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_activated')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"panther_in_sights"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'panther_in_sights')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_activated')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'panther')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'lineveh 4 group0')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'in_player_sights')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'in_player_sights')
('EQUALS_TO', '==')
('IDENTIFIER', 'false')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'panther')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('DOT', '.')
('IDENTIFIER', 'size')
('LOGICAL_AND', '&&')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'in_player_sights')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'toVec')
('ASSIGNMENT', '=')
('IDENTIFIER', 'panther')
('DOT', '.')
('IDENTIFIER', 'origin')
('SUBTRACT', '-')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'forward')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anglesToForward')
('LPAREN', '(')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'toVec')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'toVec')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'toVec')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'forward')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'forward')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'forward')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'diff')
('ASSIGNMENT', '=')
('IDENTIFIER', 'VectorDot')
('LPAREN', '(')
('IDENTIFIER', 'VectorNormalize')
('LPAREN', '(')
('IDENTIFIER', 'forward')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'VectorNormalize')
('LPAREN', '(')
('IDENTIFIER', 'toVec')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'acos')
('LPAREN', '(')
('IDENTIFIER', 'diff')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '30')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'in_player_sights')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_in_sights')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"panther_first_shot"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'panther_first_shot')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'panther')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'lineveh 4 group0')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'damaged_by_player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'damaged_by_player')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'panther')
('DOT', '.')
('IDENTIFIER', 'classname')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'script_vehicle_corpse')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'panther')
('DOT', '.')
('IDENTIFIER', 'health')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'panther')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'amt')
('COMMA', ',')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'damaged_by_player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'check_damaged_by_player')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_first_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"panther_second_shot"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'panther_second_shot')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'panther')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'lineveh 4 group0')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_first_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'damaged_by_player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'damaged_by_player')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'panther')
('DOT', '.')
('IDENTIFIER', 'classname')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'script_vehicle_corpse')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'panther')
('DOT', '.')
('IDENTIFIER', 'health')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'panther')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'amt')
('COMMA', ',')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'damaged_by_player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'check_damaged_by_player')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_second_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"panther_third_shot"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'panther_third_shot')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'panther')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'lineveh 4 group0')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_first_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_second_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'damaged_by_player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'damaged_by_player')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'panther')
('DOT', '.')
('IDENTIFIER', 'classname')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'script_vehicle_corpse')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'panther')
('DOT', '.')
('IDENTIFIER', 'health')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'panther')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'amt')
('COMMA', ',')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'damaged_by_player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'check_damaged_by_player')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_third_shot')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"panther_dead"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'panther_dead')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'panther')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'lineveh 4 group0')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'panther')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'panther_dead')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"radio_tower_visible"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'radio_tower_visible')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'radio_tower')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'visible')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'visible')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('DOT', '.')
('IDENTIFIER', 'size')
('LOGICAL_AND', '&&')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'visible')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'check_for_visible')
('LPAREN', '(')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'radio_tower')
('COMMA', ',')
('IDENTIFIER', '8500')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'visible')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio_tower_visible')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"radio_tower_close"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'radio_tower_close')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'radio_tower')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'close')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'close')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('DOT', '.')
('IDENTIFIER', 'size')
('LOGICAL_AND', '&&')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'close')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'check_for_close')
('LPAREN', '(')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'radio_tower')
('COMMA', ',')
('IDENTIFIER', '3500')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'close')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio_tower_close')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '"radio_tower_destroyed"')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'radio_tower_destroyed')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'radio_tower')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'radio_tower')
('DOT', '.')
('IDENTIFIER', 'model')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'anim_seelow_radiotower_d')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio_tower_destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: check_for_close')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Helper function - checks to see if a player is within a specific distance of an object')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'check_for_close')
('LPAREN', '(')
('IDENTIFIER', 'player')
('COMMA', ',')
('IDENTIFIER', 'object')
('COMMA', ',')
('IDENTIFIER', 'dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'object')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'dist')
('MULTIPLY', '*')
('IDENTIFIER', 'dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: check_for_arty_destroyed')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Helper function - Waits until an artillery in the passed array is destroyed then ')
('NEWLINE', '\n')
('COMMENT', '          returns.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'check_for_arty_destroyed')
('LPAREN', '(')
('IDENTIFIER', 'arty_array')
('COMMA', ',')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dead_arty')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'dead_arty')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'arty_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'check_for_arty_dead')
('LPAREN', '(')
('IDENTIFIER', 'arty_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dead_arty')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: check_for_visible')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Helper function - Checks to see if a player is within a certain number of units of an')
('NEWLINE', '\n')
('COMMENT', "\t\t\t\t\tobject and if it is in the player's view arc.")
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Possibly add a trace confirmation at some point')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'check_for_visible')
('LPAREN', '(')
('IDENTIFIER', 'player')
('COMMA', ',')
('IDENTIFIER', 'object')
('COMMA', ',')
('IDENTIFIER', 'dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'toVec')
('ASSIGNMENT', '=')
('IDENTIFIER', 'object')
('DOT', '.')
('IDENTIFIER', 'origin')
('SUBTRACT', '-')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'forward')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anglesToForward')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'toVec')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'toVec')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'toVec')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'forward')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'forward')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'forward')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'diff')
('ASSIGNMENT', '=')
('IDENTIFIER', 'VectorDot')
('LPAREN', '(')
('IDENTIFIER', 'VectorNormalize')
('LPAREN', '(')
('IDENTIFIER', 'forward')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'VectorNormalize')
('LPAREN', '(')
('IDENTIFIER', 'toVec')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'acos')
('LPAREN', '(')
('IDENTIFIER', 'diff')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '65')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'object')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'dist')
('MULTIPLY', '*')
('IDENTIFIER', 'dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: check_for_either_arty_destroyed')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Checks for either artillery passed being dead then gives a notify once one dies.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Maybe deprecate since it is mostly a special case of ')
('NEWLINE', '\n')
('COMMENT', '   \t\t\t\t\t\t\t\t ::check_for_arty_destroyed')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'check_for_either_arty_destroyed')
('LPAREN', '(')
('IDENTIFIER', 'arty1')
('COMMA', ',')
('IDENTIFIER', 'arty2')
('COMMA', ',')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'check_for_arty_dead')
('LPAREN', '(')
('IDENTIFIER', 'arty1')
('RPAREN', ')')
('LOGICAL_OR', '||')
('IDENTIFIER', 'check_for_arty_dead')
('LPAREN', '(')
('IDENTIFIER', 'arty2')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: check_for_both_arty_destroyed')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Checks to see that both arty are destroyed then notifies the level when they are')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Maybe deprecate since it is mostly a special case of ')
('NEWLINE', '\n')
('COMMENT', '                   ::check for arty destroyed.')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'check_for_both_arty_destroyed')
('LPAREN', '(')
('IDENTIFIER', 'arty1')
('COMMA', ',')
('IDENTIFIER', 'arty2')
('COMMA', ',')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'check_for_arty_dead')
('LPAREN', '(')
('IDENTIFIER', 'arty1')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'check_for_arty_dead')
('LPAREN', '(')
('IDENTIFIER', 'arty2')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: check_for_arty_dead')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Checks to see if an artillery has no crew or has been destroyed somehow')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'check_for_arty_dead')
('LPAREN', '(')
('IDENTIFIER', 'arty')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'arty')
('RPAREN', ')')
('LOGICAL_OR', '||')
('IDENTIFIER', 'arty')
('DOT', '.')
('IDENTIFIER', 'health')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('LOGICAL_OR', '||')
('IDENTIFIER', 'arty')
('DOT', '.')
('IDENTIFIER', 'classname')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'script_vehicle_corpse')
('QUOTE', '"')
('LOGICAL_OR', '||')
('IDENTIFIER', 'arty')
('DOT', '.')
('IDENTIFIER', 'crewsize')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: check_damaged_by_player')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Helper function - Checks to see if the attacker was a player or his tank since ')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\tvehicle damage gets attributed weirdly.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'check_damaged_by_player')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'damaged_by_player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('EQUALS_TO', '==')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('LOGICAL_OR', '||')
('IDENTIFIER', 'guy')
('EQUALS_TO', '==')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'damaged_by_player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'damaged_by_player')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_player_shoot_event')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Helper Function - Waits until one player has attacked then sends a level notify')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_player_shoot_event')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'AttackButtonPressed')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_player_damage_event')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Helper Function - Waits until one player has been damaged then sends a level notify')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_player_damage_event')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'tank hit')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: check_close_to_stuck_inf')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Checks to see if the player is within a certain distance of infantry with their ')
('NEWLINE', '\n')
('COMMENT', '          script_noteworthy set to stuck infantry')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'check_close_to_stuck_inf')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('COMMA', ',')
('IDENTIFIER', 'dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'stuck_infantry')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_living_ai_array')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stuck infantry')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'close_enough')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'close_enough')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'stuck_infantry')
('DOT', '.')
('IDENTIFIER', 'size')
('LOGICAL_AND', '&&')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'close_enough')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'dist')
('MULTIPLY', '*')
('IDENTIFIER', 'dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'close_enough')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: inform_on_ft_button')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: player')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: sends a level notify when the player has pressed their +frag button')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'inform_on_ft_button')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'FragButtonPressed')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: inform_on_ads_button')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: player')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: sends a level notify when the player has pressed their +speed_throw button')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'inform_on_ads_button')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('IDENTIFIER', 'AdsButtonPressed')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('IDENTIFIER', 'inform')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' INFANTRY')
('NEWLINE', '\n')
('COMMENT', '////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: spawn_guys')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: anything')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: spawns infantry from an array of spawners, using network gating')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_guys')
('LPAREN', '(')
('IDENTIFIER', 'spawners')
('COMMA', ',')
('IDENTIFIER', 'target_name')
('COMMA', ',')
('IDENTIFIER', 'ok_to_spawn')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'spawners')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'NumRemoteClients')
('LPAREN', '(')
('RPAREN', ')')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('COMMENT', '-- If there are no remote clients, then do not use OkToSpawn')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_guy')
('LPAREN', '(')
('IDENTIFIER', 'spawners')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'target_name')
('COMMA', ',')
('IDENTIFIER', 'false')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_guy')
('LPAREN', '(')
('IDENTIFIER', 'spawners')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'target_name')
('COMMA', ',')
('IDENTIFIER', 'ok_to_spawn')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', 'guys')
('DOT', '.')
('IDENTIFIER', 'size')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'guy')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' We do not want to return the guys if ok_to_spawn is used. Since a guy in the array may be dead.')
('NEWLINE', '\n')
('COMMENT', ' So, only return the guys array if we do not want to ok_to_spawn.')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'ok_to_spawn')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'ok_to_spawn')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'guys')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: spawn_guy')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: anything')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: spawns a guy, potentially observing networking')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_guy')
('LPAREN', '(')
('IDENTIFIER', 'spawner')
('COMMA', ',')
('IDENTIFIER', 'target_name')
('COMMA', ',')
('IDENTIFIER', 'ok_to_spawn')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'ok_to_spawn')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'ok_to_spawn')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'OkToSpawn')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'spawner')
('DOT', '.')
('IDENTIFIER', 'script_forcespawn')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'spawner')
('DOT', '.')
('IDENTIFIER', 'script_forcespawn')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawner')
('IDENTIFIER', 'StalingradSpawn')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawner')
('IDENTIFIER', 'DoSpawn')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'spawn_failed')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'target_name')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('DOT', '.')
('IDENTIFIER', 'targetname')
('ASSIGNMENT', '=')
('IDENTIFIER', 'target_name')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'guy')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_floodspawners')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Does network gated floodspawning for the radio tower area')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Generalize so it can be used at the train station as well')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_floodspawners')
('LPAREN', '(')
('IDENTIFIER', 'areaname')
('COMMA', ',')
('IDENTIFIER', 'time')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower back half')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('IDENTIFIER', 'trigger')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'inform_on_touch_trigger')
('LPAREN', '(')
('IDENTIFIER', 'trigger')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'floodspawners')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('IDENTIFIER', 'areaname')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' floodspawner')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spawners')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'NETWORK: throttle for only 2+ player (changed to throttle all the time because of it was slowing down the game);')
('NEWLINE', '\n')
('COMMENT', 'flood_spawner_max_size = level.max_ai_spawn_current;')
('NEWLINE', '\n')
('COMMENT', 'if(get_players().size > 1)')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '  flood_spawner_max_size = 24; //32 for single player')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('COMMENT', '-- we want to force the spawners the first time')
('NEWLINE', '\n')
('IDENTIFIER', 'y')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ai')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getaiarray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LPAREN', '(')
('IDENTIFIER', 'ai')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_ai_spawn_current')
('LOGICAL_OR', '||')
('IDENTIFIER', 'x')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '5')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'y')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '10')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spawners')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'floodspawners')
('LBRACKET', '[')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', 'floodspawners')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_guys')
('LPAREN', '(')
('IDENTIFIER', 'spawners')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spawners')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'count')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'x')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'y')
('PLUS', '+')
('PLUS', '+')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'time')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: fuel_depot_infantry_evasion')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an infantryman')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This causes the infantry in the fuel depot to choose a retreat position and take it')
('NEWLINE', '\n')
('COMMENT', '          when the player hits a trigger')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Generalize this function and improve the name')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'fuel_depot_infantry_evasion')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fuel depot retreat trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'randomfloatrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '3')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'retreat_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fuel_depot_goal_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fuel_depot_goal_nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setGoalNode')
('LPAREN', '(')
('IDENTIFIER', 'retreat_node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: enforce_flame_deaths')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an infantryman')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Since the damageweapon for the player tank is misattributed, this tries to override')
('NEWLINE', '\n')
('COMMENT', '          it and force a flame death whenever the AI receives MOD_BURNED damage. ')
('NEWLINE', '\n')
('COMMENT', " ADDITIONS NEEDED: This currently doesn't work consistently, need to figure out how to prevent")
('NEWLINE', '\n')
('COMMENT', "\t\t\t\t\t\t\t\t\t subsequent frame's damage from overriding the flame death anim")
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'enforce_flame_deaths')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'amount')
('COMMA', ',')
('IDENTIFIER', 'other')
('COMMA', ',')
('IDENTIFIER', 'direction_vec')
('COMMA', ',')
('IDENTIFIER', 'point')
('COMMA', ',')
('IDENTIFIER', 'type')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'type')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'MOD_BURNED')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'forceflamedeath')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'doDamage')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('MULTIPLY', '*')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: radio_tower_infantry_evasion')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an infantryman')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This causes an infantryman to shift between a variety of cover nodes and try to stay')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\tout of player view arcs.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: This should be generalized and renamed for application elsewhere')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'radio_tower_infantry_evasion')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'timer')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'min_time_before_shift')
('ASSIGNMENT', '=')
('IDENTIFIER', '6')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'max_time_before_shift')
('ASSIGNMENT', '=')
('IDENTIFIER', '12')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'inArc')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('LOGICAL_AND', '&&')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'inArc')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'inArc')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'is_in_player_arc')
('LPAREN', '(')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'timer')
('GREATER_THAN', '>')
('IDENTIFIER', 'randomfloatrange')
('LPAREN', '(')
('IDENTIFIER', 'min_time_before_shift')
('COMMA', ',')
('IDENTIFIER', 'max_time_before_shift')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LPAREN', '(')
('IDENTIFIER', 'timer')
('GREATER_THAN', '>')
('IDENTIFIER', 'min_time_before_shift')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'inArc')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'self setGoalNode( level.radio_tower_goal_nodes[ randomint( level.radio_tower_goal_nodes.size ) ] );')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio_set_new_goal_node')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'timer')
('PLUS_EQUALS', '+=')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'radio_tower_infantry_grenades')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio_set_new_goal_node')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'classname')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'actor_axis_ger_ber_wehr_reg_kar98k')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setGoalNode')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radio_tower_goal_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radio_tower_goal_nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'random_grenade_chance')
('ASSIGNMENT', '=')
('IDENTIFIER', 'RandomIntRange')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '100')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'random_grenade_chance')
('GREATER_THAN', '>')
('IDENTIFIER', '70')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'my_target')
('ASSIGNMENT', '=')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'my_target')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'my_target')
('ASSIGNMENT', '=')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_grenade_toss')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'force_grenade_toss')
('LPAREN', '(')
('IDENTIFIER', 'my_target')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('IDENTIFIER', '3')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setGoalNode')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radio_tower_goal_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'radio_tower_goal_nodes')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_antitank_AI')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an infantryman')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This causes panzershreck guys to manually target the tank rather than the player camera')
('NEWLINE', '\n')
('COMMENT', '          position.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: This should be fleshed out into better behavior for small arms guys and should')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t\t\t\t\t\tmake panzershreck guys a little less deadly.')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_antitank_AI')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'best_target')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_vehicle')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'get_nearest_target')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'best_target')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'best_target')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'dist')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_panzerschreck_eng_distsq')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'dist')
('GREATER_THAN', '>')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_panzerschreck_eng_distsq')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setEntityTarget')
('LPAREN', '(')
('IDENTIFIER', 'best_target')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'clearEntityTarget')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' MISS STRUCT TARGETING')
('NEWLINE', '\n')
('COMMENT', '////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: remove_old_targeters')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an entity with miss structs ')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This removes entity A from the list of entities targeting the miss struct entity B')
('NEWLINE', '\n')
('COMMENT', '          allowing another entity to request entity B as a target')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'remove_old_targeters')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stopped targeting')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_targeters')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_targeters')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_targeters')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_targeters')
('COMMA', ',')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('COMMA', ',')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: update_current_targeters')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an entity')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This creates an array of x miss structs and gives the closest targeters a direct target')
('NEWLINE', '\n')
('COMMENT', '          of the miss_struct entity on a frame by frame basis, otherwise tells them to target')
('NEWLINE', '\n')
('COMMENT', '          the miss structs')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'update_current_targeters')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'disconnect')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'remove_old_targeters')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_targeters')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_targeters')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'miss_structs')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'miss_structs')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'x_sign')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'y_sign')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'number_miss_structs')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomfloat')
('LPAREN', '(')
('IDENTIFIER', '0')
('SUBTRACT', '-')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_miss_distance')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_miss_distance')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'y')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomfloat')
('LPAREN', '(')
('IDENTIFIER', '0')
('SUBTRACT', '-')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_miss_distance')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_miss_distance')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'x')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_miss_distance')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'x')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_miss_distance')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'x')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('SUBTRACT', '-')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_miss_distance')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SUBTRACT', '-')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_miss_distance')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'y')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_miss_distance')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'x')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'y')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_miss_distance')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'y')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('SUBTRACT', '-')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_miss_distance')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'y')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SUBTRACT', '-')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'min_miss_distance')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'miss_struct')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_origin')
('QUOTE', '"')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'miss_struct')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('PLUS', '+')
('IDENTIFIER', 'x')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('PLUS', '+')
('IDENTIFIER', 'y')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'miss_struct')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'groundpos')
('LPAREN', '(')
('IDENTIFIER', 'miss_struct')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'miss_structs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'miss_structs')
('COMMA', ',')
('IDENTIFIER', 'miss_struct')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'miss_struct')
('IDENTIFIER', 'linkto')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'best_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '10000000000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'best_index')
('ASSIGNMENT', '=')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_targeters')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_targeters')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'j')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('LBRACKET', '[')
('IDENTIFIER', 'j')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'dist')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'best_dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'best_index')
('ASSIGNMENT', '=')
('IDENTIFIER', 'j')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'best_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'dist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'best_index')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('LBRACKET', '[')
('IDENTIFIER', 'best_index')
('RBRACKET', ']')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'switch targets')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'current_targeters')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('LBRACKET', '[')
('IDENTIFIER', 'best_index')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_remove')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('LBRACKET', '[')
('IDENTIFIER', 'best_index')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: request_target')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an entity')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This allows an entity to request the target of a miss struct entity and receive')
('NEWLINE', '\n')
('COMMENT', '          a miss struct if there are already too many entities targeting that entity.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'request_target')
('LPAREN', '(')
('IDENTIFIER', 'target')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'target')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'target')
('DOT', '.')
('IDENTIFIER', 'miss_structs')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'target')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'targeted')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_targeters')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'target')
('DOT', '.')
('IDENTIFIER', 'current_targeters')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('LOGICAL_OR', '||')
('IDENTIFIER', 'target')
('DOT', '.')
('IDENTIFIER', 'current_targeters')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('EQUALS_TO', '==')
('IDENTIFIER', 'self')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'target')
('DOT', '.')
('IDENTIFIER', 'current_targeters')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'targeted')
('ASSIGNMENT', '=')
('IDENTIFIER', 'target')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'targeted')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'rand')
('ASSIGNMENT', '=')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'number_miss_structs')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'targeted')
('ASSIGNMENT', '=')
('IDENTIFIER', 'target')
('DOT', '.')
('IDENTIFIER', 'miss_structs')
('LBRACKET', '[')
('IDENTIFIER', 'rand')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'array_check_for_dupes')
('LPAREN', '(')
('IDENTIFIER', 'target')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('COMMA', ',')
('IDENTIFIER', 'self')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'target')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'target')
('DOT', '.')
('IDENTIFIER', 'queued_targeters')
('COMMA', ',')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'targeted')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' EVENT 1')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: field_begin')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This sets up all the variables for a start in area 1 where you destroy the artillery')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'field_begin')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_stuck_event')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_early_tanks')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_first_player')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '4x4 Achievement script')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'squishcount')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', '-- Switch out the other players weapons')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'TakeWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'm2_flamethrower')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'SwitchToWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ppsh')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_player_tanks')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'keep_track_of_achievement')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_sound_for_event')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'do_area_spawn')
('LPAREN', '(')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'do_arty_spawn')
('LPAREN', '(')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'arty_flaps')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'arty tarp')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'arty_flaps')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'arty_flaps')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_tarp_flap')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'arty_flaps')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'cleanup_tarp')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'controls_active')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'clientNotify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'aaa_begin')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'aaa_begin')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'clientNotify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'start_distance_planes_field_1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'start_distance_planes_field_1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'field_begin_planes_end')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'arcademode_water_tower_setup')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'arty_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'group1 arty')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'assert')
('LPAREN', '(')
('IDENTIFIER', 'arty_array')
('DOT', '.')
('IDENTIFIER', 'size')
('GREATER_THAN', '>')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_add')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'current')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'arty_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'arty_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'health')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'arty_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'arty_behavior')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_additionalPosition')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', 'i')
('COMMA', ',')
('IDENTIFIER', 'arty_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'active_arty')
('ASSIGNMENT', '=')
('IDENTIFIER', 'arty_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'max_active_arty')
('ASSIGNMENT', '=')
('IDENTIFIER', 'arty_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_string')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'SEE2_DESTROY_ARTILLERY')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'active_arty')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'third_tier')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'third tier')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'third_tier')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_merge')
('LPAREN', '(')
('IDENTIFIER', 'third_tier')
('COMMA', ',')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'third tier two')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'third_tier')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_merge')
('LPAREN', '(')
('IDENTIFIER', 'third_tier')
('COMMA', ',')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'third tier three')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'third_tier')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'third_tier')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'script_forcespawn')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'arty_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'arty_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_neutralize')
('LPAREN', '(')
('IDENTIFIER', 'i')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_third_wave')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_area_two_infantry')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_area_three_infantry')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_area_four_infantry')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_airstrike_triggers')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'level thread move_radio_tower_blocker( false );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_retreat_trucks')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_stop_wait_triggers')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_bunker_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'first bunker')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'fourth bunker')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'first bunker taken')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_bunker_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'second bunker')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'fourth bunker')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'second bunker taken')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'second tier')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_bunker_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'third bunker')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'fifth bunker')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'third bunker taken')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'third tier')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_bunker_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fourth bunker')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'third bunker')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'fourth bunker taken')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'second tier')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_bunker_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fifth bunker')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'third bunker')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'fifth bunker taken')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_group_spawn')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_group_spawn')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_group_spawn')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'keep_grenade_bags_from_spawning')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_fake_schrecks')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'TUEY Set Music State to INTRO')
('NEWLINE', '\n')
('IDENTIFIER', 'setmusicstate')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'INTRO')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'setbusstate')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'TANKS')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'build_retreat_generics')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'arcademode_water_tower_setup')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'water_tower_trigs')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'water_tower_trigs')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'water_tower_trig')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'water_tower_trigs')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'water_tower_trigs')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'arcademode_water_tower_give_points')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'arcademode_water_tower_give_points')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsPlayer')
('LPAREN', '(')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'arcademode_assignpoints')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'arcademode_score_banzai')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'move_radio_tower_blocker')
('LPAREN', '(')
('IDENTIFIER', 'proper_position')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'radio_tower_blocker')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio_tower_blocker')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'proper_position')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'radio_tower_blocker')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'radio_tower_blocker')
('DOT', '.')
('IDENTIFIER', 'origin')
('SUBTRACT', '-')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '5000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'radio_tower_blocker')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'radio_tower_blocker')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '5000')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'field_begin_planes_end')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trig')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop field planes')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'trig')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'clientNotify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'start_distance_planes_field_1_stop')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'start_distance_planes_field_1_stop')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_stop_wait_triggers')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This sets up all the subsequent retreat triggers for the opel trucks in the level')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED:')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_stop_wait_triggers')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'triggers')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop wait trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'triggers')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_stop_wait')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_stop_wait')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a retreater truck')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This waits until a stop wait trigger is hit and the trucks continue their retreat.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED:')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_stop_wait')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isPlayer')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'array_check_for_dupes')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'invalid_retreat_points')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'invalid_retreat_points')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'invalid_retreat_points')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_third_wave')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This waits until the player has proceeded sufficiently then tries to spawn')
('NEWLINE', '\n')
('COMMENT', '          the third tier of bunker guards in the artillery area')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_third_wave')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spawners')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'third tier')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill_either')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'second bunker taken')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'fourth bunker taken')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_guys')
('LPAREN', '(')
('IDENTIFIER', 'spawners')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_neutralize')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a flak 88')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This waits until an artillery is destroyed or has had its crew killed. It then ')
('NEWLINE', '\n')
('COMMENT', '          updates the "Destroy artillery" objective')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED:')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '////////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_neutralize')
('LPAREN', '(')
('IDENTIFIER', 'objNum')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill_either')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'crew dead')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'active_arty')
('SUBTRACT', '-')
('SUBTRACT', '-')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'active_arty')
('EQUALS_TO', '==')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_AdditionalPosition')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', 'objNum')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_String_NoMessage')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'SEE2_DESTROY_ARTILLERY')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'active_arty')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flak objective completed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_State')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'autosave_by_name')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'first area arty destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'begin event 2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_sound_for_event')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio_tower_dialog')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_AdditionalPosition')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', 'objNum')
('COMMA', ',')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_String')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'SEE2_DESTROY_ARTILLERY')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'active_arty')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'active_arty')
('EQUALS_TO', '==')
('IDENTIFIER', '2')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'autosave_by_name')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'first area arty destroyed')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'active_arty')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_death_tank_sequence')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: the death tank from ::setup_stuck_event')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This does the intial tank in front of the player rolling out and getting pwned by')
('NEWLINE', '\n')
('COMMENT', '          the panzershreck group near the first artillery')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: The panzershreck guys are currently starting to target the player instead')
('NEWLINE', '\n')
('COMMENT', '                   of the death tank, this should be investigated and fixed.')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_death_tank_sequence')
('LPAREN', '(')
('IDENTIFIER', 'target_node')
('COMMA', ',')
('IDENTIFIER', 'death_node')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setWaitNode')
('LPAREN', '(')
('IDENTIFIER', 'target_node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_wait_node')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'has_target')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'stuck_infantry')
('DOT', '.')
('IDENTIFIER', 'size')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_living_ai_array')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stuck infantry')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'stuck_infantry')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'has_target')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'has_target')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setTurretTargetEnt')
('LPAREN', '(')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'setEntityTarget')
('LPAREN', '(')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setWaitNode')
('LPAREN', '(')
('IDENTIFIER', 'death_node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_wait_node')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'self thread stop_keep_tank_alive();')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death tank dead')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_stuck_event')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This does all the setup for the do_death_tank_event event')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_stuck_event')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death tank dead')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stuck infantry')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\n\tfor( i = 0; i < stuck_infantry.size; i++ )\n\t{\n\t\tstuck_infantry[i].ignoreall = true;\n\t}\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'controls_active')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_tanknode')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stuck tank node')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_flee_nodes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetNodeArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stuck flee node')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_flee_panzer_nodes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetNodeArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stuck panzer flee node')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stuck trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_ammo_boxes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stuck ammo crate')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_damage_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stuck damage trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'death_tank_move_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death tank move_trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'death_tank_spawn_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death tank spawn_trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'target_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getVehicleNode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'start targeting')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'death_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getVehicleNode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death node')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\n\tfor( i = 0; i < stuck_infantry.size; i++ )\n\t{\n\t\tstuck_infantry[i].goalradius = 32;\n\t\tstuck_infantry[i] setGoalNode( GetNode( stuck_infantry[i].target, "targetname" ) );\n\t\tstuck_infantry[i].ignoreall = true;\n\t\tstuck_infantry[i] thread setup_bunker_infantry();\n\t}\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'stuck_infantry')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'setup_stuck_infantry')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'death_tank_spawn_trigger')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'death_tank')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death tank')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'death_tank thread keep_tank_alive();')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'death_tank_move_trigger')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'death_tank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_death_tank_sequence')
('LPAREN', '(')
('IDENTIFIER', 'target_node')
('COMMA', ',')
('IDENTIFIER', 'death_node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death tank dead')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'do_sound_for_event( "tank_move_fire_tutorial" );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_living_ai_array')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stuck infantry')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'stuck_infantry')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'ClearEntityTarget')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_bunker_infantry')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '32')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'classname')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'actor_axis_ger_ber_wehr_reg_panzerschrek')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'maxsightdistsqrd')
('ASSIGNMENT', '=')
('IDENTIFIER', '3000')
('MULTIPLY', '*')
('IDENTIFIER', '3000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'setGoalNode')
('LPAREN', '(')
('IDENTIFIER', 'stuck_flee_panzer_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'setGoalNode')
('LPAREN', '(')
('IDENTIFIER', 'stuck_flee_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'first bunker guard')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'randomfloatrange')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '25')
('COMMA', ',')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_damage_trigger')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'inform_on_damage_trigger')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'blow up ammo boxes')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'blow up ammo boxes')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'stuck_ammo_boxes')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'dummy_tank_explode')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'stuck_ammo_boxes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'radiusDamage')
('LPAREN', '(')
('IDENTIFIER', 'stuck_ammo_boxes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', '1000')
('COMMA', ',')
('IDENTIFIER', '500')
('COMMA', ',')
('IDENTIFIER', '500')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'stuck_ammo_boxes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '5')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_stuck_infantry')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a member of the death tank infantry')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Sets up some basic variables for this entity')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_stuck_infantry')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '32')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_field_ambushes')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: sets up guys in fields with panzerschrecks')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_field_ambushes')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'field ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' ambush trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'trigger')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_single_ambush')
('LPAREN', '(')
('IDENTIFIER', 'i')
('COMMA', ',')
('IDENTIFIER', 'trigger')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_single_ambush')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: ambush trigger')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: sets up a single field ambush')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_single_ambush')
('LPAREN', '(')
('IDENTIFIER', 'field')
('COMMA', ',')
('IDENTIFIER', 'trigger')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'field ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'field')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' ambush')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'guys')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('DOT', '.')
('IDENTIFIER', 'ignoreme')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('IDENTIFIER', 'allowedstances')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'prone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'no_switch_weapon')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('IDENTIFIER', 'inform_on_touch_trigger')
('LPAREN', '(')
('IDENTIFIER', 'trigger')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('IDENTIFIER', 'trigger')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'guys')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('DOT', '.')
('IDENTIFIER', 'ignoreme')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('IDENTIFIER', 'allowedstances')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stand')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'crouch')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'prone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: find_farthest_retreat_point')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: Bunker guards whose positions have been overrun')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This finds the farthest retreat point from an enemy and heads towards it')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Try and make this take into account the player[0] tank')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'find_farthest_retreat_point')
('LPAREN', '(')
('IDENTIFIER', 'enemy')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'best_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ref_pt')
('ASSIGNMENT', '=')
('SUBTRACT', '-')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_reference_points')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_reference_points')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'enemy')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'dist')
('GREATER_THAN', '>')
('IDENTIFIER', 'best_dist')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', '-- check to see if its in the direction of the players tank')
('NEWLINE', '\n')
('IDENTIFIER', 'tank_dir')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_reference_points')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('SUBTRACT', '-')
('IDENTIFIER', 'enemy')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'retreat_dir')
('ASSIGNMENT', '=')
('IDENTIFIER', 'enemy')
('DOT', '.')
('IDENTIFIER', 'origin')
('SUBTRACT', '-')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'VectorDot')
('LPAREN', '(')
('IDENTIFIER', 'VectorNormalize')
('LPAREN', '(')
('IDENTIFIER', 'tank_dir')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'VectorNormalize')
('LPAREN', '(')
('IDENTIFIER', 'retreat_dir')
('RPAREN', ')')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'best_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', 'dist')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'ref_pt')
('ASSIGNMENT', '=')
('IDENTIFIER', 'i')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'ref_pt')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'ref_pt')
('RBRACKET', ']')
('LBRACKET', '[')
('IDENTIFIER', 'randomint')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_nodes')
('LBRACKET', '[')
('IDENTIFIER', 'ref_pt')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'size')
('RPAREN', ')')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'node')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: build_retreat_generics')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Sets up retreat points that will be used by infantry who have been flushed out')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'build_retreat_generics')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_reference_points')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_nodes')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ref')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getNode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'retreat ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'ref')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_reference_points')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_reference_points')
('COMMA', ',')
('IDENTIFIER', 'ref')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_nodes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'retreat_nodes')
('COMMA', ',')
('IDENTIFIER', 'GetNodeArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'retreat ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_bunker_infantry')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an infantryman')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Sets up basic AI behavior for german AI')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_bunker_infantry')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('COMMA', ',')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'enforce_flame_deaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'classname')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'actor_axis_ger_ber_wehr_reg_panzerschrek')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_antitank_AI')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'self thread unlimited_rocket_ammo();')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy antitank')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_ent_see2_bias_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy antitank')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'rockets')
('ASSIGNMENT', '=')
('IDENTIFIER', '200')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxsightdistsqrd')
('ASSIGNMENT', '=')
('IDENTIFIER', '3000')
('MULTIPLY', '*')
('IDENTIFIER', '3000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'no_weapon_switch')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy infantry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_ent_see2_bias_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy infantry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'unlimited_rocket_ammo')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'bulletsInClip')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'weaponClipSize')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'bulletsInClip')
('ASSIGNMENT', '=')
('IDENTIFIER', 'weaponClipSize')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'weapon')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_generic_retreats')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a flushed out infantryman')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This makes them flee based on player proximity and seek the farthest retreat point ')
('NEWLINE', '\n')
('COMMENT', '          they can find')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Need to make this so they go to their retreat node and then just chill in the wheat.')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_generic_retreats')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'scripted_grenade_throw')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'distanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '1000')
('MULTIPLY', '*')
('IDENTIFIER', '1000')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'find_farthest_retreat_point')
('LPAREN', '(')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goal_radius')
('ASSIGNMENT', '=')
('IDENTIFIER', '64')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setGoalNode')
('LPAREN', '(')
('IDENTIFIER', 'node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'ai_set_new_retreat_node')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'goal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreme')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'AllowedStances')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'crouch')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'prone')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_retreat_trucks')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE:  sets up all retreat truck behavior')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_retreat_trucks')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trucks')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'retreat truck')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'trucks')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trucks')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'retreat_truck_behavior')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'vehicle_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetVehicleNode')
('LPAREN', '(')
('IDENTIFIER', 'trucks')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'vehicle_node')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trucks')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_vehicle')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'vehicle_paths')
('LPAREN', '(')
('IDENTIFIER', 'vehicle_node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' EVENT 2')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: radio_tower_begin')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Sets up all level variables for starting at the radio tower objective')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Needs to identify warp points for the player and warp them to an appropriate')
('NEWLINE', '\n')
('COMMENT', '                   distance')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'radio_tower_begin')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flak 88s destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_sound_for_event')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_early_tanks')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_first_player')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_player_tanks')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'new_starts')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'start_pt')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getStruct')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio_tower start ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'start_pt')
('DOT', '.')
('IDENTIFIER', 'target')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'warp_pt')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getStruct')
('LPAREN', '(')
('IDENTIFIER', 'start_pt')
('DOT', '.')
('IDENTIFIER', 'target')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'warp_pt')
('ASSIGNMENT', '=')
('IDENTIFIER', 'start_pt')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'start_pt')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'current_advance_level')
('ASSIGNMENT', '=')
('IDENTIFIER', 'start_pt')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('ASSIGNMENT', '=')
('IDENTIFIER', 'warp_pt')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'current_node')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'current_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'warp_pt')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'target_node')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'player_tanks')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'target_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'warp_pt')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'do_area_spawn')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_area_two_infantry')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_group_spawn')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_group_spawn')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'level thread wait_for_area_three_infantry();')
('NEWLINE', '\n')
('COMMENT', 'level thread wait_for_area_four_infantry();')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_airstrike_triggers')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_area_two_infantry')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Waits until the area two spawn trigger has been hit then spawns all radio tower ')
('NEWLINE', '\n')
('COMMENT', '          infantry')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_area_two_infantry')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'group 1 spawn')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower destroyed')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_area_two_infantry')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: spawn_area_two_infantry')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: spawns all radio tower infantry and sets up their spawn functions')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_area_two_infantry')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spawner_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower spawner')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'spawner_array')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'setup_radio_tower_infantry')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'spawner_array')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'radio_tower_infantry_evasion')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'spawner_array')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'radio_tower_infantry_grenades')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawner_array_2')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower bunker spawner')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'spawner_array')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'setup_radio_tower_infantry')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flood_spawner_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower floodspawners')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'flood_spawner_array')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'radio_tower_infantry_grenades')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_guys')
('LPAREN', '(')
('IDENTIFIER', 'spawner_array')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_guys')
('LPAREN', '(')
('IDENTIFIER', 'spawner_array_2')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'do_floodspawners')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: add_radio_tower_objective')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON:  level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE:  This creates a series of breadcrumb target points that will be used to navigate')
('NEWLINE', '\n')
('COMMENT', '           the player to the radio tower and then updates the objective once the radio tower')
('NEWLINE', '\n')
('COMMENT', '           has been destroyed')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', ' Glocke: Changed this so that the objective starts when the player hits a trigger where he can see the radio tower.')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'add_radio_tower_objective')
('LPAREN', '(')
('IDENTIFIER', 'radiotower')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower start alternate')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'begin event 2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower start normal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'proceed_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower proceed trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'next_proceed_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower next proceed trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_radio_tower_owned_event')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_add')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'current')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_String')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'SEE2_PROCEED_RADIOTOWER')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_additionalPosition')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'proceed_trigger')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'proceed_trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_additionalPosition')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'next_proceed_trigger')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'next_proceed_trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_String')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'SEE2_DESTROY_RADIOTOWER')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_additionalPosition')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'radiotower')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'radiotower')
('DOT', '.')
('IDENTIFIER', 'model')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'anim_seelow_radiotower_d')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower objective completed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_State')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'add_radio_tower_objective_alternate')
('LPAREN', '(')
('IDENTIFIER', 'radiotower')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower start normal')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_start_tower')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower next proceed trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_start_tower')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower start alternate')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'proceed_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower proceed trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'next_proceed_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower next proceed trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_radio_tower_owned_event')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_add')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'current')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_String')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'SEE2_DESTROY_RADIOTOWER')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_additionalPosition')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'radiotower')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'radiotower')
('DOT', '.')
('IDENTIFIER', 'model')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'anim_seelow_radiotower_d')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower objective completed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_State')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_radio_tower_owned_event')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Causes a T34 to pull up at the bottleneck leading to the radio tower, engage in a ')
('NEWLINE', '\n')
('COMMENT', '          firefight with a panther, then get owned')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: This can be triggered after the vehicles have already been set to move')
('NEWLINE', '\n')
('COMMENT', '                   It needs to accommodate this either by restructuring the move trigger setup')
('NEWLINE', '\n')
('COMMENT', '                   in radiant or through a multi-trigger system that checks for the flak 88s')
('NEWLINE', '\n')
('COMMENT', '                   being destroyed before starting their move')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_radio_tower_owned_event')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'vig_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower vig trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'vig_trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'enemy_tank')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'enemy_tank')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'enemy_tank')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower vig tank')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'friendly_tank')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'friendly_tank')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'friendly_tank')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower owned tank')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'enemy_tank')
('IDENTIFIER', 'setTurretTargetEnt')
('LPAREN', '(')
('IDENTIFIER', 'friendly_tank')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'friendly_tank')
('IDENTIFIER', 'setTurretTargetEnt')
('LPAREN', '(')
('IDENTIFIER', 'enemy_tank')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'enemy_tank thread keep_tank_alive();')
('NEWLINE', '\n')
('COMMENT', 'friendly_tank thread keep_tank_alive();')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'enemy_tank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'dummy_fire_behavior')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'friendly_tank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'dummy_fire_behavior')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'friendly_tank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'friendly_tank_wait_for_enemy_tank_to_die')
('LPAREN', '(')
('IDENTIFIER', 'enemy_tank')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'enemy_tank')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'enemy_tank_wait_for_friendly_tank_to_die')
('LPAREN', '(')
('IDENTIFIER', 'friendly_tank')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '\n\tfriendly_tank setWaitNode( getVehicleNode( "radio tower owned node", "script_noteworthy" ) );\n\t\n\tfriendly_tank waittill( "reached_wait_node" );\n\t\n\tfriendly_tank.health = 1;\n\tfriendly_tank stop_keep_tank_alive();\n\twait( 0.05 );\n\tenemy_tank stop_keep_tank_alive();\n\t\n\tfriendly_tank waittill( "death" );\n\t\n\tenemy_tank.health = 1;\n\t\n\tfriendly_tank notify( "stop dummy firing" );\n\tenemy_tank notify( "stop dummy firing" );\n\t\n\tenemy_tank thread moving_firing_behavior();\n\t')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'friendly_tank_wait_for_enemy_tank_to_die')
('LPAREN', '(')
('IDENTIFIER', 'enemy_tank')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'friendly_tank_wait_for_enemy_tank_die_then_move')
('LPAREN', '(')
('IDENTIFIER', 'enemy_tank')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'enemy_tank')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemy_tank_dead')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop dummy firing')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_burst_fire_unmanned')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop_using_built_in_burst_fire')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'friendly_tank_wait_for_enemy_tank_die_then_move')
('LPAREN', '(')
('IDENTIFIER', 'enemy_tank')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'pink_tank_wait_here')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'SetSpeed')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'enemy_tank waittill("death");')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'enemy_tank_dead')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'ResumeSpeed')
('LPAREN', '(')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'pink_tank_blow_up')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'RadiusDamage')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', '200')
('COMMA', ',')
('IDENTIFIER', '10000')
('COMMA', ',')
('IDENTIFIER', '9999')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'enemy_tank_wait_for_friendly_tank_to_die')
('LPAREN', '(')
('IDENTIFIER', 'friendly_tank')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'friendly_tank')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop dummy firing')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'moving_firing_behavior')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: dummy_fire_behavior')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a vehicle')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Used to have the vignette vehicles from ::do_radio_tower_owned_event fire at each')
('NEWLINE', '\n')
('COMMENT', '          other')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'dummy_fire_behavior')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop dummy firing')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('IDENTIFIER', '5')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'fireweapon')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_radio_tower_explode')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Plays the fx for the radio tower explosion and animates it falling over')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: need to update the fx, either through script or fx editor to have a dust')
('NEWLINE', '\n')
('COMMENT', '                   cloud play at the right time when the radio tower falls. Also, adding')
('NEWLINE', '\n')
('COMMENT', '                   dead crushed nazis in the bunker the tower falls on would be sweet.')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#using_animtree(')
('QUOTE', '"')
('STRING', 'see2_models')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'do_radio_tower_explode')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'radiotower')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_init')
('LPAREN', '(')
('IDENTIFIER', 'radiotower')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'check_for_tower_damage')
('LPAREN', '(')
('IDENTIFIER', 'radiotower')
('COMMA', ',')
('IDENTIFIER', '1500')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'add_radio_tower_objective')
('LPAREN', '(')
('IDENTIFIER', 'radiotower')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'add_radio_tower_objective_alternate')
('LPAREN', '(')
('IDENTIFIER', 'radiotower')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'flag_wait')
('LPAREN', '(')
('IDENTIFIER', 'radiotower')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'tower_explode')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'radiotower')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'radiotower')
('IDENTIFIER', 'setModel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'anim_seelow_radiotower_d')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'radiotower')
('DOT', '.')
('IDENTIFIER', 'animname')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'radiotower')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'radiotower')
('IDENTIFIER', 'SetAnimTree')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'radiotower')
('IDENTIFIER', 'anim_single_solo')
('LPAREN', '(')
('IDENTIFIER', 'radiotower')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'fall')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'tower_secondary_explosion')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'radiotower')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'level thread move_radio_tower_blocker( true );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'autosave_by_name')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'fuel_depot_objectives')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: check_for_tower_damage')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: keeps track of how much damage has been done to the tower')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'check_for_tower_damage')
('LPAREN', '(')
('IDENTIFIER', 'tower')
('COMMA', ',')
('IDENTIFIER', 'amt')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'count')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'damage_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('IDENTIFIER', 'tower')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' damage trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'damage_trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'damage')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'damage')
('COMMA', ',')
('IDENTIFIER', 'other')
('COMMA', ',')
('IDENTIFIER', 'direction')
('COMMA', ',')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'damage_type')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'array_check_for_dupes')
('LPAREN', '(')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'other')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'explosive_damage')
('LPAREN', '(')
('IDENTIFIER', 'damage_type')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'count')
('PLUS_EQUALS', '+=')
('IDENTIFIER', 'damage')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'count')
('GREATER_THAN_OR_EQUAL_TO', '>=')
('IDENTIFIER', 'amt')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('IDENTIFIER', 'tower')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_radio_tower_infantry')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: sets up basic AI values for radio tower infantry behavior')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_radio_tower_infantry')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('COMMA', ',')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'enforce_flame_deaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'classname')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'actor_axis_ger_ber_wehr_reg_panzerschrek')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy antitank')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_antitank_AI')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_ent_see2_bias_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy antitank')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'rockets')
('ASSIGNMENT', '=')
('IDENTIFIER', '200')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxsightdistsqrd')
('ASSIGNMENT', '=')
('IDENTIFIER', '3000')
('MULTIPLY', '*')
('IDENTIFIER', '3000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'no_weapon_switch')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '128')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy infantry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_ent_see2_bias_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy infantry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '128')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' EVENT 3')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: fuel_depot_begin')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This sets up all the variables to start at the "Rejoin the Main Russian Army event" of')
('NEWLINE', '\n')
('COMMENT', '          see2')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Need to add a warp position and warp the player and tank to this position')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'fuel_depot_begin')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flak 88s destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_sound_for_event')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_early_tanks')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_first_player')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_player_tanks')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'do_area_spawn')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_area_three_infantry')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_group_spawn')
('LPAREN', '(')
('IDENTIFIER', '3')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_area_four_infantry')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_airstrike_triggers')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: fuel_depot_objectives')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Creates an objective star where the airstrike will be triggered and cleans up once')
('NEWLINE', '\n')
('COMMENT', '          the trigger has been hit.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '//////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'fuel_depot_objectives')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'final battle already started')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'start_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'finalbattle_trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'objective_add')
('LPAREN', '(')
('IDENTIFIER', '3')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'current')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_String')
('LPAREN', '(')
('IDENTIFIER', '3')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'SEE2_REJOIN_ARMY')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_additionalPosition')
('LPAREN', '(')
('IDENTIFIER', '3')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'start_trigger')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'start_trigger = getEnt( "finalbattle_trigger", "script_noteworthy" );')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'start_trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isPlayer')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'autosave_by_name')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fuel supplies destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_finalbattle')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_finalbattle_alternate()')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: If the player bypasses all of the objectives and ends up at the ridge, then he gets put on the last objective')
('NEWLINE', '\n')
('COMMENT', ' ')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_finalbattle_alternate')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'start_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'finalbattle_trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'start_trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'final battle already started')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_finalbattle')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_tiger_retreats')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Gets two tigers on the hill to retreat down the hill, leading the player to the final')
('NEWLINE', '\n')
('COMMENT', '          battle')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_tiger_retreats')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'retreat_tiger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'retreat tiger ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'retreat_endpoint')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getVehicleNode')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'end retreat tiger ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'retreat_tiger')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'retreat_endpoint')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'retreat_tiger')
('IDENTIFIER', 'setWaitNode')
('LPAREN', '(')
('IDENTIFIER', 'retreat_endpoint')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'retreat_tiger')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_retreat_done')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_retreat_done')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a retreating tiger')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Waits until they reach the final node in their path then deletes them')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_retreat_done')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_wait_node')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_area_three_infantry')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: waits until the area three spawn trigger is hit then causes area three infantry to ')
('NEWLINE', '\n')
('COMMENT', '          spawn.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_area_three_infantry')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'group 2 spawn')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'GLOCKE: TODO - find out why this trigger is missing')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'trigger')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fuel depot cleared')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_area_three_infantry')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: spawn_area_three_infantry')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Sets up spawn functions for area three infantry then spawns them')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_area_three_infantry')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spawner_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fuel depot spawner')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'spawner_array')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'setup_fuel_depot_infantry')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'array_thread')
('LPAREN', '(')
('IDENTIFIER', 'spawner_array')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'add_spawn_function')
('COMMA', ',')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'fuel_depot_infantry_evasion')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_guys')
('LPAREN', '(')
('IDENTIFIER', 'spawner_array')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_fuel_depot_infantry')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an infantryman')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Sets up AI values and routines for area 3 infantry')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_fuel_depot_infantry')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('COMMA', ',')
('IDENTIFIER', 'self')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'enforce_flame_deaths')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'classname')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'actor_axis_ger_ber_wehr_reg_panzerschrek')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy antitank')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'self thread unlimited_rocket_ammo();')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_ent_see2_bias_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy antitank')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'rockets')
('ASSIGNMENT', '=')
('IDENTIFIER', '200')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'maxsightdistsqrd')
('ASSIGNMENT', '=')
('IDENTIFIER', '3000')
('MULTIPLY', '*')
('IDENTIFIER', '3000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'a')
('DOT', '.')
('IDENTIFIER', 'no_weapon_switch')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '128')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_antitank_AI')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'setThreatBiasGroup')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy infantry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'set_ent_see2_bias_group')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'enemy infantry')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('ASSIGNMENT', '=')
('IDENTIFIER', '128')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '////////////////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' EVENT 4')
('NEWLINE', '\n')
('COMMENT', '////////////////////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: air_strike_begin')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Starts at the air strike just prior to the final battle. Sets up all variables to')
('NEWLINE', '\n')
('COMMENT', '          clear out old events')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Add warp points to warp player and tank to the appropriate area of the map')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'air_strike_begin')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flak 88s destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower destroyed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fuel depot cleared')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_sound_for_event')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'battlechatter')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_early_tanks')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_first_player')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'setup_player_tanks')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'do_victory_scene')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'do_area_spawn( 3 );')
('NEWLINE', '\n')
('COMMENT', 'wait_network_frame();')
('NEWLINE', '\n')
('COMMENT', 'spawn_area_four_infantry();')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'level thread setup_airstrike_triggers();')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_area_four_infantry')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: waits until the area 4 spawn trigger is hit then spawns the area 4 infantry')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_area_four_infantry')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'group 3 spawn')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'final line breached')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_area_four_infantry')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: spawn_area_four_infantry')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: spawns all the area 4 infantry and sends them to fortify forward positions')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Need to create a "setup_airstrike_infantry" function that sets up any')
('NEWLINE', '\n')
('COMMENT', '                   unique AI behavior.')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_area_four_infantry')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'spawner_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'final battle spawner')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_guys')
('LPAREN', '(')
('IDENTIFIER', 'spawner_array')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '\n\ttrigger_array = GetEntArray( "fourth area trigger", "targetname" );\n\t\n\tfor( i = 0; i < trigger_array.size; i++ )\n\t{\n\t\ttrigger_array[i] notify( "trigger" );\n\t\twait_network_frame();\n\t}\n\twait( 1 );\n\t')
('NEWLINE', '\n')
('COMMENT', 'do_final_battle_fortify();')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_final_battle_fortify')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Sets up the mg_turrets in this area to fire at the massed russian drones ')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED:')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_final_battle_fortify')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'mg_array')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'holdout mg')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'mg_array')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'mg_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'script_fireondrones')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'mg_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'setturretignoregoals')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'mg_array')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_mgturret')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'mg42_target_drones')
('LPAREN', '(')
('IDENTIFIER', 'undefined')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'undefined')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', '\n\tnum_fort_positions = 7;\n\tfor( i = 1; i < num_fort_positions; i++ )\n\t{\n\t\tnode = GetNode( "fortify_node"+i, "script_noteworthy" );\n\t\tsoldiers = get_living_ai_array( "fortify soldier "+i, "script_noteworthy" );\n\t\tfor( j = 0; j < soldiers.size; j++ )\n\t\t{\n\t\t\tif( isDefined( node ) && isDefined( soldiers[j] ) )\n\t\t\t{\n\t\t\t\tsoldiers[j].goalradius = 512;\n\t\t\t\tsoldiers[j] setGoalNode( node );\n\t\t\t}\n\t\t}\n\t}\n\t')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_airstrike_triggers')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Waits for all airstrike triggers.')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_airstrike_triggers')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'airstrike_triggers')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'airstrike_trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'airstrike_triggers')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'airstrike_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_airstrike')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_airstrike')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an airstrike trigger')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Waits until the trigger is hit then tells a plane to fire its rockets')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_airstrike')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_tank_target_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '6000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'see2_max_tank_firing_dist')
('ASSIGNMENT', '=')
('IDENTIFIER', '5000')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'ent')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'final line breached')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'ent')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fire rockets')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: setup_airstrike_planes')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Attaches all rocket and bomb models on airstrike planes')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'setup_airstrike_planes')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'rocket_planes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rocket plane')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'rocket_planes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'rocket_planes')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'rocket_planes')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rockets')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rocket_tags')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'j')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', '3')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'left_tag')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'tag_smallbomb0')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'j')
('PLUS', '+')
('QUOTE', '"')
('STRING', 'Left')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'right_tag')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'tag_smallbomb0')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'j')
('PLUS', '+')
('QUOTE', '"')
('STRING', 'Right')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'shreck')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_model')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'getTagOrigin')
('LPAREN', '(')
('IDENTIFIER', 'left_tag')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'shreck')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'getTagAngles')
('LPAREN', '(')
('IDENTIFIER', 'left_tag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'shreck')
('IDENTIFIER', 'setmodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'katyusha_rocket')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'shreck')
('IDENTIFIER', 'linkto')
('LPAREN', '(')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'left_tag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rockets')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rockets')
('COMMA', ',')
('IDENTIFIER', 'shreck')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rocket_tags')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rocket_tags')
('COMMA', ',')
('IDENTIFIER', 'left_tag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'shreck')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_model')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'getTagOrigin')
('LPAREN', '(')
('IDENTIFIER', 'right_tag')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'shreck')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'getTagAngles')
('LPAREN', '(')
('IDENTIFIER', 'right_tag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'shreck')
('IDENTIFIER', 'setmodel')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'katyusha_rocket')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'shreck')
('IDENTIFIER', 'linkto')
('LPAREN', '(')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'right_tag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rockets')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rockets')
('COMMA', ',')
('IDENTIFIER', 'shreck')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rocket_tags')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rocket_tags')
('COMMA', ',')
('IDENTIFIER', 'right_tag')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_network_frame')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'z')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'z')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rockets')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'z')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rockets')
('LBRACKET', '[')
('IDENTIFIER', 'z')
('RBRACKET', ']')
('IDENTIFIER', 'Hide')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'wait_for_fire_rockets')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'run_airstrike_planes')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: run_airstrike_planes')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Sets all the airstrike planes off in order, script controlled for easier tweaking')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'run_airstrike_planes')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'start_move_triggers')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'start_move_triggers')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rocket_plane_starts')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'start_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'finalbattle_trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'start_trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'rocket_planes')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'z')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'z')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rockets')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'z')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'rockets')
('LBRACKET', '[')
('IDENTIFIER', 'z')
('RBRACKET', ']')
('IDENTIFIER', 'Hide')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'DeleteMeAtEndOfPath')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'start_move_triggers')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'start_move_triggers')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'UseBy')
('LPAREN', '(')
('IDENTIFIER', 'player')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'Kevins plane audio')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'rocket_planes')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'bomber_planes')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('COMMENT', 'Kevins audio for planes')
('NEWLINE', '\n')
('IDENTIFIER', 'bomber_planes')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'GetPlayers')
('LPAREN', '(')
('RPAREN', ')')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('GREATER_THAN', '>')
('IDENTIFIER', '10000')
('RPAREN', ')')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('DOT', '.')
('IDENTIFIER', '01')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'playsound')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fly_by')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'DeleteMeAtEndOfPath')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'reached_end_node')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'Delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_fire_rockets')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: an airstrike plane')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: waits until the "fire rockets" signal is given then fires the rockets from this plane')
('NEWLINE', '\n')
('COMMENT', '          at the target points laid out in radiant for it')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Maybe make them acquire targets rather than firing at static points')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_fire_rockets')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'fire rockets')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'targetnodes')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'rockets')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'targetnodes')
('ASSIGNMENT', '=')
('IDENTIFIER', 'array_add')
('LPAREN', '(')
('IDENTIFIER', 'targetnodes')
('COMMA', ',')
('IDENTIFIER', 'getStruct')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'targetname')
('PLUS', '+')
('QUOTE', '"')
('STRING', ' target node ')
('QUOTE', '"')
('PLUS', '+')
('IDENTIFIER', 'i')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'j')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'rockets')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'j')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'rockets')
('LBRACKET', '[')
('IDENTIFIER', 'j')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'fire_rocket_at_pos')
('LPAREN', '(')
('IDENTIFIER', 'targetnodes')
('LBRACKET', '[')
('IDENTIFIER', 'j')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', 'randomintrange')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('IDENTIFIER', '2')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: fire_rocket_at_pos')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: a rocket')
('NEWLINE', '\n')
('COMMENT', " PURPOSE: Moves a rocket to it's target position and blows it up when it arrives.")
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Damage tweaking')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'fire_rocket_at_pos')
('LPAREN', '(')
('IDENTIFIER', 'target_struct')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'start_pos')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'end_pos')
('ASSIGNMENT', '=')
('IDENTIFIER', 'target_struct')
('DOT', '.')
('IDENTIFIER', 'origin')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'vectortoangles')
('LPAREN', '(')
('IDENTIFIER', 'end_pos')
('SUBTRACT', '-')
('IDENTIFIER', 'start_pos')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'angles')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'distance')
('ASSIGNMENT', '=')
('IDENTIFIER', 'distance')
('LPAREN', '(')
('IDENTIFIER', 'start_pos')
('COMMA', ',')
('IDENTIFIER', 'end_pos')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'time')
('ASSIGNMENT', '=')
('IDENTIFIER', 'distance')
('DIVIDE', '/')
('IDENTIFIER', '4200')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'unlink')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'moveTo')
('LPAREN', '(')
('IDENTIFIER', 'end_pos')
('COMMA', ',')
('IDENTIFIER', 'time')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playFxOnTag')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'pc132_trail')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'tag_fx')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'playloopsound')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rpg_rocket')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('IDENTIFIER', 'time')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'hide')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'playfx')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', '_effect')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'pc132_explode')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'stoploopsound')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'playSoundAtPosition')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'rpg_impact_boom')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'radiusdamage')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', '256')
('COMMA', ',')
('IDENTIFIER', '250')
('COMMA', ',')
('IDENTIFIER', '250')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'earthquake')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', '1')
('DOT', '.')
('IDENTIFIER', '5')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', '512')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '4')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'delete')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: wait_for_finalbattle')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: Waits until the player breaches the final trigger then plays the end cutscene')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'wait_for_finalbattle')
('LPAREN', '(')
('IDENTIFIER', 'skipped_radio')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'final battle already started')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'tanks')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'obj tanks')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'skipped_radio')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_State')
('LPAREN', '(')
('IDENTIFIER', '3')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_add')
('LPAREN', '(')
('IDENTIFIER', '4')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'current')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_String')
('LPAREN', '(')
('IDENTIFIER', '4')
('COMMA', ',')
('LOCAL_STRING', '&')
('QUOTE', '"')
('STRING', 'SEE2_BREAK_THE_LINE')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'autosave_by_name')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'line broken')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'do_victory_scene')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: do_victory_scene')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: plays the end IGC')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: Need to more adequately clean up remaining enemy AI, the attempts to do')
('NEWLINE', '\n')
('COMMENT', '                   radius damage to enemy vehicles and directly kill infantry seems not to be')
('NEWLINE', '\n')
('COMMENT', '\t\t\t\t\t\t\t\t\t working.')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', " Glocke: added in the objective check so that if the 88s and radio tower aren't killed, then the level fails them")
('NEWLINE', '\n')
('COMMENT', "         didn't properly handle co-op or splitscreen, fixed that (made it so that the scene always runs off of the host)")
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '\tplayers = get_players();')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tlevel.otherPlayersSpectate = true;')
('NEWLINE', '\n')
('COMMENT', '\tlevel.otherPlayersSpectateClient = players[0];')
('NEWLINE', '\n')
('COMMENT', '\t\t')
('NEWLINE', '\n')
('COMMENT', '\tfor( i = 1; i < players.size; i++ )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\t')
('NEWLINE', '\n')
('COMMENT', '\t\tplayers[i] thread maps\\_callbackglobal::spawnSpectator();')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'do_victory_scene')
('LPAREN', '(')
('IDENTIFIER', 'jumpto')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'jumpto')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'victory_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'victory trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'obj_trigger')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEnt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'special obj trigger')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_additionalPosition')
('LPAREN', '(')
('IDENTIFIER', '4')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'obj_trigger')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('ASSIGNMENT', '=')
('IDENTIFIER', 'undefined')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'victory_trigger')
('IDENTIFIER', 'waittill')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'trigger')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'isPlayer')
('LPAREN', '(')
('IDENTIFIER', 'guy')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'nextmission_cleanup')
('ASSIGNMENT', '=')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'clean_up_fadeout_hud')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'kill the audio queue')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('COMMENT', '-- kill the audio queue... this should help some of the noise problems')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'flak objective completed')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_state')
('LPAREN', '(')
('IDENTIFIER', '1')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'failed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'radio tower objective completed')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_state')
('LPAREN', '(')
('IDENTIFIER', '2')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'failed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'Objective_state')
('LPAREN', '(')
('IDENTIFIER', '4')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_clear')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'battlechatter allowed')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_players')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'magic_bullet_shield')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'jumpto')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'FreezeControls')
('LPAREN', '(')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '-- moved all of this to kill the enemies sooner')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_armor')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_armor')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_armor')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'health')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_armor')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'health')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'radiusDamage')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_armor')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', '1000')
('COMMA', ',')
('IDENTIFIER', '10')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetAIArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'axis')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('LOGICAL_AND', '&&')
('IDENTIFIER', 'isDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'health')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'level.enemy_infantry[i] doDamage( level.enemy_infantry[i].health * 2, level.enemy_infantry[i].origin );')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'enemy_infantry')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'bloody_death')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '75')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '-- Playing the commisar dialogue off of the first player')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'playSound')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_sound')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'commissar')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'victory1')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'commissar done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'waittill_notify_or_timeout')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'commissar done')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'SetClientDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'hud_showStance')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '0')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'SetClientDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'miniscoreboardhide')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'fade_to_black')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'playSound')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_sound')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'commissar')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'victory2')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'commissar done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'waittill_notify_or_timeout')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'commissar done')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'playSound')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'scr_sound')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'commissar')
('QUOTE', '"')
('RBRACKET', ']')
('LBRACKET', '[')
('QUOTE', '"')
('STRING', 'victory3')
('QUOTE', '"')
('RBRACKET', ']')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'commissar done')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'waittill_notify_or_timeout')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'commissar done')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '10')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'share_screen')
('LPAREN', '(')
('IDENTIFIER', 'get_host')
('LPAREN', '(')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'true')
('COMMA', ',')
('IDENTIFIER', 'true')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'Glocke: Pull everyone from their tanks so that their weapons can be disabled')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'MakeVehicleUsable')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'UseBy')
('LPAREN', '(')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'myTank')
('IDENTIFIER', 'MakeVehicleUnusable')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '\t\n\tplayer_tank = guy.myTank;\n\tplayer_tank makevehicleusable();\n\tplayer_tank useby( guy );\n\twait( 0.05 );\n\tplayer_tank makevehicleunusable();\n\t')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'link')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getent')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_temp_ending_pos')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'anim_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getent')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'temp_center')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('IDENTIFIER', 'TakeWeapon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'm2_flamethrower')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'hide')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'setorigin')
('LPAREN', '(')
('IDENTIFIER', 'link')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '4')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'setplayerangles')
('LPAREN', '(')
('IDENTIFIER', 'link')
('DOT', '.')
('IDENTIFIER', 'angles')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'stop damage hud')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'disableWeapons')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'i')
('LOGICAL_NOT', '!')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', '-- put the player in spectator mode')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'otherPlayersSpectate')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'otherPlayersSpectateClient')
('ASSIGNMENT', '=')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_callbackglobal')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'spawnSpectator')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'Glocke: Make this the host only')
('NEWLINE', '\n')
('COMMENT', 'for( i = 0; i < players.size; i++ )')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', 'Kevins notify to start audio for outro')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'walla')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'see2_anim')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'play_player_anim_outro')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('COMMA', ',')
('IDENTIFIER', 'anim_node')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'play_center_car_anims_side')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'play_center_car_anims_middle')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_ready_for_outro')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'outro_group_1_ready')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'outro_group_2_ready')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'fade_from_black')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'iprintlnbold( "OUTRO: Player get on the train." );')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '34')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', 'kevin fading audio')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'notify')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'audio_fade')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'fade_to_black')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'players')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'players')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'SetClientDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'miniscoreboardhide')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '0')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'nextmission')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'share_screen')
('LPAREN', '(')
('IDENTIFIER', 'get_host')
('LPAREN', '(')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'false')
('COMMA', ',')
('IDENTIFIER', 'false')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'clean_up_fadeout_hud')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('IDENTIFIER', 'Destroy')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: play_center_car_anims_side')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: spawns center car side guys and plays the center car side anims')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'play_center_car_anims_side')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('COMMENT', 'anim_node = getnode( "outro_center_origin", "targetname" );')
('NEWLINE', '\n')
('IDENTIFIER', 'anim_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getent')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'temp_center')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'left_spawn_points')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getstructarray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'center_car_guy_left')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'guys[0] = spawn_fake_guy_outro( left_spawn_points[0].origin, left_spawn_points[0].angles, "guyl1", "chernov" );')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_fake_guy_outro')
('LPAREN', '(')
('IDENTIFIER', 'left_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'left_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'guyl2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_fake_guy_outro')
('LPAREN', '(')
('IDENTIFIER', 'left_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'left_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'guyl3')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_fake_guy_outro')
('LPAREN', '(')
('IDENTIFIER', 'left_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '3')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'left_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '3')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'guyl4')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', ' This is chernov 4')
('NEWLINE', '\n')
('COMMENT', 'guys[1] = spawn_fake_guy_outro( left_spawn_points[4].origin, left_spawn_points[4].angles, "guyl5" );')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', '3')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_fake_hero_outro')
('LPAREN', '(')
('IDENTIFIER', 'left_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '4')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'left_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '4')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'guyl5')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'chernov')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'guys[3] = spawn_fake_guy_outro( left_spawn_points[5].origin, left_spawn_points[5].angles, "guyl6" );')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'right_spawn_points')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getstructarray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'center_car_guy_left')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', '4')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_fake_guy_outro')
('LPAREN', '(')
('IDENTIFIER', 'right_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'right_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'guyr1')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', '5')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_fake_guy_outro')
('LPAREN', '(')
('IDENTIFIER', 'right_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'right_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'guyr2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'outro_group_1_ready')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_ready_for_outro')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'outro_group_1_ready')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'outro_group_2_ready')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'anim_node')
('IDENTIFIER', 'anim_single')
('LPAREN', '(')
('IDENTIFIER', 'guys')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'outro')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: play_center_car_anims_middle')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: spawns center car middle guys and playes the center car middle anims')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#using_animtree(')
('QUOTE', '"')
('STRING', 'generic_human')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'play_center_car_anims_middle')
('LPAREN', '(')
('RPAREN', ')')
('COMMENT', ' ( R1-6 M1-6 L7-12 )')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'anim_node')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getent')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'temp_center')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('ASSIGNMENT', '=')
('LBRACKET', '[')
('RBRACKET', ']')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'center_spawn_points')
('ASSIGNMENT', '=')
('IDENTIFIER', 'getstructarray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'center_car_guy_center')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'targetname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_fake_hero_outro')
('LPAREN', '(')
('IDENTIFIER', 'center_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'center_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '0')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'guyc1')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'chernov')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_fake_guy_outro')
('LPAREN', '(')
('IDENTIFIER', 'center_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'center_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '1')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'guyc2')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('COMMENT', ' reznov is 2')
('NEWLINE', '\n')
('COMMENT', 'guys[2] = spawn_fake_guy_outro( center_spawn_points[2].origin, center_spawn_points[2].angles, "guyc3" );')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_fake_hero_outro')
('LPAREN', '(')
('IDENTIFIER', 'center_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'center_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '2')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'guyc3')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'reznov')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', '3')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_fake_guy_outro')
('LPAREN', '(')
('IDENTIFIER', 'center_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '3')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'center_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '3')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'guyc4')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', '4')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_fake_guy_outro')
('LPAREN', '(')
('IDENTIFIER', 'center_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '4')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'center_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '4')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'guyc5')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guys')
('LBRACKET', '[')
('IDENTIFIER', '5')
('RBRACKET', ']')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn_fake_guy_outro')
('LPAREN', '(')
('IDENTIFIER', 'center_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '5')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'center_spawn_points')
('LBRACKET', '[')
('IDENTIFIER', '5')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'angles')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'guyc6')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'flag_set')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'outro_group_2_ready')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'player_ready_for_outro')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'outro_group_1_ready')
('QUOTE', '"')
('RPAREN', ')')
('LOGICAL_OR', '||')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'flag')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'outro_group_2_ready')
('QUOTE', '"')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'anim_node')
('IDENTIFIER', 'anim_single')
('LPAREN', '(')
('IDENTIFIER', 'guys')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'outro')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: spawn_fake_guy_outro')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: spawns a drone for the level outro')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_fake_guy_outro')
('LPAREN', '(')
('IDENTIFIER', 'startpoint')
('COMMA', ',')
('IDENTIFIER', 'startangles')
('COMMA', ',')
('IDENTIFIER', 'anim_name')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'OkToSpawn')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_model')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'startpoint')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'startangles')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_rus_r_rifle')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_drones')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'drone_allies_assignWeapon_russian')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'attach')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon_rus_mosinnagant_rifle')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'tag_weapon_right')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('DOT', '.')
('IDENTIFIER', 'team')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'allies')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('DOT', '.')
('IDENTIFIER', 'for_ai_print')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('DOT', '.')
('IDENTIFIER', 'a')
('ASSIGNMENT', '=')
('IDENTIFIER', 'guy')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'UseAnimTree')
('LPAREN', '(')
('PREPROCESSOR_DIRECTIVE', '#animtree')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('DOT', '.')
('IDENTIFIER', 'animname')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anim_name')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'makeFakeAI')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('DOT', '.')
('IDENTIFIER', 'health')
('ASSIGNMENT', '=')
('IDENTIFIER', '100')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'guy')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: spawn_fake_hero_outro')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: This spawns a chernov or reznov model for use in the outro')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'spawn_fake_hero_outro')
('LPAREN', '(')
('IDENTIFIER', 'startpoint')
('COMMA', ',')
('IDENTIFIER', 'startangles')
('COMMA', ',')
('IDENTIFIER', 'anim_name')
('COMMA', ',')
('IDENTIFIER', 'heroname')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('ASSIGNMENT', '=')
('IDENTIFIER', 'spawn')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_model')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', 'startpoint')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('DOT', '.')
('IDENTIFIER', 'angles')
('ASSIGNMENT', '=')
('IDENTIFIER', 'startangles')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'heroname')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', 'reznov')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_rus_h_reznov_coat')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'character')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', 'char_rus_p_chernova')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'main')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'attach')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'weapon_rus_mosinnagant_rifle')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'tag_weapon_right')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'maps')
('PATH_SEPARATOR', '\\')
('IDENTIFIER', '_drones')
('DOUBLE_COLON', '::')
('IDENTIFIER', 'drone_allies_assignWeapon_russian')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('DOT', '.')
('IDENTIFIER', 'team')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'allies')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('DOT', '.')
('IDENTIFIER', 'a')
('ASSIGNMENT', '=')
('IDENTIFIER', 'guy')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'UseAnimTree')
('LPAREN', '(')
('PREPROCESSOR_DIRECTIVE', '#animtree')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('DOT', '.')
('IDENTIFIER', 'animname')
('ASSIGNMENT', '=')
('IDENTIFIER', 'anim_name')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('IDENTIFIER', 'makeFakeAI')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'guy')
('DOT', '.')
('IDENTIFIER', 'health')
('ASSIGNMENT', '=')
('IDENTIFIER', '100')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'guy')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION: fade_to_black')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: fades down to black in fadeTime')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'fade_to_black')
('LPAREN', '(')
('IDENTIFIER', 'fadeTime')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'fadeTime')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'fadeTime')
('ASSIGNMENT', '=')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' fade to black')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('ASSIGNMENT', '=')
('IDENTIFIER', 'NewHudElem')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('DOT', '.')
('IDENTIFIER', 'x')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('DOT', '.')
('IDENTIFIER', 'y')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('DOT', '.')
('IDENTIFIER', 'alpha')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('DOT', '.')
('IDENTIFIER', 'horzAlign')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'fullscreen')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('DOT', '.')
('IDENTIFIER', 'vertAlign')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'fullscreen')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('DOT', '.')
('IDENTIFIER', 'foreground')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('DOT', '.')
('IDENTIFIER', 'sort')
('ASSIGNMENT', '=')
('IDENTIFIER', '50')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('IDENTIFIER', 'SetShader')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'black')
('QUOTE', '"')
('COMMA', ',')
('IDENTIFIER', '640')
('COMMA', ',')
('IDENTIFIER', '480')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Fade into black')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('IDENTIFIER', 'FadeOverTime')
('LPAREN', '(')
('IDENTIFIER', 'fadeTime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('DOT', '.')
('IDENTIFIER', 'alpha')
('ASSIGNMENT', '=')
('IDENTIFIER', '1')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' FUNCTION:fade_from_black')
('NEWLINE', '\n')
('COMMENT', ' CALLED ON: level')
('NEWLINE', '\n')
('COMMENT', ' PURPOSE: fades up from black in fadeTime')
('NEWLINE', '\n')
('COMMENT', ' ADDITIONS NEEDED: None')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('IDENTIFIER', 'fade_from_black')
('LPAREN', '(')
('IDENTIFIER', 'fadeTime')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'fadeTime')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'fadeTime')
('ASSIGNMENT', '=')
('IDENTIFIER', '5')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', ' Fade into black')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('IDENTIFIER', 'FadeOverTime')
('LPAREN', '(')
('IDENTIFIER', 'fadeTime')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'fadetoblack')
('DOT', '.')
('IDENTIFIER', 'alpha')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', '////////////////////////////////')
('NEWLINE', '\n')
('COMMENT', ' END SEE2.GSC')
('NEWLINE', '\n')
('COMMENT', '///////////////////////////////')
('NEWLINE', '\n')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'debug_ai_prints')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('DIVIDE', '/')
('PREPROCESSOR_DIRECTIVE', '#')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'GetDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'debug_ai_print')
('QUOTE', '"')
('RPAREN', ')')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'SetDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'debug_ai_print')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '0')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'GetDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'debug_ai_print_range')
('QUOTE', '"')
('RPAREN', ')')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'SetDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'debug_ai_print_range')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', '1000')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'debug_ai_print')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', '1')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '5')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'GetDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'debug_ai_print')
('QUOTE', '"')
('RPAREN', ')')
('EQUALS_TO', '==')
('QUOTE', '"')
('STRING', '0')
('QUOTE', '"')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'debug_ai_print')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'continue')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'debug_ai_print')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('COMMENT', 'ai = GetAiArray();')
('NEWLINE', '\n')
('IDENTIFIER', 'ai')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetEntArray')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'script_model')
('QUOTE', '"')
('COMMA', ',')
('QUOTE', '"')
('STRING', 'classname')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'for')
('LPAREN', '(')
('IDENTIFIER', 'i')
('ASSIGNMENT', '=')
('IDENTIFIER', '0')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'ai')
('DOT', '.')
('IDENTIFIER', 'size')
('SEMICOLON', ';')
('IDENTIFIER', 'i')
('PLUS', '+')
('PLUS', '+')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'ai')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('DOT', '.')
('IDENTIFIER', 'for_ai_print')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'ai')
('LBRACKET', '[')
('IDENTIFIER', 'i')
('RBRACKET', ']')
('IDENTIFIER', 'thread')
('IDENTIFIER', 'debug_ai_prints_thread')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#/')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'debug_ai_prints_thread')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('DIVIDE', '/')
('PREPROCESSOR_DIRECTIVE', '#')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('IDENTIFIER', 'endon')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'death')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ai_print')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ai_print')
('ASSIGNMENT', '=')
('IDENTIFIER', 'true')
('SEMICOLON', ';')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'while')
('LPAREN', '(')
('IDENTIFIER', 'level')
('DOT', '.')
('IDENTIFIER', 'debug_ai_print')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'range')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetDvarInt')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'debug_ai_print_range')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'player')
('ASSIGNMENT', '=')
('IDENTIFIER', 'get_host')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'DistanceSquared')
('LPAREN', '(')
('IDENTIFIER', 'player')
('DOT', '.')
('IDENTIFIER', 'origin')
('COMMA', ',')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('RPAREN', ')')
('LESS_THAN_OR_EQUAL_TO', '<')
('IDENTIFIER', 'range')
('MULTIPLY', '*')
('IDENTIFIER', 'range')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'print3d')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'origin')
('PLUS', '+')
('LPAREN', '(')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '0')
('COMMA', ',')
('IDENTIFIER', '72')
('RPAREN', ')')
('COMMA', ',')
('IDENTIFIER', 'self')
('IDENTIFIER', 'get_debug_ai_print')
('LPAREN', '(')
('RPAREN', ')')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '05')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'wait')
('LPAREN', '(')
('IDENTIFIER', '0')
('DOT', '.')
('IDENTIFIER', '2')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ai_print')
('ASSIGNMENT', '=')
('IDENTIFIER', 'false')
('SEMICOLON', ';')
('NEWLINE', '\n')
('PREPROCESSOR_DIRECTIVE', '#/')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'get_debug_ai_print')
('LPAREN', '(')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'dvar')
('ASSIGNMENT', '=')
('IDENTIFIER', 'GetDvar')
('LPAREN', '(')
('QUOTE', '"')
('STRING', 'debug_ai_print')
('QUOTE', '"')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'switch')
('LPAREN', '(')
('IDENTIFIER', 'dvar')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'script_noteworthy')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_noteworthy')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'threatbias')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'threatbias')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'getthreatbiasgroup')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('IDENTIFIER', 'GetThreatBiasGroup')
('LPAREN', '(')
('RPAREN', ')')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'accuracy')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'accuracy')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'ignoreme')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreme')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'ignoreall')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'ignoreall')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'health')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'health')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'goalradius')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'goalradius')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'moveplaybackrate')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'moveplaybackrate')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'animname')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'animname')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'script_forcecolor')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_forceColor')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'script_forceColor')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'undefined')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'case')
('QUOTE', '"')
('STRING', 'player_seek')
('QUOTE', '"')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'player_seek')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('IDENTIFIER', 'self')
('DOT', '.')
('IDENTIFIER', 'player_seek')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'else')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'undefined')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('IDENTIFIER', 'break')
('SEMICOLON', ';')
('NEWLINE', '\n')
('IDENTIFIER', 'default')
('SINGLE_COLON', ':')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'undefined')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'if')
('LPAREN', '(')
('LOGICAL_NOT', '!')
('IDENTIFIER', 'IsDefined')
('LPAREN', '(')
('IDENTIFIER', 'value')
('RPAREN', ')')
('RPAREN', ')')
('NEWLINE', '\n')
('LBRACE', '{')
('NEWLINE', '\n')
('IDENTIFIER', 'value')
('ASSIGNMENT', '=')
('QUOTE', '"')
('STRING', 'no animname')
('QUOTE', '"')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('NEWLINE', '\n')
('NEWLINE', '\n')
('IDENTIFIER', 'return')
('IDENTIFIER', 'value')
('SEMICOLON', ';')
('NEWLINE', '\n')
('RBRACE', '}')
('EOF', None)