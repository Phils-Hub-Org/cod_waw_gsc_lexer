('COMMENT', '//')
('NEWLINE', '\n')
('COMMENT', '// file: ber3_event_atgun.gsc')
('NEWLINE', '\n')
('COMMENT', '// description: atgun event script for berlin3')
('NEWLINE', '\n')
('COMMENT', '// scripter: slayback')
('NEWLINE', '\n')
('COMMENT', '//')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '#include common_scripts\\utility;')
('NEWLINE', '\n')
('COMMENT', '#include maps\\_utility;')
('NEWLINE', '\n')
('COMMENT', '#include maps\\_anim;')
('NEWLINE', '\n')
('COMMENT', '#include maps\\ber3;')
('NEWLINE', '\n')
('COMMENT', '#include maps\\ber3_util;')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '#using_animtree ("generic_human");')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '// -- STARTS --')
('NEWLINE', '\n')
('COMMENT', '// start at the start of the atgun event')
('NEWLINE', '\n')
('COMMENT', 'event_atgun_start()')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\tobjectives_skip( 2 );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tGetEnt( "trig_atgun_tankSpawner", "targetname" ) notify( "trigger" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twarp_players_underworld();')
('NEWLINE', '\n')
('COMMENT', '\twarp_friendlies( "struct_atgun_start_friends", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\twarp_players( "struct_atgun_start", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\t//set_friendlychain( "node_intro_fc13" );')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '\tlevel thread event_atgun_setup();')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', 'event_atgun_tank_start()')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\tGetEnt( "trig_spawner_e1_axisflood_1", "script_noteworthy" ) Delete();  // delete spawn trigger')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tobjectives_skip( 3 );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tGetEnt( "trig_atgun_tankSpawner", "targetname" ) notify( "trigger" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twarp_players_underworld();')
('NEWLINE', '\n')
('COMMENT', '\twarp_friendlies( "struct_atgun_start_friends", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\twarp_players( "struct_atgun_start", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '\tmaps\\_status::show_task( "atgun" );')
('NEWLINE', '\n')
('COMMENT', '\tlevel thread event_atgun_tank();')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '// -- END STARTS --')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', 'event_atgun_setup()')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\tset_objective( 3 );')
('NEWLINE', '\n')
('COMMENT', '\tmaps\\_status::show_task( "atgun" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tthread event_atgun_action();')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', 'event_atgun_action()')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\t/* DEPRECATED')
('NEWLINE', '\n')
('COMMENT', '\tflag_clear( "atgun_barricade_left_destroyed" );')
('NEWLINE', '\n')
('COMMENT', '\tflag_clear( "atgun_barricade_right_destroyed" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tthread barricade_think( "sbmodel_atgun_barricade_left", "atgun_barricade_left_destroyed" );')
('NEWLINE', '\n')
('COMMENT', '\tthread barricade_think( "sbmodel_atgun_barricade_right", "atgun_barricade_right_destroyed" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twhile( !flag( "atgun_barricade_right_destroyed" ) || !flag( "atgun_barricade_left_destroyed" ) )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\twait( 1 );')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '\t*/')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\ttrigger_wait( "trig_spawner_e1_specialAIs", "script_noteworthy" );')
('NEWLINE', '\n')
('COMMENT', '\twait( 0.25 );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// grab guys')
('NEWLINE', '\n')
('COMMENT', '\tcommanders = get_ai_group_ai( "e1_commander" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tASSERTEX( IsDefined( commanders ) && commanders.size > 0, "couldn\'t find any commanders!" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tnumCommanders = commanders.size;')
('NEWLINE', '\n')
('COMMENT', '\tlevel.commandersDead = 0;')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tfor( i = 0; i < commanders.size; i++ )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\tlevel thread commander_think( commanders[i] );')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twhile( level.commandersDead < numCommanders )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\twait( 0.1 );')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tthread event_atgun_tank();')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', 'commander_think( commander )')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\tcommander waittill( "goal" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tcommander.health = 10;')
('NEWLINE', '\n')
('COMMENT', '\tcommander.suppressionwait = 0;')
('NEWLINE', '\n')
('COMMENT', '\tcommander.allowDeath = true;')
('NEWLINE', '\n')
('COMMENT', '\tcommander.animname = "officer";')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tanimSpot = GetNode( commander.target, "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// TODO replace with a binocular loop or something')
('NEWLINE', '\n')
('COMMENT', '\tanimSpot thread anim_loop_solo( commander, "signal_loop", undefined, "stopanim", undefined );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twhile( is_active_ai( commander ) )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\twait( 0.1 );')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tanimSpot notify( "stopanim" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tlevel.commandersDead++;')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '/* DEPRECATED')
('NEWLINE', '\n')
('COMMENT', 'barricade_think( barricadeTN, flagString )')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\tbarricade = GetEnt( barricadeTN, "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\tASSERTEX( IsDefined( barricade ), "Can\'t find barricade with targetname " + barricadeTN );')
('NEWLINE', '\n')
('COMMENT', '\tASSERTEX( IsDefined( barricade.target ), "Barricade " + barricadeTN + " doesn\'t have a damage trigger targeted." );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tdmgtrig = GetEnt( barricade.target, "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\tASSERTEX( IsDefined( dmgtrig ), "Can\'t find damage trigger with targetname " + barricade.target );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// wait for damage to accumulate')
('NEWLINE', '\n')
('COMMENT', '\t// TEMP it has to take damage 3 times, change later when trigger_damages work properly?')
('NEWLINE', '\n')
('COMMENT', '\tfor( i = 0; i < 3; i ++ )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\tdmgtrig waittill( "trigger" );')
('NEWLINE', '\n')
('COMMENT', '\t\twait( 1 );')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twait( 0.5 );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// remove the barricade')
('NEWLINE', '\n')
('COMMENT', '\tiprintlnbold( "barricade destroyed, good job!" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// TODO play particles etc.')
('NEWLINE', '\n')
('COMMENT', '\tbarricade ConnectPaths();')
('NEWLINE', '\n')
('COMMENT', '\tbarricade Delete();')
('NEWLINE', '\n')
('COMMENT', '\tdmgtrig Delete();')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tflag_set( flagString );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tguysTN = undefined;')
('NEWLINE', '\n')
('COMMENT', '\tendNodesTN = undefined;')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// send Russian troops through the barricade')
('NEWLINE', '\n')
('COMMENT', '\tif( barricadeTN == "sbmodel_atgun_barricade_left" )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\tguysTN = "spawner_atgun_left";')
('NEWLINE', '\n')
('COMMENT', '\t\tendNodesTN = "node_atgun_barricadeEndNodes_left";')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '\telse if( barricadeTN == "sbmodel_atgun_barricade_right" )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\tguysTN = "spawner_atgun_right";')
('NEWLINE', '\n')
('COMMENT', '\t\tendNodesTN = "node_atgun_barricadeEndNodes_right";')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tif( IsDefined( guysTN ) && IsDefined( endNodesTN ) )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\tthread barricade_send_troops( guysTN, endNodesTN );')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '\telse')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\tASSERTMSG( "either guysTN or endNodesTN is not specified for barricade named " + barricadeTN );')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '*/')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', 'barricade_send_troops( guysTN, endNodesTN )')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\t/*')
('NEWLINE', '\n')
('COMMENT', '\t// spawn some more guys for fun')
('NEWLINE', '\n')
('COMMENT', '\tspawners = GetEntArray( guysTN, "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\tfor( i = 0; i < spawners.size; i++ )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\tguy = spawners[i] spawn_ai();')
('NEWLINE', '\n')
('COMMENT', '\t\twait( RandomFloat( 2 ) );')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '\t*/')
('NEWLINE', '\n')
('COMMENT', '\t\t')
('NEWLINE', '\n')
('COMMENT', '\tents = GetEntArray( guysTN, "script_noteworthy" );')
('NEWLINE', '\n')
('COMMENT', '\tguys = [];')
('NEWLINE', '\n')
('COMMENT', '\tendnodes = [];')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// get the guys')
('NEWLINE', '\n')
('COMMENT', '\tfor( i = 0; i < ents.size; i++ )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\tent = ents[i];')
('NEWLINE', '\n')
('COMMENT', '\t\tif( is_active_ai( ent ) )')
('NEWLINE', '\n')
('COMMENT', '\t\t{')
('NEWLINE', '\n')
('COMMENT', '\t\t\tguys[guys.size] = ent;')
('NEWLINE', '\n')
('COMMENT', '\t\t}')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// collect all the nodes beyond the barricade\t')
('NEWLINE', '\n')
('COMMENT', '\tendnodes = GetNodeArray( endNodesTN, "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t/#')
('NEWLINE', '\n')
('COMMENT', '\tprintln( "guys array is size " + guys.size );')
('NEWLINE', '\n')
('COMMENT', '\tprintln( "endnodes array is size " + endnodes.size );')
('NEWLINE', '\n')
('COMMENT', '\t#/')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// send them to nodes')
('NEWLINE', '\n')
('COMMENT', '\tfor( i = 0; i < guys.size; i++ )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\tguy = guys[i];')
('NEWLINE', '\n')
('COMMENT', '\t\tif( IsDefined( endnodes[i] ) )')
('NEWLINE', '\n')
('COMMENT', '\t\t{')
('NEWLINE', '\n')
('COMMENT', '\t\t\tguy SetGoalNode( endnodes[i] );')
('NEWLINE', '\n')
('COMMENT', '\t\t}')
('NEWLINE', '\n')
('COMMENT', '\t\t// in case we run out of nodes')
('NEWLINE', '\n')
('COMMENT', '\t\telse')
('NEWLINE', '\n')
('COMMENT', '\t\t{')
('NEWLINE', '\n')
('COMMENT', '\t\t\tguy SetGoalPos( endnodes[RandomInt( endnodes.size - 1 )] );')
('NEWLINE', '\n')
('COMMENT', '\t\t}')
('NEWLINE', '\n')
('COMMENT', '\t\t')
('NEWLINE', '\n')
('COMMENT', '\t\tguy thread barricade_troop_delete();')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', 'barricade_troop_delete()')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\tif( is_active_ai( self ) )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\tself waittill( "goal" );')
('NEWLINE', '\n')
('COMMENT', '\t\tself bloody_death( true, 10 );')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', 'event_atgun_tank()')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\tset_objective( 4 );')
('NEWLINE', '\n')
('COMMENT', '\t//set_friendlychain( "node_intro_fc15" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\ttrigger_wait( "trig_atgun_regroupSpot", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tset_objective( 5 );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tlevel thread event_atgun_waveleadertrig();')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// TODO set up friendlies at barricade (in ber3_event_wave, probably)')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// roll out tank')
('NEWLINE', '\n')
('COMMENT', '\ttank = GetEnt( "vehicle_atgun_housetank", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\ttank thread atgun_tank_think();')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tblocker = GetEnt( "sbmodel_atgun_exitblocker", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\tblocker Delete();')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twait( 0.1 );  // let the vehicle connect the paths around it')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// send level control to ber3_event_wave')
('NEWLINE', '\n')
('COMMENT', '\tlevel thread maps\\ber3_event_wave::event_wave_setup();')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', 'event_atgun_waveleadertrig()')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\ttrig = GetEnt( "trig_wave_playerAtBarricade", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\ttrig trigger_off();')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twhile( !flag( "barricade_doors_connected" ) )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\twait( 0.1 );')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\ttrig trigger_on();')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '// self = the tank')
('NEWLINE', '\n')
('COMMENT', 'atgun_tank_think()')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\tthread maps\\_vehicle::gopath( self );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// TODO do this when hitting pathnodes')
('NEWLINE', '\n')
('COMMENT', '\twait( 3 );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tbarricade_right_array = GetEntArray( "sbmodel_atgun_center_barricade_1", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\tbarricade_center = GetEnt( "sbmodel_wave1_tankThruWall_left", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tself thread atgun_tank_turret( barricade_right_array );')
('NEWLINE', '\n')
('COMMENT', '\tlevel thread atgun_blow_wall();')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twait( 8 );')
('NEWLINE', '\n')
('COMMENT', '\tlevel thread atgun_move_barricade();')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tself waittill( "reached_end_node" );')
('NEWLINE', '\n')
('COMMENT', '\tself DisconnectPaths();')
('NEWLINE', '\n')
('COMMENT', '\tRadiusDamage( self.origin, 128, self.health, self.health );')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '// self = the tank')
('NEWLINE', '\n')
('COMMENT', 'atgun_tank_turret( barricade_right_array )')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\tself SetTurretTargetEnt( barricade_right_array[0] );')
('NEWLINE', '\n')
('COMMENT', '\tself waittill ("turret_on_target");')
('NEWLINE', '\n')
('COMMENT', '\twait( RandomFloatRange( 1, 3 ) );')
('NEWLINE', '\n')
('COMMENT', '\tlevel notify( "right_wall_destroy" );')
('NEWLINE', '\n')
('COMMENT', '\tself FireWeapon();')
('NEWLINE', '\n')
('COMMENT', '\twait( RandomFloatRange( 1, 3 ) );')
('NEWLINE', '\n')
('COMMENT', '\tself ClearTurretTarget();')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', 'atgun_blow_wall( justDelete )')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\tif( !IsDefined( justDelete ) )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\tjustDelete = false;')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twall_array = GetEntArray( "sbmodel_atgun_center_barricade_1", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tif( !justDelete )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\tlevel waittill( "right_wall_destroy" );')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\t// TODO make destruction fancier')
('NEWLINE', '\n')
('COMMENT', '\tfor( i = 0; i < wall_array.size; i++ )')
('NEWLINE', '\n')
('COMMENT', '\t{')
('NEWLINE', '\n')
('COMMENT', '\t\tpiece = wall_array[i];')
('NEWLINE', '\n')
('COMMENT', '\t\tif( piece.classname == "script_brushmodel" )')
('NEWLINE', '\n')
('COMMENT', '\t\t{')
('NEWLINE', '\n')
('COMMENT', '\t\t\tpiece ConnectPaths();')
('NEWLINE', '\n')
('COMMENT', '\t\t}')
('NEWLINE', '\n')
('COMMENT', '\t\tpiece Delete();')
('NEWLINE', '\n')
('COMMENT', '\t}')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', 'atgun_move_barricade()')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\twall_left = GetEnt( "sbmodel_wave1_tankThruWall_left", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\twall_right = GetEnt( "sbmodel_wave1_tankThruWall_right", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twall_left ConnectPaths();')
('NEWLINE', '\n')
('COMMENT', '\twall_right ConnectPaths();')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tflag_set( "barricade_doors_connected" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twall_left RotateTo( ( 0, 120, 0 ), 2 );')
('NEWLINE', '\n')
('COMMENT', '\twall_right RotateTo( ( 0, -120, 0 ), 2 );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twall_right waittill( "rotatedone" );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\twall_left DisconnectPaths();')
('NEWLINE', '\n')
('COMMENT', '\twall_right DisconnectPaths();')
('NEWLINE', '\n')
('COMMENT', '}')
('NEWLINE', '\n')
('COMMENT', '')
('NEWLINE', '\n')
('COMMENT', '// for level starts - simulates that the tank has run its course')
('NEWLINE', '\n')
('COMMENT', 'atgun_tank_skip()')
('NEWLINE', '\n')
('COMMENT', '{')
('NEWLINE', '\n')
('COMMENT', '\ttrig = GetEnt( "trig_atgun_regroupSpot", "targetname" );')
('NEWLINE', '\n')
('COMMENT', '\ttrig Delete();')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tthread atgun_blow_wall( true );')
('NEWLINE', '\n')
('COMMENT', '\tthread atgun_move_barricade();')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\tGetEnt( "trig_atgun_tankSpawner", "targetname" ) notify( "trigger" );')
('NEWLINE', '\n')
('COMMENT', '\twait( 0.1 );')
('NEWLINE', '\n')
('COMMENT', '\t')
('NEWLINE', '\n')
('COMMENT', '\ttank = GetEnt( "vehicle_atgun_housetank", "targetname" );\t')
('NEWLINE', '\n')
('COMMENT', '\tthread maps\\_vehicle::gopath( tank );')
('NEWLINE', '\n')
('COMMENT', '\ttank SetSpeed( 1000, 1000 );')
('NEWLINE', '\n')
('COMMENT', '\ttank waittill( "reached_end_node" );')
('NEWLINE', '\n')
('COMMENT', '\ttank DisconnectPaths();')
('NEWLINE', '\n')
('COMMENT', '\tRadiusDamage( tank.origin, 256, tank.health, tank.health );')
('NEWLINE', '\n')
('COMMENT', '}')
('EOF', None)